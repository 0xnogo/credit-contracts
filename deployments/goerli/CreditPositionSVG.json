{
  "address": "0xdFed61d972aA77B5740e6F6cB93F2b0dDB2d178e",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "id",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "input",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "info",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "xTitle",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "yTitle",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "xInfo",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "yInfo",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "rotate",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "bold",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "fillInfo",
                  "type": "string"
                }
              ],
              "internalType": "struct CreditPositionSVG.Input[]",
              "name": "inputs",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            }
          ],
          "internalType": "struct CreditPositionSVG.SVGParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "constructSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6d9de22957dd9dbb989b821d4823e7b32a04813a9ffdcb371d173d4ba8a9c68",
  "receipt": {
    "to": null,
    "from": "0x9D5a2ddBb543E62e026b182C8929d099781547c3",
    "contractAddress": "0xdFed61d972aA77B5740e6F6cB93F2b0dDB2d178e",
    "transactionIndex": 3,
    "gasUsed": "2685041",
    "logsBloom": "0x
    "blockHash": "0x0e7ff9f57ecd703988999ac963f3fa890cffe4bdf758c08819f9036532e1fc79",
    "transactionHash": "0xb6d9de22957dd9dbb989b821d4823e7b32a04813a9ffdcb371d173d4ba8a9c68",
    "logs": [],
    "blockNumber": 53434503,
    "cumulativeGasUsed": "2817823",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b465f702f80a9d9e2aac6ff945d6dd81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"xTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"yTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"xInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"yInfo\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"rotate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bold\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"fillInfo\",\"type\":\"string\"}],\"internalType\":\"struct CreditPositionSVG.Input[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"internalType\":\"struct CreditPositionSVG.SVGParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"constructSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/libraries/CreditPositionSVG.sol\":\"CreditPositionSVG\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IPair } from \\\"./IPair.sol\\\";\\n\\n/// @title Credit Factory Interface\\ninterface IFactory {\\n    /* ===== EVENT ===== */\\n\\n    /// @dev Emits when a new Credit Pair contract is created.\\n    /// @param asset The address of the ERC20 being lent and borrowed.\\n    /// @param collateral The address of the ERC20 used as collateral.\\n    /// @param pair The address of the Credit Pair contract created.\\n    event CreatePair(IERC20 indexed asset, IERC20 indexed collateral, IPair pair);\\n\\n    /// @dev Emits when a new staking fee collector.\\n    /// @param stakingFeeCollector The address of the stakingFeeCollector.\\n    event SetStakingFeeCollector(address indexed stakingFeeCollector);\\n\\n    /// @dev Emits when a new protocol fee collector.\\n    /// @param protocolFeeCollector The address of the protocolFeeCollector.\\n    event SetProtocolFeeCollector(address indexed protocolFeeCollector);\\n\\n    /* ===== VIEW ===== */\\n\\n    /// @dev Return the lpFee per second earned by liquidity providers.\\n    /// @dev Must be downcasted to uint16.\\n    /// @return The lpFee following UQ0.40 format.\\n    function lpFee() external view returns (uint256);\\n\\n    /// @dev Return the protocol fee per second earned by the owner.\\n    /// @dev Must be downcasted to uint16.\\n    /// @return The protocol fee per second following UQ0.40 format.\\n    function protocolFee() external view returns (uint256);\\n\\n    /// @dev Return the staking fee per second earned by the owner.\\n    /// @dev Must be downcasted to uint16.\\n    /// @return The staking fee per second following UQ0.40 format.\\n    function stakingFee() external view returns (uint256);\\n\\n    /// @dev Returns the address of a deployed pair.\\n    /// @param asset The address of the ERC20 being lent and borrowed.\\n    /// @param collateral The address of the ERC20 used as collateral.\\n    /// @return pair The address of the Credit Pair contract.\\n    function getPair(IERC20 asset, IERC20 collateral) external view returns (IPair pair);\\n\\n    /// @dev Return the beacon address for Pair contract.\\n    /// @return The beacon address for Pair contract.\\n    function beacon() external view returns (address);\\n\\n    /// @return Return the staking fee collector address.\\n    function stakingFeeCollector() external view returns (address);\\n\\n    /// @return Return the protocol fee collector address.\\n    function protocolFeeCollector() external view returns (address);\\n\\n    /* ===== UPDATE ===== */\\n\\n    /// @dev Creates a Credit Pool based on ERC20 pair parameters.\\n    /// @dev Cannot create a Credit Pool with the same pair parameters.\\n    /// @param asset The address of the ERC20 being lent and borrowed.\\n    /// @param collateral The address of the ERC20 as the collateral.\\n    /// @return pair The address of the Credit Pair contract.\\n    function createPair(IERC20 asset, IERC20 collateral) external returns (IPair pair);\\n\\n    /// @dev Set the staking fee collector of the factory.\\n    /// @param _stakingFeeCollector the chosen staking fee collector.\\n    function setStakingFeeCollector(address _stakingFeeCollector) external;\\n\\n    /// @dev Set the protocol fee collector of the factory.\\n    /// @param _protocolFeeCollector the chosen protocol fee collector.\\n    function setProtocolFeeCollector(address _protocolFeeCollector) external;\\n}\\n\",\"keccak256\":\"0x72f2f2fa90980f781ee1ae889206aba2bac8c917247e54253e597d6b4e13ee63\",\"license\":\"BUSL-1.1\"},\"contracts/core/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IFactory } from \\\"./IFactory.sol\\\";\\n\\n/// @title The interface of Pair contract.\\ninterface IPair {\\n    /* ===== STRUCT ===== */\\n\\n    struct Tokens {\\n        uint128 asset;\\n        uint128 collateral;\\n    }\\n\\n    struct Claims {\\n        uint112 loanPrincipal;\\n        uint112 loanInterest;\\n        uint112 coveragePrincipal;\\n        uint112 coverageInterest;\\n    }\\n\\n    struct Due {\\n        uint112 debt;\\n        uint112 collateral;\\n        uint32 startBlock;\\n    }\\n\\n    struct State {\\n        Tokens reserves;\\n        uint256 lpFeeStored;\\n        uint256 totalLiquidity;\\n        Claims totalClaims;\\n        uint120 totalDebtCreated;\\n        uint112 x;\\n        uint112 y;\\n        uint112 z;\\n    }\\n\\n    struct Pool {\\n        State state;\\n        mapping(address => uint256) liquidities;\\n        mapping(address => Claims) claims;\\n        mapping(address => Due[]) dues;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param liquidityTo The address of the receiver of liquidity balance.\\n    /// @param dueTo The addres of the receiver of locked debt balance.\\n    /// @param xIncrease The increase in the X state.\\n    /// @param yIncrease The increase in the Y state.\\n    /// @param zIncrease The increase in the Z state.\\n    /// @param data The data for callback.\\n    struct MintParam {\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 xIncrease;\\n        uint112 yIncrease;\\n        uint112 zIncrease;\\n        bytes data;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param collateralTo The addres of the receiver of collateral ERC20.\\n    /// @param liquidityIn The amount of liquidity balance burnt by the msg.sender.\\n    struct BurnParam {\\n        uint256 maturity;\\n        address assetTo;\\n        address collateralTo;\\n        uint256 liquidityIn;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param loanTo The address of the receiver of loan balance.\\n    /// @param coverageTo The addres of the receiver of coverage balance.\\n    /// @param xIncrease The increase in x state and the amount of asset ERC20 sent.\\n    /// @param yDecrease The decrease in y state.\\n    /// @param zDecrease The decrease in z state.\\n    /// @param data The data for callback.\\n    struct LendParam {\\n        uint256 maturity;\\n        address loanTo;\\n        address coverageTo;\\n        uint112 xIncrease;\\n        uint112 yDecrease;\\n        uint112 zDecrease;\\n        bytes data;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param collateralTo The addres of the receiver of collateral ERC20.\\n    /// @param claimsIn The amount of loan balance and coverage balance burnt by the msg.sender.\\n    struct WithdrawParam {\\n        uint256 maturity;\\n        address assetTo;\\n        address collateralTo;\\n        Claims claimsIn;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param dueTo The address of the receiver of locked debt.\\n    /// @param xDecrease The decrease in x state and amount of asset ERC20 received by assetTo.\\n    /// @param yIncrease The increase in y state.\\n    /// @param zIncrease The increase in z state.\\n    /// @param data The data for callback.\\n    struct BorrowParam {\\n        uint256 maturity;\\n        address assetTo;\\n        address dueTo;\\n        uint112 xDecrease;\\n        uint112 yIncrease;\\n        uint112 zIncrease;\\n        bytes data;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param to The address of the receiver of collateral ERC20.\\n    /// @param owner The addres of the owner of locked debt.\\n    /// @param id The id of locked debt.\\n    /// @param assetsIn The amount of asset ERC20 paid per locked debt.\\n    /// @param collateralsOut The amount of collateral ERC20 withdrawn per collaterlaized debt.\\n    /// @param data The data for callback.\\n    struct PayParam {\\n        uint256 maturity;\\n        address to;\\n        address owner;\\n        uint256[] ids;\\n        uint112[] assetsIn;\\n        uint112[] collateralsOut;\\n        bytes data;\\n    }\\n\\n    /* ===== EVENT ===== */\\n\\n    /// @dev Emits when the state gets updated.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param x The new x state of the pool.\\n    /// @param y The new y state of the pool.\\n    /// @param z The new z state of the pool.\\n    event Sync(uint256 indexed maturity, uint112 x, uint112 y, uint112 z);\\n\\n    /// @dev Emits when mint function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param liquidityTo The address of the receiver of liquidity balance.\\n    /// @param dueTo The address of the receiver of locked debt balance.\\n    /// @param assetIn The increase in the X state.\\n    /// @param liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @param id The array index of the locked debt received by dueTo.\\n    /// @param dueOut The locked debt received by dueTo.\\n    /// @param feeIn The amount of fee asset ERC20 deposited.\\n    event Mint(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed liquidityTo,\\n        address indexed dueTo,\\n        uint256 assetIn,\\n        uint256 liquidityOut,\\n        uint256 id,\\n        Due dueOut,\\n        uint256 feeIn\\n    );\\n\\n    /// @dev Emits when burn function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param collateralTo The addres of the receiver of collateral ERC20.\\n    /// @param liquidityIn The amount of liquidity balance burnt by the sender.\\n    /// @param assetOut The amount of asset ERC20 received.\\n    /// @param collateralOut The amount of collateral ERC20 received.\\n    /// @param feeOut The amount of fee asset ERC20 received.\\n    event Burn(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed assetTo,\\n        address indexed collateralTo,\\n        uint256 liquidityIn,\\n        uint256 assetOut,\\n        uint128 collateralOut,\\n        uint256 feeOut\\n    );\\n\\n    /// @dev Emits when lend function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param loanTo The address of the receiver of loan balance.\\n    /// @param coverageTo The addres of the receiver of coverage balance.\\n    /// @param assetIn The increase in X state.\\n    /// @param claimsOut The amount of loan balance and coverage balance received.\\n    /// @param feeIn The amount of fee paid by lender.\\n    /// @param protocolFeeIn The amount of protocol fee paid by lender.\\n    /// @param stakingFeeIn The amount of staking fee paid by lender.\\n    event Lend(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed loanTo,\\n        address indexed coverageTo,\\n        uint256 assetIn,\\n        Claims claimsOut,\\n        uint256 feeIn,\\n        uint256 protocolFeeIn,\\n        uint256 stakingFeeIn\\n    );\\n\\n    /// @dev Emits when withdraw function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param collateralTo The address of the receiver of collateral ERC20.\\n    /// @param claimsIn The amount of loan balance and coverage balance burnt by the sender.\\n    /// @param tokensOut The amount of asset ERC20 and collateral ERC20 received.\\n    event Withdraw(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed assetTo,\\n        address indexed collateralTo,\\n        Claims claimsIn,\\n        Tokens tokensOut\\n    );\\n\\n    /// @dev Emits when borrow function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param dueTo The address of the receiver of locked debt.\\n    /// @param assetOut The amount of asset ERC20 received by assetTo.\\n    /// @param id The array index of the locked debt received by dueTo.\\n    /// @param dueOut The locked debt received by dueTo.\\n    /// @param feeIn The amount of fee paid by lender.\\n    /// @param protocolFeeIn The amount of protocol fee paid by lender.\\n    /// @param stakingFeeIn The amount of staking fee paid by lender.\\n    event Borrow(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed assetTo,\\n        address indexed dueTo,\\n        uint256 assetOut,\\n        uint256 id,\\n        Due dueOut,\\n        uint256 feeIn,\\n        uint256 protocolFeeIn,\\n        uint256 stakingFeeIn\\n    );\\n\\n    /// @dev Emits when pay function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param to The address of the receiver of collateral ERC20.\\n    /// @param owner The address of the owner of locked debt.\\n    /// @param duesFullyPaid The ids fully repaid.\\n    /// @param assetIn The total amount of asset ERC20 paid.\\n    /// @param collateralOut The total amount of collateral ERC20 received.\\n    event Pay(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed to,\\n        address indexed owner,\\n        uint256[] duesFullyPaid,\\n        uint256 assetIn,\\n        uint256 collateralOut\\n    );\\n\\n    /// @dev Emits when collectProtocolFee function is called\\n    /// @param sender The address of the caller.\\n    /// @param to The address of the receiver of asset ERC20.\\n    /// @param protocolFeeOut The amount of protocol fee asset ERC20 received.\\n    event CollectProtocolFee(address indexed sender, address indexed to, uint256 protocolFeeOut);\\n\\n    /// @dev Emits when collectStakingFee function is called\\n    /// @param sender The address of the caller.\\n    /// @param to The address of the receiver of asset ERC20.\\n    /// @param stakingFeeOut The amount of protocol fee asset ERC20 received.\\n    event CollectStakingFee(address indexed sender, address indexed to, uint256 stakingFeeOut);\\n\\n    /* ===== VIEW ===== */\\n\\n    /// @dev Return the address of the factory contract that deployed this contract.\\n    /// @return The address of the factory contract.\\n    function factory() external view returns (IFactory);\\n\\n    /// @dev Return the address of the ERC20 being lent and borrowed.\\n    /// @return The address of the asset ERC20.\\n    function asset() external view returns (IERC20);\\n\\n    /// @dev Return the address of the ERC20 as collateral.\\n    /// @return The address of the collateral ERC20.\\n    function collateral() external view returns (IERC20);\\n\\n    //// @dev Return the fee per second earned by liquidity providers.\\n    /// @dev Must be downcasted to uint16.\\n    //// @return The transaction fee following the UQ0.40 format.\\n    function lpFee() external view returns (uint256);\\n\\n    /// @dev Return the protocol fee per second earned by the owner.\\n    /// @dev Must be downcasted to uint16.\\n    /// @return The protocol fee per second following the UQ0.40 format.\\n    function protocolFee() external view returns (uint256);\\n\\n    /// @dev Return the staking fee per second earned by the owner.\\n    /// @dev Must be downcasted to uint16.\\n    /// @return The staking fee per second following the UQ0.40 format.\\n    function stakingFee() external view returns (uint256);\\n\\n    /// @dev Return the fee stored of the Pool given maturity.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return The fee in asset ERC20 stored in the Pool.\\n    function lpFeeStored(uint256 maturity) external view returns (uint256);\\n\\n    /// @dev Return the protocol fee stored.\\n    /// @return The protocol fee in asset ERC20 stored.\\n    function protocolFeeStored() external view returns (uint256);\\n\\n    /// @dev Return the staking fee stored.\\n    /// @return The staking fee in asset ERC20 stored.\\n    function stakingFeeStored() external view returns (uint256);\\n\\n    /// @dev Returns the Constant Product state of a Pool.\\n    /// @dev The Y state follows the UQ80.32 format.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return x The x state.\\n    /// @return y The y state.\\n    /// @return z The z state.\\n    function constantProduct(uint256 maturity) external view returns (uint112 x, uint112 y, uint112 z);\\n\\n    /// @dev Returns the asset ERC20 and collateral ERC20 balances of a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return The asset ERC20 and collateral ERC20 locked.\\n    function totalReserves(uint256 maturity) external view returns (Tokens memory);\\n\\n    /// @dev Returns the total liquidity supply of a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return The total liquidity supply.\\n    function totalLiquidity(uint256 maturity) external view returns (uint256);\\n\\n    /// @dev Returns the liquidity balance of a user in a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param owner The address of the user.\\n    /// @return The liquidity balance.\\n    function liquidityOf(uint256 maturity, address owner) external view returns (uint256);\\n\\n    /// @dev Returns the total claims of a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return The total claims.\\n    function totalClaims(uint256 maturity) external view returns (Claims memory);\\n\\n    /// @dev Returms the claims of a user in a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param owner The address of the user.\\n    /// @return The claims balance.\\n    function claimsOf(uint256 maturity, address owner) external view returns (Claims memory);\\n\\n    /// @dev Returns the total debt created.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return The total asset ERC20 debt created.\\n    function totalDebtCreated(uint256 maturity) external view returns (uint120);\\n\\n    /// @dev Returns the number of dues owned by owner.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param owner The address of the user.\\n    function totalDuesOf(uint256 maturity, address owner) external view returns (uint256);\\n\\n    /// @dev Returns a locked debt of a user in a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param owner The address of the user.\\n    /// @param id The index of the locked debt\\n    /// @return The locked debt balance.\\n    function dueOf(uint256 maturity, address owner, uint256 id) external view returns (Due memory);\\n\\n    /* ===== UPDATE ===== */\\n\\n    /// @dev Add liquidity into a Pool by a liquidity provider.\\n    /// @dev Liquidity providers can be thought as making both lending and borrowing positions.\\n    /// @dev Must be called by a contract implementing the ICreditMintCallback interface.\\n    /// @param param The mint parameter found in the MintParam struct.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function mint(\\n        MintParam calldata param\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, Due memory dueOut);\\n\\n    /// @dev Remove liquidity from a Pool by a liquidity provider.\\n    /// @dev Can only be called after the maturity of the Pool.\\n    /// @param param The burn parameter found in the BurnParam struct.\\n    /// @return assetOut The amount of asset ERC20 received.\\n    /// @return collateralOut The amount of collateral ERC20 received.\\n    function burn(BurnParam calldata param) external returns (uint256 assetOut, uint128 collateralOut);\\n\\n    /// @dev Lend asset ERC20 into the Pool.\\n    /// @dev Must be called by a contract implementing the ICreditLendCallback interface.\\n    /// @param param The lend parameter found in the LendParam struct.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return claimsOut The amount of loan balance and coverage balance received.\\n    function lend(LendParam calldata param) external returns (uint256 assetIn, Claims memory claimsOut);\\n\\n    /// @dev Withdraw asset ERC20 and/or collateral ERC20 for lenders.\\n    /// @dev Can only be called after the maturity of the Pool.\\n    /// @param param The withdraw parameter found in the WithdrawParam struct.\\n    /// @return tokensOut The amount of asset ERC20 and collateral ERC20 received.\\n    function withdraw(WithdrawParam calldata param) external returns (Tokens memory tokensOut);\\n\\n    /// @dev Borrow asset ERC20 from the Pool.\\n    /// @dev Must be called by a contract implementing the ICreditBorrowCallback interface.\\n    /// @param param The borrow parameter found in the BorrowParam struct.\\n    /// @return assetOut The amount of asset ERC20 received.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function borrow(BorrowParam calldata param) external returns (uint256 assetOut, uint256 id, Due memory dueOut);\\n\\n    /// @dev Pay asset ERC20 into the Pool to repay debt for borrowers.\\n    /// @dev If there are asset paid, must be called by a contract implementing the ICreditPayCallback interface.\\n    /// @param param The pay parameter found in the PayParam struct.\\n    /// @return assetIn The total amount of asset ERC20 paid.\\n    /// @return collateralOut The total amount of collateral ERC20 received.\\n    /// @return duesFullyPaid Dues fully reimbursed during the call\\n    function pay(\\n        PayParam calldata param\\n    ) external returns (uint128 assetIn, uint128 collateralOut, uint256[] memory duesFullyPaid);\\n\\n    /// @dev Collect the stored protocol fee.\\n    /// @dev Can only be called by the owner.\\n    /// @param to The receiver of the protocol fee.\\n    /// @return protocolFeeOut The total amount of protocol fee asset ERC20 received.\\n    function collectProtocolFee(address to) external returns (uint256 protocolFeeOut);\\n\\n    /// @dev Collect the stored staking fee.\\n    /// @dev Can only be called by the owner.\\n    /// @param to The receiver of the staking fee.\\n    /// @return stakingFeeOut The total amount of staking fee asset ERC20 received.\\n    function collectStakingFee(address to) external returns (uint256 stakingFeeOut);\\n}\\n\",\"keccak256\":\"0xa9393765d348430f5681fe1af06f4957e778f67c2f82969e2a5f6408fbb99a3b\",\"license\":\"BUSL-1.1\"},\"contracts/tokens/interfaces/ICreditPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\n\\ninterface ICreditPositionManager is IERC721Upgradeable {\\n    /// @param pair Pair Address\\n    /// @param maturity Maturity of the position\\n    /// @param positionType Type of position (see enum PositionType)\\n    /// @param slot0 Slot 0 of the position\\n    /// @param slot1 Slot 1 of the position\\n    /// @param slot2 Slot 2 of the position\\n    /// @param slot3 Slot 3 of the position\\n    struct CreditPosition {\\n        IPair pair;\\n        uint256 maturity;\\n        PositionType positionType;\\n        uint256 slot0;\\n        uint256 slot1;\\n        uint256 slot2;\\n        uint256 slot3;\\n    }\\n\\n    /// @param pair Pair Address\\n    /// @param maturity Maturity of the position\\n    /// @param positionType Type of position (see enum PositionType)\\n    /// @param amounts Amounts of the position (array of max length 4)\\n    /// @param recipient Recipient of the position\\n    struct MintParams {\\n        IPair pair;\\n        uint256 maturity;\\n        PositionType positionType;\\n        uint256[] amounts;\\n        address recipient;\\n    }\\n\\n    /// @notice The type of position, i.e. liquidity, credit or debt.\\n    enum PositionType {\\n        LIQUIDITY,\\n        CREDIT,\\n        DEBT\\n    }\\n\\n    event CreditPositionCreated(\\n        IPair pair,\\n        uint256 maturity,\\n        address indexed recipient,\\n        uint256 indexed tokenId,\\n        ICreditPositionManager.PositionType positionType\\n    );\\n\\n    event CreditPositionBurnt(uint256 indexed tokenId);\\n\\n    /**\\n     *  @notice Mint a Credit Position.\\n     *\\n     *  @param params          The parameters of the Credit Position.\\n     */\\n    function mint(ICreditPositionManager.MintParams calldata params) external;\\n\\n    /**\\n     *  @notice Burn a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     */\\n    function burn(uint256 _tokenId) external;\\n\\n    /**\\n     *  @notice Get the Credit Position Info.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return CreditPosition The Credit Position of the wrapped token.\\n     */\\n    function getPositions(uint256 _tokenId) external view returns (ICreditPositionManager.CreditPosition memory);\\n\\n    /**\\n     *  @notice Get the position type of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return PositionType   The position type of the Credit Position.\\n     */\\n    function getPositionType(uint256 _tokenId) external view returns (PositionType);\\n\\n    /**\\n     *  @notice Get the pair of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return address        The pair of the Credit Position.\\n     */\\n    function getPair(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     *  @notice Get the maturity of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return uint256        The maturity of the Credit Position.\\n     */\\n    function getMaturity(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     *  @notice Get the liquidity of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return Token          The liquidity of the Credit Position.\\n     */\\n    function getLiquidity(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     *  @notice Get the credit of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return Token          The credit of the Credit Position.\\n     */\\n    function getCredit(uint256 _tokenId) external view returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     *  @notice Get the debt if of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return Token          The debt of the Credit Position.\\n     */\\n    function getDebtId(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     *  @notice Get the due (from the Pair) of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return Due            The due of the Credit Position.\\n     */\\n    function dueOf(uint256 _tokenId) external view returns (IPair.Due memory);\\n\\n    /**\\n     *  @notice Get the credit position id of a due.\\n     *\\n     *  @param _dueId          The id of the due.\\n     *  @return uint256        The credit position id of the due.\\n     */\\n    function creditPositionOf(uint256 _dueId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7861d51f6ee478e13c65232f0056f4e324743c05e5b71cedc2b228eae413dbb8\",\"license\":\"BUSL-1.1\"},\"contracts/tokens/libraries/CreditPositionSVG.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* solhint-disable quotes, max-line-length */\\n\\nimport \\\"../interfaces/ICreditPositionManager.sol\\\";\\n\\npragma solidity =0.8.20;\\n\\nlibrary CreditPositionSVG {\\n    struct SVGParams {\\n        Input[] inputs;\\n        string color;\\n        string title;\\n    }\\n\\n    struct Input {\\n        string id;\\n        string input;\\n        string info;\\n        string xTitle;\\n        string yTitle;\\n        string xInfo;\\n        string yInfo;\\n        bool rotate;\\n        bool bold;\\n        string fillInfo;\\n    }\\n\\n    string constant BEGINNING =\\n        string('<svg width=\\\"417\\\" height=\\\"609\\\" viewBox=\\\"0 0 417 609\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">');\\n\\n    string constant END =\\n        string(\\n            '<g filter=\\\"url(#filter0_d_1838_20465)\\\"><path d=\\\"M341.412 20.5206H370.418C382.568 20.5206 392.418 30.3704 392.418 42.5206V101.959\\\" stroke=\\\"#FFBD13\\\" stroke-miterlimit=\\\"1.41421\\\" stroke-linecap=\\\"round\\\"/></g><g filter=\\\"url(#filter1_d_1838_20465)\\\"><path d=\\\"M341.412 20.5205H370.418C382.568 20.5205 392.418 30.3702 392.418 42.5205V101.959\\\" stroke=\\\"#FFBD13\\\" stroke-miterlimit=\\\"1.41421\\\" stroke-linecap=\\\"round\\\"/></g><g filter=\\\"url(#filter2_d_1838_20465)\\\"><path d=\\\"M315.241 20.5205H370.418C382.568 20.5205 392.418 30.3702 392.418 42.5205V122.998\\\" stroke=\\\"#FFBD13\\\" stroke-miterlimit=\\\"1.41421\\\" stroke-linecap=\\\"round\\\"/></g><g filter=\\\"url(#filter3_d_1838_20465)\\\"><path d=\\\"M315.241 20.5205H370.418C382.568 20.5205 392.418 30.3702 392.418 42.5205V122.998\\\" class=\\\"S\\\" stroke-width=\\\"2\\\" stroke-miterlimit=\\\"1.41421\\\" stroke-linecap=\\\"round\\\"/></g><path d=\\\"M1 25C1 16.7157 7.71573 10 16 10H200L315.611 10C322.318 10 327.758 15.431 327.769 22.1378C327.782 29.9479 334.117 36.2723 341.927 36.2723H362.791C371.075 36.2723 377.791 42.988 377.791 51.2723V105.501C377.791 111.917 382.974 117.128 389.39 117.162C394.706 117.191 399 121.508 399 126.824V309V593C399 601.284 392.284 608 384 608H16C7.71574 608 1 601.284 1 593V25Z\\\" fill=\\\"black\\\" stroke=\\\"#2B2D2F\\\" stroke-width=\\\"2\\\"/><use href=\\\"#pair\\\" /><use href=\\\"#title\\\" /><use href=\\\"#tokenid\\\" /><use href=\\\"#firstdata\\\"/><use href=\\\"#seconddata\\\"/><use href=\\\"#maturity\\\" /><rect x=\\\"112.864\\\" y=\\\"213.734\\\" width=\\\"173.392\\\" height=\\\"173.392\\\" rx=\\\"86.696\\\" fill=\\\"#0F0F0F\\\"/><g filter=\\\"url(#filter4_d_1838_20465)\\\"><path d=\\\"M276.262 301.273C276.262 321.837 268.08 340.49 254.794 354.153M200.403 377.132C175.785 377.132 153.905 365.405 140.046 347.232C130.32 334.478 124.544 318.55 124.544 301.273M164.689 234.331C175.332 228.64 187.491 225.414 200.403 225.414C237.182 225.414 267.847 251.587 274.79 286.323M276.266 301.273C276.266 321.837 268.084 340.489 254.797 354.153\\\" class=\\\"S\\\" stroke-width=\\\"2.70925\\\" stroke-linecap=\\\"round\\\"/></g><g opacity=\\\"0.3\\\"><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M192.652 235.79C185.642 236.553 177.16 239.117 170.412 242.513C165.627 244.921 158.745 249.581 156.475 251.95L155.12 253.364L161.181 259.439L167.242 265.513L169.146 263.974C186.716 249.765 210.812 249.191 228.394 262.561L232.204 265.458L238.256 259.369L244.308 253.279L241.961 251.133C234.99 244.757 223.985 239.288 213.314 236.899C209.139 235.965 197.025 235.314 192.652 235.79ZM191.481 266.311C187.758 267.125 180.645 270.562 178.094 272.781L176.216 274.415L182.248 280.483L188.28 286.551L191.589 284.855C194.775 283.223 194.76 282.826 199.558 282.826C202.75 282.826 204.941 283.205 207.966 284.876L211.07 286.592L217.123 280.504L223.176 274.415L221.298 272.781C218.842 270.646 211.796 267.261 207.817 266.307C203.938 265.375 195.753 265.378 191.481 266.311ZM171.511 279.511C163.611 289.857 162.336 304.583 168.308 316.5C169.271 318.422 170.849 320.899 171.815 322.005L173.572 324.016L179.71 317.907L185.848 311.797L184.725 310.145C181.168 304.91 181.167 296.163 184.723 290.929L185.844 289.28L179.863 283.285C176.573 279.988 173.729 277.291 173.544 277.291C173.358 277.291 172.443 278.29 171.511 279.511ZM195.437 295.722C192.42 298.494 192.424 302.73 195.446 305.383C198.321 307.908 201.735 307.771 204.366 305.024C206.921 302.357 206.74 298.282 203.954 295.722C202.498 294.385 201.971 294.196 199.696 294.196C197.42 294.196 196.894 294.385 195.437 295.722ZM210.027 315.164C208.475 316.365 205.295 317.599 202.395 318.125C198.869 318.764 195.067 318.092 191.112 316.128L188.164 314.665L182.307 320.507C179.086 323.721 176.45 326.575 176.45 326.85C176.45 327.405 182.792 331.652 185.387 332.834C192.228 335.951 202.039 336.599 209.371 334.419C214.785 332.809 222.867 328.281 222.923 326.827C222.933 326.565 220.247 323.67 216.954 320.394C211.262 314.732 210.92 314.474 210.027 315.164ZM229.432 337.803C213.033 351.385 188.156 351.69 170.868 338.518C169.043 337.128 167.384 335.991 167.18 335.991C166.976 335.991 164.179 338.627 160.965 341.85L155.121 347.708L156.511 349.176C160.575 353.47 171.716 359.955 179.287 362.436C186.576 364.824 190.154 365.331 199.696 365.331C209.238 365.331 212.817 364.823 220.105 362.435C227.716 359.941 236.608 354.851 242.584 349.569L244.49 347.885L238.355 341.703C234.982 338.303 232.194 335.538 232.16 335.558C232.126 335.578 230.899 336.588 229.432 337.803Z\\\" class=\\\"M\\\"/><path d=\\\"M135.328 290.441C137.122 279.114 142.607 267.147 149.853 258.755C151.089 257.323 152.242 256.152 152.417 256.152C152.84 256.152 164.255 267.55 164.255 267.972C164.255 268.153 163.091 269.846 161.669 271.736C157.59 277.156 155.101 282.34 153.143 289.494C151.827 294.301 151.954 307.169 153.369 312.505C154.734 317.647 158.863 326.016 161.886 329.765C163.189 331.381 164.255 332.863 164.255 333.059C164.255 333.256 161.617 336.048 158.392 339.265L152.53 345.113L150.617 343.249C144.752 337.535 138.265 324.576 135.802 313.655C134.645 308.521 134.396 296.325 135.328 290.441Z\\\" class=\\\"M\\\"/><path d=\\\"M225.148 276.717L229.571 272.316C232.003 269.896 234.239 267.911 234.539 267.904C235.691 267.879 240.665 274.896 243.19 280.108C251.27 296.788 248.484 317.995 236.436 331.524L234.763 333.402L230.269 328.95C227.797 326.502 225.775 324.318 225.775 324.098C225.775 323.878 226.481 322.818 227.344 321.741C231.806 316.176 234.683 307.848 234.694 300.464C234.704 293.697 231.084 283.604 226.911 278.762L225.148 276.717Z\\\" class=\\\"M\\\"/></g><defs><filter id=\\\"filter0_d_1838_20465\\\" x=\\\"317.912\\\" y=\\\"1.02063\\\" width=\\\"98.0062\\\" height=\\\"128.438\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset dy=\\\"4\\\"/><feGaussianBlur stdDeviation=\\\"11.5\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 1 0 0 0 0 0.741176 0 0 0 0 0.905882 0 0 0 1 0\\\"/><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_1838_20465\\\"/><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow_1838_20465\\\" result=\\\"shape\\\"/></filter><filter id=\\\"filter1_d_1838_20465\\\" x=\\\"317.912\\\" y=\\\"1.02051\\\" width=\\\"98.0062\\\" height=\\\"128.438\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset dy=\\\"4\\\"/><feGaussianBlur stdDeviation=\\\"11.5\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 1 0 0 0 0 0.741176 0 0 0 0 0.905882 0 0 0 1 0\\\"/><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_1838_20465\\\"/><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow_1838_20465\\\" result=\\\"shape\\\"/></filter><filter id=\\\"filter2_d_1838_20465\\\" x=\\\"291.741\\\" y=\\\"1.02051\\\" width=\\\"124.177\\\" height=\\\"149.477\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset dy=\\\"4\\\"/><feGaussianBlur stdDeviation=\\\"11.5\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 1 0 0 0 0 0.741176 0 0 0 0 0.905882 0 0 0 1 0\\\"/><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_1838_20465\\\"/><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow_1838_20465\\\" result=\\\"shape\\\"/></filter><filter id=\\\"filter3_d_1838_20465\\\" x=\\\"291.241\\\" y=\\\"0.520508\\\" width=\\\"125.177\\\" height=\\\"150.477\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset dy=\\\"4\\\"/><feGaussianBlur stdDeviation=\\\"11.5\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 1 0 0 0 0 0.741176 0 0 0 0 0.905882 0 0 0 1 0\\\"/><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_1838_20465\\\"/><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow_1838_20465\\\" result=\\\"shape\\\"/></filter><filter id=\\\"filter4_d_1838_20465\\\" x=\\\"115.062\\\" y=\\\"215.932\\\" width=\\\"170.686\\\" height=\\\"170.683\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset/><feGaussianBlur stdDeviation=\\\"4.06387\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 1 0 0 0 0 0.741176 0 0 0 0 0.905882 0 0 0 1 0\\\"/><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_1838_20465\\\"/><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow_1838_20465\\\" result=\\\"shape\\\"/></filter></defs></svg>'\\n        );\\n\\n    // slither-disable-next-line encode-packed-collision\\n    function constructSVG(SVGParams memory params) public pure returns (string memory) {\\n        return string(abi.encodePacked(BEGINNING, generateStyles(params), generatesDefs(params), END));\\n    }\\n\\n    function generatesDefs(SVGParams memory params) internal pure returns (string memory) {\\n        string memory textFields;\\n\\n        for (uint i = 0; i < params.inputs.length; i++) {\\n            textFields = string(abi.encodePacked(textFields, generateTextField(params.inputs[i])));\\n        }\\n\\n        return string(abi.encodePacked(\\\"<defs>\\\", params.title, textFields, \\\"</defs>\\\"));\\n    }\\n\\n    function generateStyles(SVGParams memory params) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<style type=\\\"text/css\\\" >.M{fill:',\\n                    params.color,\\n                    \\\"}.S{stroke:\\\",\\n                    params.color,\\n                    \\\"}</style>\\\"\\n                )\\n            );\\n    }\\n\\n    function generateTextField(Input memory input) internal pure returns (string memory) {\\n        string memory titleField = string(\\n            abi.encodePacked(\\n                '<g opacity=\\\"0.8\\\" id=\\\"',\\n                input.id,\\n                '\\\">',\\n                '<text transform=\\\"translate(',\\n                input.xTitle,\\n                \\\" \\\",\\n                input.yTitle,\\n                input.rotate ? ') rotate(-90)\\\" ' : ')\\\" ',\\n                ' fill=\\\"#F4F4F4\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier New\\\" font-size=\\\"16\\\" font-weight=\\\"bold\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"0\\\" y=\\\"16.2578\\\">',\\n                input.input,\\n                \\\"</tspan></text>\\\"\\n            )\\n        );\\n\\n        string memory infoField = string(\\n            abi.encodePacked(\\n                '<text transform=\\\"translate(',\\n                input.xInfo,\\n                \\\" \\\",\\n                input.yInfo,\\n                input.rotate ? ') rotate(-90)\\\" ' : ')\\\" ',\\n                'fill=\\\"',\\n                input.fillInfo,\\n                '\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier New\\\" font-size=\\\"16\\\" letter-spacing=\\\"0em\\\"',\\n                input.bold ? ' font-weight=\\\"bold\\\" ' : \\\"\\\",\\n                '><tspan x=\\\"0\\\" y=\\\"16.2578\\\">',\\n                input.info,\\n                \\\"</tspan></text>\\\",\\n                \\\"</g>\\\"\\n            )\\n        );\\n\\n        return string(abi.encodePacked(titleField, infoField));\\n    }\\n}\\n\",\"keccak256\":\"0x73740906c9d4813d4fff842540ce94109dff6eeb79bb7f51a882191d9dc8f80f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}