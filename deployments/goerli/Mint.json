{
  "address": "0x47B2a82674B2df0FeBf2458F103FB7Bd55264796",
  "abi": [],
  "transactionHash": "0x70033e20d88ec527ef4d53d411819af4d7b62031786ce184768c4527e9d54a41",
  "receipt": {
    "to": null,
    "from": "0x9D5a2ddBb543E62e026b182C8929d099781547c3",
    "contractAddress": "0x47B2a82674B2df0FeBf2458F103FB7Bd55264796",
    "transactionIndex": 1,
    "gasUsed": "2321897",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x61f391ee2fbbdc87c9b127e1c2c04a39bd10cee682f5c0068f9e910448308fab",
    "transactionHash": "0x70033e20d88ec527ef4d53d411819af4d7b62031786ce184768c4527e9d54a41",
    "logs": [],
    "blockNumber": 53434569,
    "cumulativeGasUsed": "2321897",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4a664dd9128b3f5f1e08dc16d1aae062",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/libraries/Mint.sol\":\"Mint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IPair } from \\\"./IPair.sol\\\";\\n\\n/// @title Credit Factory Interface\\ninterface IFactory {\\n    /* ===== EVENT ===== */\\n\\n    /// @dev Emits when a new Credit Pair contract is created.\\n    /// @param asset The address of the ERC20 being lent and borrowed.\\n    /// @param collateral The address of the ERC20 used as collateral.\\n    /// @param pair The address of the Credit Pair contract created.\\n    event CreatePair(IERC20 indexed asset, IERC20 indexed collateral, IPair pair);\\n\\n    /// @dev Emits when a new staking fee collector.\\n    /// @param stakingFeeCollector The address of the stakingFeeCollector.\\n    event SetStakingFeeCollector(address indexed stakingFeeCollector);\\n\\n    /// @dev Emits when a new protocol fee collector.\\n    /// @param protocolFeeCollector The address of the protocolFeeCollector.\\n    event SetProtocolFeeCollector(address indexed protocolFeeCollector);\\n\\n    /* ===== VIEW ===== */\\n\\n    /// @dev Return the lpFee per second earned by liquidity providers.\\n    /// @dev Must be downcasted to uint16.\\n    /// @return The lpFee following UQ0.40 format.\\n    function lpFee() external view returns (uint256);\\n\\n    /// @dev Return the protocol fee per second earned by the owner.\\n    /// @dev Must be downcasted to uint16.\\n    /// @return The protocol fee per second following UQ0.40 format.\\n    function protocolFee() external view returns (uint256);\\n\\n    /// @dev Return the staking fee per second earned by the owner.\\n    /// @dev Must be downcasted to uint16.\\n    /// @return The staking fee per second following UQ0.40 format.\\n    function stakingFee() external view returns (uint256);\\n\\n    /// @dev Returns the address of a deployed pair.\\n    /// @param asset The address of the ERC20 being lent and borrowed.\\n    /// @param collateral The address of the ERC20 used as collateral.\\n    /// @return pair The address of the Credit Pair contract.\\n    function getPair(IERC20 asset, IERC20 collateral) external view returns (IPair pair);\\n\\n    /// @dev Return the beacon address for Pair contract.\\n    /// @return The beacon address for Pair contract.\\n    function beacon() external view returns (address);\\n\\n    /// @return Return the staking fee collector address.\\n    function stakingFeeCollector() external view returns (address);\\n\\n    /// @return Return the protocol fee collector address.\\n    function protocolFeeCollector() external view returns (address);\\n\\n    /* ===== UPDATE ===== */\\n\\n    /// @dev Creates a Credit Pool based on ERC20 pair parameters.\\n    /// @dev Cannot create a Credit Pool with the same pair parameters.\\n    /// @param asset The address of the ERC20 being lent and borrowed.\\n    /// @param collateral The address of the ERC20 as the collateral.\\n    /// @return pair The address of the Credit Pair contract.\\n    function createPair(IERC20 asset, IERC20 collateral) external returns (IPair pair);\\n\\n    /// @dev Set the staking fee collector of the factory.\\n    /// @param _stakingFeeCollector the chosen staking fee collector.\\n    function setStakingFeeCollector(address _stakingFeeCollector) external;\\n\\n    /// @dev Set the protocol fee collector of the factory.\\n    /// @param _protocolFeeCollector the chosen protocol fee collector.\\n    function setProtocolFeeCollector(address _protocolFeeCollector) external;\\n}\\n\",\"keccak256\":\"0x72f2f2fa90980f781ee1ae889206aba2bac8c917247e54253e597d6b4e13ee63\",\"license\":\"BUSL-1.1\"},\"contracts/core/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IFactory } from \\\"./IFactory.sol\\\";\\n\\n/// @title The interface of Pair contract.\\ninterface IPair {\\n    /* ===== STRUCT ===== */\\n\\n    struct Tokens {\\n        uint128 asset;\\n        uint128 collateral;\\n    }\\n\\n    struct Claims {\\n        uint112 loanPrincipal;\\n        uint112 loanInterest;\\n        uint112 coveragePrincipal;\\n        uint112 coverageInterest;\\n    }\\n\\n    struct Due {\\n        uint112 debt;\\n        uint112 collateral;\\n        uint32 startBlock;\\n    }\\n\\n    struct State {\\n        Tokens reserves;\\n        uint256 lpFeeStored;\\n        uint256 totalLiquidity;\\n        Claims totalClaims;\\n        uint120 totalDebtCreated;\\n        uint112 x;\\n        uint112 y;\\n        uint112 z;\\n    }\\n\\n    struct Pool {\\n        State state;\\n        mapping(address => uint256) liquidities;\\n        mapping(address => Claims) claims;\\n        mapping(address => Due[]) dues;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param liquidityTo The address of the receiver of liquidity balance.\\n    /// @param dueTo The addres of the receiver of locked debt balance.\\n    /// @param xIncrease The increase in the X state.\\n    /// @param yIncrease The increase in the Y state.\\n    /// @param zIncrease The increase in the Z state.\\n    /// @param data The data for callback.\\n    struct MintParam {\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 xIncrease;\\n        uint112 yIncrease;\\n        uint112 zIncrease;\\n        bytes data;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param collateralTo The addres of the receiver of collateral ERC20.\\n    /// @param liquidityIn The amount of liquidity balance burnt by the msg.sender.\\n    struct BurnParam {\\n        uint256 maturity;\\n        address assetTo;\\n        address collateralTo;\\n        uint256 liquidityIn;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param loanTo The address of the receiver of loan balance.\\n    /// @param coverageTo The addres of the receiver of coverage balance.\\n    /// @param xIncrease The increase in x state and the amount of asset ERC20 sent.\\n    /// @param yDecrease The decrease in y state.\\n    /// @param zDecrease The decrease in z state.\\n    /// @param data The data for callback.\\n    struct LendParam {\\n        uint256 maturity;\\n        address loanTo;\\n        address coverageTo;\\n        uint112 xIncrease;\\n        uint112 yDecrease;\\n        uint112 zDecrease;\\n        bytes data;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param collateralTo The addres of the receiver of collateral ERC20.\\n    /// @param claimsIn The amount of loan balance and coverage balance burnt by the msg.sender.\\n    struct WithdrawParam {\\n        uint256 maturity;\\n        address assetTo;\\n        address collateralTo;\\n        Claims claimsIn;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param dueTo The address of the receiver of locked debt.\\n    /// @param xDecrease The decrease in x state and amount of asset ERC20 received by assetTo.\\n    /// @param yIncrease The increase in y state.\\n    /// @param zIncrease The increase in z state.\\n    /// @param data The data for callback.\\n    struct BorrowParam {\\n        uint256 maturity;\\n        address assetTo;\\n        address dueTo;\\n        uint112 xDecrease;\\n        uint112 yIncrease;\\n        uint112 zIncrease;\\n        bytes data;\\n    }\\n\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param to The address of the receiver of collateral ERC20.\\n    /// @param owner The addres of the owner of locked debt.\\n    /// @param id The id of locked debt.\\n    /// @param assetsIn The amount of asset ERC20 paid per locked debt.\\n    /// @param collateralsOut The amount of collateral ERC20 withdrawn per collaterlaized debt.\\n    /// @param data The data for callback.\\n    struct PayParam {\\n        uint256 maturity;\\n        address to;\\n        address owner;\\n        uint256[] ids;\\n        uint112[] assetsIn;\\n        uint112[] collateralsOut;\\n        bytes data;\\n    }\\n\\n    /* ===== EVENT ===== */\\n\\n    /// @dev Emits when the state gets updated.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param x The new x state of the pool.\\n    /// @param y The new y state of the pool.\\n    /// @param z The new z state of the pool.\\n    event Sync(uint256 indexed maturity, uint112 x, uint112 y, uint112 z);\\n\\n    /// @dev Emits when mint function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param liquidityTo The address of the receiver of liquidity balance.\\n    /// @param dueTo The address of the receiver of locked debt balance.\\n    /// @param assetIn The increase in the X state.\\n    /// @param liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @param id The array index of the locked debt received by dueTo.\\n    /// @param dueOut The locked debt received by dueTo.\\n    /// @param feeIn The amount of fee asset ERC20 deposited.\\n    event Mint(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed liquidityTo,\\n        address indexed dueTo,\\n        uint256 assetIn,\\n        uint256 liquidityOut,\\n        uint256 id,\\n        Due dueOut,\\n        uint256 feeIn\\n    );\\n\\n    /// @dev Emits when burn function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param collateralTo The addres of the receiver of collateral ERC20.\\n    /// @param liquidityIn The amount of liquidity balance burnt by the sender.\\n    /// @param assetOut The amount of asset ERC20 received.\\n    /// @param collateralOut The amount of collateral ERC20 received.\\n    /// @param feeOut The amount of fee asset ERC20 received.\\n    event Burn(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed assetTo,\\n        address indexed collateralTo,\\n        uint256 liquidityIn,\\n        uint256 assetOut,\\n        uint128 collateralOut,\\n        uint256 feeOut\\n    );\\n\\n    /// @dev Emits when lend function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param loanTo The address of the receiver of loan balance.\\n    /// @param coverageTo The addres of the receiver of coverage balance.\\n    /// @param assetIn The increase in X state.\\n    /// @param claimsOut The amount of loan balance and coverage balance received.\\n    /// @param feeIn The amount of fee paid by lender.\\n    /// @param protocolFeeIn The amount of protocol fee paid by lender.\\n    /// @param stakingFeeIn The amount of staking fee paid by lender.\\n    event Lend(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed loanTo,\\n        address indexed coverageTo,\\n        uint256 assetIn,\\n        Claims claimsOut,\\n        uint256 feeIn,\\n        uint256 protocolFeeIn,\\n        uint256 stakingFeeIn\\n    );\\n\\n    /// @dev Emits when withdraw function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param collateralTo The address of the receiver of collateral ERC20.\\n    /// @param claimsIn The amount of loan balance and coverage balance burnt by the sender.\\n    /// @param tokensOut The amount of asset ERC20 and collateral ERC20 received.\\n    event Withdraw(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed assetTo,\\n        address indexed collateralTo,\\n        Claims claimsIn,\\n        Tokens tokensOut\\n    );\\n\\n    /// @dev Emits when borrow function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param assetTo The address of the receiver of asset ERC20.\\n    /// @param dueTo The address of the receiver of locked debt.\\n    /// @param assetOut The amount of asset ERC20 received by assetTo.\\n    /// @param id The array index of the locked debt received by dueTo.\\n    /// @param dueOut The locked debt received by dueTo.\\n    /// @param feeIn The amount of fee paid by lender.\\n    /// @param protocolFeeIn The amount of protocol fee paid by lender.\\n    /// @param stakingFeeIn The amount of staking fee paid by lender.\\n    event Borrow(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed assetTo,\\n        address indexed dueTo,\\n        uint256 assetOut,\\n        uint256 id,\\n        Due dueOut,\\n        uint256 feeIn,\\n        uint256 protocolFeeIn,\\n        uint256 stakingFeeIn\\n    );\\n\\n    /// @dev Emits when pay function is called.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param sender The address of the caller.\\n    /// @param to The address of the receiver of collateral ERC20.\\n    /// @param owner The address of the owner of locked debt.\\n    /// @param duesFullyPaid The ids fully repaid.\\n    /// @param assetIn The total amount of asset ERC20 paid.\\n    /// @param collateralOut The total amount of collateral ERC20 received.\\n    event Pay(\\n        uint256 maturity,\\n        address indexed sender,\\n        address indexed to,\\n        address indexed owner,\\n        uint256[] duesFullyPaid,\\n        uint256 assetIn,\\n        uint256 collateralOut\\n    );\\n\\n    /// @dev Emits when collectProtocolFee function is called\\n    /// @param sender The address of the caller.\\n    /// @param to The address of the receiver of asset ERC20.\\n    /// @param protocolFeeOut The amount of protocol fee asset ERC20 received.\\n    event CollectProtocolFee(address indexed sender, address indexed to, uint256 protocolFeeOut);\\n\\n    /// @dev Emits when collectStakingFee function is called\\n    /// @param sender The address of the caller.\\n    /// @param to The address of the receiver of asset ERC20.\\n    /// @param stakingFeeOut The amount of protocol fee asset ERC20 received.\\n    event CollectStakingFee(address indexed sender, address indexed to, uint256 stakingFeeOut);\\n\\n    /* ===== VIEW ===== */\\n\\n    /// @dev Return the address of the factory contract that deployed this contract.\\n    /// @return The address of the factory contract.\\n    function factory() external view returns (IFactory);\\n\\n    /// @dev Return the address of the ERC20 being lent and borrowed.\\n    /// @return The address of the asset ERC20.\\n    function asset() external view returns (IERC20);\\n\\n    /// @dev Return the address of the ERC20 as collateral.\\n    /// @return The address of the collateral ERC20.\\n    function collateral() external view returns (IERC20);\\n\\n    //// @dev Return the fee per second earned by liquidity providers.\\n    /// @dev Must be downcasted to uint16.\\n    //// @return The transaction fee following the UQ0.40 format.\\n    function lpFee() external view returns (uint256);\\n\\n    /// @dev Return the protocol fee per second earned by the owner.\\n    /// @dev Must be downcasted to uint16.\\n    /// @return The protocol fee per second following the UQ0.40 format.\\n    function protocolFee() external view returns (uint256);\\n\\n    /// @dev Return the staking fee per second earned by the owner.\\n    /// @dev Must be downcasted to uint16.\\n    /// @return The staking fee per second following the UQ0.40 format.\\n    function stakingFee() external view returns (uint256);\\n\\n    /// @dev Return the fee stored of the Pool given maturity.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return The fee in asset ERC20 stored in the Pool.\\n    function lpFeeStored(uint256 maturity) external view returns (uint256);\\n\\n    /// @dev Return the protocol fee stored.\\n    /// @return The protocol fee in asset ERC20 stored.\\n    function protocolFeeStored() external view returns (uint256);\\n\\n    /// @dev Return the staking fee stored.\\n    /// @return The staking fee in asset ERC20 stored.\\n    function stakingFeeStored() external view returns (uint256);\\n\\n    /// @dev Returns the Constant Product state of a Pool.\\n    /// @dev The Y state follows the UQ80.32 format.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return x The x state.\\n    /// @return y The y state.\\n    /// @return z The z state.\\n    function constantProduct(uint256 maturity) external view returns (uint112 x, uint112 y, uint112 z);\\n\\n    /// @dev Returns the asset ERC20 and collateral ERC20 balances of a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return The asset ERC20 and collateral ERC20 locked.\\n    function totalReserves(uint256 maturity) external view returns (Tokens memory);\\n\\n    /// @dev Returns the total liquidity supply of a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return The total liquidity supply.\\n    function totalLiquidity(uint256 maturity) external view returns (uint256);\\n\\n    /// @dev Returns the liquidity balance of a user in a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param owner The address of the user.\\n    /// @return The liquidity balance.\\n    function liquidityOf(uint256 maturity, address owner) external view returns (uint256);\\n\\n    /// @dev Returns the total claims of a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return The total claims.\\n    function totalClaims(uint256 maturity) external view returns (Claims memory);\\n\\n    /// @dev Returms the claims of a user in a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param owner The address of the user.\\n    /// @return The claims balance.\\n    function claimsOf(uint256 maturity, address owner) external view returns (Claims memory);\\n\\n    /// @dev Returns the total debt created.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @return The total asset ERC20 debt created.\\n    function totalDebtCreated(uint256 maturity) external view returns (uint120);\\n\\n    /// @dev Returns the number of dues owned by owner.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param owner The address of the user.\\n    function totalDuesOf(uint256 maturity, address owner) external view returns (uint256);\\n\\n    /// @dev Returns a locked debt of a user in a Pool.\\n    /// @param maturity The unix timestamp maturity of the Pool.\\n    /// @param owner The address of the user.\\n    /// @param id The index of the locked debt\\n    /// @return The locked debt balance.\\n    function dueOf(uint256 maturity, address owner, uint256 id) external view returns (Due memory);\\n\\n    /* ===== UPDATE ===== */\\n\\n    /// @dev Add liquidity into a Pool by a liquidity provider.\\n    /// @dev Liquidity providers can be thought as making both lending and borrowing positions.\\n    /// @dev Must be called by a contract implementing the ICreditMintCallback interface.\\n    /// @param param The mint parameter found in the MintParam struct.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function mint(\\n        MintParam calldata param\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, Due memory dueOut);\\n\\n    /// @dev Remove liquidity from a Pool by a liquidity provider.\\n    /// @dev Can only be called after the maturity of the Pool.\\n    /// @param param The burn parameter found in the BurnParam struct.\\n    /// @return assetOut The amount of asset ERC20 received.\\n    /// @return collateralOut The amount of collateral ERC20 received.\\n    function burn(BurnParam calldata param) external returns (uint256 assetOut, uint128 collateralOut);\\n\\n    /// @dev Lend asset ERC20 into the Pool.\\n    /// @dev Must be called by a contract implementing the ICreditLendCallback interface.\\n    /// @param param The lend parameter found in the LendParam struct.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return claimsOut The amount of loan balance and coverage balance received.\\n    function lend(LendParam calldata param) external returns (uint256 assetIn, Claims memory claimsOut);\\n\\n    /// @dev Withdraw asset ERC20 and/or collateral ERC20 for lenders.\\n    /// @dev Can only be called after the maturity of the Pool.\\n    /// @param param The withdraw parameter found in the WithdrawParam struct.\\n    /// @return tokensOut The amount of asset ERC20 and collateral ERC20 received.\\n    function withdraw(WithdrawParam calldata param) external returns (Tokens memory tokensOut);\\n\\n    /// @dev Borrow asset ERC20 from the Pool.\\n    /// @dev Must be called by a contract implementing the ICreditBorrowCallback interface.\\n    /// @param param The borrow parameter found in the BorrowParam struct.\\n    /// @return assetOut The amount of asset ERC20 received.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function borrow(BorrowParam calldata param) external returns (uint256 assetOut, uint256 id, Due memory dueOut);\\n\\n    /// @dev Pay asset ERC20 into the Pool to repay debt for borrowers.\\n    /// @dev If there are asset paid, must be called by a contract implementing the ICreditPayCallback interface.\\n    /// @param param The pay parameter found in the PayParam struct.\\n    /// @return assetIn The total amount of asset ERC20 paid.\\n    /// @return collateralOut The total amount of collateral ERC20 received.\\n    /// @return duesFullyPaid Dues fully reimbursed during the call\\n    function pay(\\n        PayParam calldata param\\n    ) external returns (uint128 assetIn, uint128 collateralOut, uint256[] memory duesFullyPaid);\\n\\n    /// @dev Collect the stored protocol fee.\\n    /// @dev Can only be called by the owner.\\n    /// @param to The receiver of the protocol fee.\\n    /// @return protocolFeeOut The total amount of protocol fee asset ERC20 received.\\n    function collectProtocolFee(address to) external returns (uint256 protocolFeeOut);\\n\\n    /// @dev Collect the stored staking fee.\\n    /// @dev Can only be called by the owner.\\n    /// @param to The receiver of the staking fee.\\n    /// @return stakingFeeOut The total amount of staking fee asset ERC20 received.\\n    function collectStakingFee(address to) external returns (uint256 stakingFeeOut);\\n}\\n\",\"keccak256\":\"0xa9393765d348430f5681fe1af06f4957e778f67c2f82969e2a5f6408fbb99a3b\",\"license\":\"BUSL-1.1\"},\"contracts/core/interfaces/callback/ICreditBorrowCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n/// @title Callback for ICreditPair#borrow\\n/// @notice Any contract that calls ICreditPair#borrow must implement this interface\\ninterface ICreditBorrowCallback {\\n    /// @notice Called to `msg.sender` after initiating a borrow from ICreditPair#borrow.\\n    /// @dev In the implementation you must pay the collateral token owed for the borrow transaction.\\n    /// The caller of this method must be checked to be a CreditPair deployed by the canonical CreditFactory.\\n    /// @param collateralIn The amount of asset tokens owed due to the pool for the borrow transaction\\n    /// @param data Any data passed through by the caller via the ICreditPair#borrow call\\n    function creditBorrowCallback(uint112 collateralIn, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x4ce3fdf628ac6490a43b6322a12d294f5840ecd21a5134678d7ce370a20785c9\",\"license\":\"BUSL-1.1\"},\"contracts/core/interfaces/callback/ICreditLendCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n/// @title Callback for ICreditPair#lend\\n/// @notice Any contract that calls ICreditPair#lend must implement this interface\\ninterface ICreditLendCallback {\\n    /// @notice Called to `msg.sender` after initiating a lend from ICreditPair#lend.\\n    /// @dev In the implementation you must pay the asset token owed for the lend transaction.\\n    /// The caller of this method must be checked to be a CreditPair deployed by the canonical CreditFactory.\\n    /// @param assetIn The amount of asset tokens owed due to the pool for the lend transaction\\n    /// @param data Any data passed through by the caller via the ICreditPair#lend call\\n    function creditLendCallback(uint256 assetIn, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe3e601ee5c9b5ffb273cbed13804860dcf5addd06f402986dce2e7ceac14a959\",\"license\":\"BUSL-1.1\"},\"contracts/core/interfaces/callback/ICreditMintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n/// @title Callback for ICreditPair#mint\\n/// @notice Any contract that calls ICreditPair#mint must implement this interface\\ninterface ICreditMintCallback {\\n    /// @notice Called to `msg.sender` after initiating a mint from ICreditPair#mint.\\n    /// @dev In the implementation you must pay the asset token and collateral token owed for the mint transaction.\\n    /// The caller of this method must be checked to be a CreditPair deployed by the canonical CreditFactory.\\n    /// @param assetIn The amount of asset tokens owed due to the pool for the mint transaction.\\n    /// @param collateralIn The amount of collateral tokens owed due to the pool for the min transaction.\\n    /// @param data Any data passed through by the caller via the ICreditPair#mint call\\n    function creditMintCallback(uint256 assetIn, uint112 collateralIn, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x6c86e98aef7ba85f83c47bc042a0b5927fda662ac58ff09020b272a0e7c5a385\",\"license\":\"BUSL-1.1\"},\"contracts/core/interfaces/callback/ICreditPayCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n/// @title Callback for ICreditPair#pay\\n/// @notice Any contract that calls ICreditPair#pay must implement this interface\\ninterface ICreditPayCallback {\\n    /// @notice Called to `msg.sender` after initiating a pay from ICreditPair#pay.\\n    /// @dev In the implementation you must pay the asset token owed for the pay transaction.\\n    /// The caller of this method must be checked to be a CreditPair deployed by the canonical CreditFactory.\\n    /// @param assetIn The amount of asset tokens owed due to the pool for the pay transaction\\n    /// @param data Any data passed through by the caller via the ICreditPair#pay call\\n    function creditPayCallback(uint128 assetIn, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xba1056fb791edfa0ac6636d926ed2815c8c9c56ce572db7dd60e34d4a9560ffa\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity =0.8.20;\\n\\nlibrary Math {\\n    function divUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x / y;\\n        if (x % y != 0) z++;\\n    }\\n\\n    function shiftRightUp(uint256 x, uint8 y) internal pure returns (uint256 z) {\\n        z = x >> y;\\n        if (x != z << y) z++;\\n    }\\n}\\n\",\"keccak256\":\"0x3a12be645483f1eaad3e0de3fc6f453a3baabc3f208672a71e1423e96bbdbeca\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity =0.8.20;\\n\\nlibrary SafeCast {\\n    function toUint112(uint256 x) internal pure returns (uint112 y) {\\n        require(x <= type(uint112).max);\\n        y = uint112(x);\\n    }\\n\\n    function toUint128(uint256 x) internal pure returns (uint128 y) {\\n        require(x <= type(uint128).max);\\n        y = uint128(x);\\n    }\\n\\n    function truncateUint112(uint256 x) internal pure returns (uint112 y) {\\n        if (x > type(uint112).max) return y = type(uint112).max;\\n        y = uint112(x);\\n    }\\n}\\n\",\"keccak256\":\"0xbe74ba2a9d29d1b6fbf3737a6a11abf838da93401f604b06bbd7fa992adf0981\",\"license\":\"GPL-2.0-or-later\"},\"contracts/periphery/interfaces/IBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IFactory } from \\\"../../core/interfaces/IFactory.sol\\\";\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\nimport { IRouter } from \\\"../interfaces/IRouter.sol\\\";\\n\\n/// @title Borrow interface\\ninterface IBorrow {\\n    struct BorrowGivenPercent {\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address assetTo;\\n        address dueTo;\\n        uint112 assetOut;\\n        uint40 percent;\\n        uint112 maxDebt;\\n        uint112 maxCollateral;\\n        uint256 deadline;\\n    }\\n\\n    struct BorrowGivenPercentETHAsset {\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address payable assetTo;\\n        address dueTo;\\n        uint112 assetOut;\\n        uint40 percent;\\n        uint112 maxDebt;\\n        uint112 maxCollateral;\\n        uint256 deadline;\\n    }\\n\\n    struct BorrowGivenPercentETHCollateral {\\n        IERC20 asset;\\n        uint256 maturity;\\n        address assetTo;\\n        address dueTo;\\n        uint112 assetOut;\\n        uint40 percent;\\n        uint112 maxDebt;\\n        uint256 deadline;\\n    }\\n\\n    struct _BorrowGivenPercent {\\n        IRouter router;\\n        IFactory factory;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address from;\\n        address assetTo;\\n        address dueTo;\\n        uint112 assetOut;\\n        uint40 percent;\\n        uint112 maxDebt;\\n        uint112 maxCollateral;\\n        uint256 deadline;\\n    }\\n\\n    struct _Borrow {\\n        IRouter router;\\n        IPair pair;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address from;\\n        address assetTo;\\n        address dueTo;\\n        uint112 xDecrease;\\n        uint112 yIncrease;\\n        uint112 zIncrease;\\n        uint256 deadline;\\n    }\\n}\\n\",\"keccak256\":\"0x7ba6285cf9a7f0e4b20361798937d9ee8fa663c041fe005b5c858500384c1d8e\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/interfaces/IBurn.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IFactory } from \\\"../../core/interfaces/IFactory.sol\\\";\\n\\n/// @title Burn interface\\ninterface IBurn {\\n    struct RemoveLiquidity {\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address assetTo;\\n        address collateralTo;\\n        uint256 creditPositionId;\\n    }\\n\\n    struct RemoveLiquidityETHAsset {\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address payable assetTo;\\n        address collateralTo;\\n        uint256 creditPositionId;\\n    }\\n\\n    struct RemoveLiquidityETHCollateral {\\n        IERC20 asset;\\n        uint256 maturity;\\n        address assetTo;\\n        address payable collateralTo;\\n        uint256 creditPositionId;\\n    }\\n\\n    struct _RemoveLiquidity {\\n        IFactory factory;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address assetTo;\\n        address collateralTo;\\n        uint256 creditPositionId;\\n    }\\n}\\n\",\"keccak256\":\"0x7cab4e6143fe6643e8414a2498f7c227e25f567e1b35a8e3f1ccfa9cf5cc6aa1\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/interfaces/IDeployPair.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDeployPair {\\n    struct DeployPair {\\n        IERC20 asset;\\n        IERC20 collateral;\\n    }\\n}\\n\",\"keccak256\":\"0x9419003cdb58970fb82d9120239bce88f0a89c1fb351cff1f1c5cfd08da2deb3\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/interfaces/ILend.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\nimport { IRouter } from \\\"../interfaces/IRouter.sol\\\";\\nimport { IFactory } from \\\"../../core/interfaces/IFactory.sol\\\";\\n\\n/// @title Lend interface\\ninterface ILend {\\n    struct LendGivenPercent {\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address to;\\n        uint112 assetIn;\\n        uint40 percent;\\n        uint128 minLoan;\\n        uint128 minCoverage;\\n        uint256 deadline;\\n    }\\n\\n    struct LendGivenPercentETHAsset {\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address to;\\n        uint40 percent;\\n        uint128 minLoan;\\n        uint128 minCoverage;\\n        uint256 deadline;\\n    }\\n\\n    struct LendGivenPercentETHCollateral {\\n        IERC20 asset;\\n        uint256 maturity;\\n        address to;\\n        uint112 assetIn;\\n        uint40 percent;\\n        uint128 minLoan;\\n        uint128 minCoverage;\\n        uint256 deadline;\\n    }\\n\\n    struct _LendGivenPercent {\\n        IRouter router;\\n        IFactory factory;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address from;\\n        address to;\\n        uint112 assetIn;\\n        uint40 percent;\\n        uint128 minLoan;\\n        uint128 minCoverage;\\n        uint256 deadline;\\n    }\\n\\n    struct _Lend {\\n        IRouter router;\\n        IPair pair;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address from;\\n        address to;\\n        uint112 xIncrease;\\n        uint112 yDecrease;\\n        uint112 zDecrease;\\n        uint256 deadline;\\n    }\\n}\\n\",\"keccak256\":\"0x886b74fc66d8dd3c9c52d0e5af18001b2adc620ce079e590f81742df34751b24\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/interfaces/IMint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IFactory } from \\\"../../core/interfaces/IFactory.sol\\\";\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\nimport { IRouter } from \\\"./IRouter.sol\\\";\\n\\n/// @title Mint interface\\ninterface IMint {\\n    struct NewLiquidity {\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 assetIn;\\n        uint112 debtIn;\\n        uint112 collateralIn;\\n        uint256 deadline;\\n    }\\n\\n    struct NewLiquidityETHAsset {\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 debtIn;\\n        uint112 collateralIn;\\n        uint256 deadline;\\n    }\\n\\n    struct NewLiquidityETHCollateral {\\n        IERC20 asset;\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 assetIn;\\n        uint112 debtIn;\\n        uint256 deadline;\\n    }\\n\\n    struct _NewLiquidity {\\n        IRouter router;\\n        IFactory factory;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address assetFrom;\\n        address collateralFrom;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 assetIn;\\n        uint112 debtIn;\\n        uint112 collateralIn;\\n        uint256 deadline;\\n    }\\n\\n    struct LiquidityGivenAsset {\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 assetIn;\\n        uint256 minLiquidity;\\n        uint112 maxDebt;\\n        uint112 maxCollateral;\\n        uint256 deadline;\\n    }\\n\\n    struct LiquidityGivenAssetETHAsset {\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint256 minLiquidity;\\n        uint112 maxDebt;\\n        uint112 maxCollateral;\\n        uint256 deadline;\\n    }\\n\\n    struct LiquidityGivenAssetETHCollateral {\\n        IERC20 asset;\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 assetIn;\\n        uint256 minLiquidity;\\n        uint112 maxDebt;\\n        uint256 deadline;\\n    }\\n\\n    struct _LiquidityGivenAsset {\\n        IRouter router;\\n        IFactory factory;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address assetFrom;\\n        address collateralFrom;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 assetIn;\\n        uint256 minLiquidity;\\n        uint112 maxDebt;\\n        uint112 maxCollateral;\\n        uint256 deadline;\\n    }\\n\\n    struct LiquidityGivenCollateral {\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 collateralIn;\\n        uint256 minLiquidity;\\n        uint112 maxAsset;\\n        uint112 maxDebt;\\n        uint256 deadline;\\n    }\\n\\n    struct LiquidityGivenCollateralETHAsset {\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 collateralIn;\\n        uint256 minLiquidity;\\n        uint112 maxDebt;\\n        uint256 deadline;\\n    }\\n\\n    struct LiquidityGivenCollateralETHCollateral {\\n        IERC20 asset;\\n        uint256 maturity;\\n        address liquidityTo;\\n        address dueTo;\\n        uint256 minLiquidity;\\n        uint112 maxAsset;\\n        uint112 maxDebt;\\n        uint256 deadline;\\n    }\\n\\n    struct _LiquidityGivenCollateral {\\n        IRouter router;\\n        IFactory factory;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address assetFrom;\\n        address collateralFrom;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 collateralIn;\\n        uint256 minLiquidity;\\n        uint112 maxAsset;\\n        uint112 maxDebt;\\n        uint256 deadline;\\n    }\\n\\n    struct _Mint {\\n        IRouter router;\\n        IPair pair;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address assetFrom;\\n        address collateralFrom;\\n        address liquidityTo;\\n        address dueTo;\\n        uint112 xIncrease;\\n        uint112 yIncrease;\\n        uint112 zIncrease;\\n        uint256 deadline;\\n    }\\n}\\n\",\"keccak256\":\"0x5e950de3a0a93178256f5317c3d6b0a3b51169e35f3e047e9caca78b9961654b\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/interfaces/IPay.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IFactory } from \\\"../../core/interfaces/IFactory.sol\\\";\\n\\n/// @title Pay interface\\ninterface IPay {\\n    struct Repay {\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address collateralTo;\\n        uint256[] creditPositionIds;\\n        uint112[] maxAssetsIn;\\n        uint256 deadline;\\n    }\\n\\n    struct RepayETHAsset {\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address collateralTo;\\n        uint256[] creditPositionIds;\\n        uint112[] maxAssetsIn;\\n        uint256 deadline;\\n    }\\n\\n    struct RepayETHCollateral {\\n        IERC20 asset;\\n        uint256 maturity;\\n        address payable collateralTo;\\n        uint256[] creditPositionIds;\\n        uint112[] maxAssetsIn;\\n        uint256 deadline;\\n    }\\n\\n    struct _Repay {\\n        IFactory factory;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address from;\\n        address collateralTo;\\n        uint256[] creditPositionIds;\\n        uint112[] maxAssetsIn;\\n        uint256 deadline;\\n    }\\n}\\n\",\"keccak256\":\"0x0b36cded2392550c9707c72aa0a8f361cda77f61240f40a8485bf3f86562b27d\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ICreditBorrowCallback } from \\\"../../core/interfaces/callback/ICreditBorrowCallback.sol\\\";\\nimport { ICreditMintCallback } from \\\"../../core/interfaces/callback/ICreditMintCallback.sol\\\";\\nimport { ICreditLendCallback } from \\\"../../core/interfaces/callback/ICreditLendCallback.sol\\\";\\nimport { ICreditPayCallback } from \\\"../../core/interfaces/callback/ICreditPayCallback.sol\\\";\\nimport { IFactory } from \\\"../../core/interfaces/IFactory.sol\\\";\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\nimport { IBorrow } from \\\"./IBorrow.sol\\\";\\nimport { IBurn } from \\\"./IBurn.sol\\\";\\nimport { IClaim } from \\\"../../tokens/interfaces/IClaim.sol\\\";\\nimport { ICreditPositionManager } from \\\"../../tokens/interfaces/ICreditPositionManager.sol\\\";\\nimport { IDeployPair } from \\\"./IDeployPair.sol\\\";\\nimport { IDue } from \\\"../../tokens/interfaces/IDue.sol\\\";\\nimport { ILend } from \\\"./ILend.sol\\\";\\nimport { ILiquidity } from \\\"../../tokens/interfaces/ILiquidity.sol\\\";\\nimport { IMint } from \\\"./IMint.sol\\\";\\nimport { IPay } from \\\"./IPay.sol\\\";\\nimport { IWETH } from \\\"./IWETH.sol\\\";\\nimport { IWithdraw } from \\\"./IWithdraw.sol\\\";\\n\\n/// @title Credit Router Interface\\ninterface IRouter is ICreditMintCallback, ICreditLendCallback, ICreditBorrowCallback, ICreditPayCallback, IDeployPair {\\n    struct Receipt {\\n        ILiquidity liquidity;\\n        IClaim loanInterest;\\n        IClaim loanPrincipal;\\n        IClaim coverageInterest;\\n        IClaim coveragePrincipal;\\n        IDue lockedDebt;\\n    }\\n\\n    /* ===== VIEW ===== */\\n\\n    /// @dev Return the address of the factory contract used by this contract.\\n    /// @return The address of the factory contract.\\n    function factory() external returns (IFactory);\\n\\n    /// @dev Return the address of the Wrapped ETH contract.\\n    /// @return The address of WETH.\\n    function weth() external returns (IWETH);\\n\\n    /// @dev Return the address of the CreditPosition contract.\\n    /// @return The address of CreditPosition.\\n    function creditPositionManager() external returns (ICreditPositionManager);\\n\\n    /// @dev Create pair contracts.\\n    /// @param params The parameters for this function found in IDeployPair interface.\\n    function deployPair(IDeployPair.DeployPair calldata params) external;\\n\\n    /// @dev Calls the mint function and creates a new pool.\\n    /// @dev If the pair does not exist, creates a new pair first.\\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IMint interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function newLiquidity(\\n        IMint.NewLiquidity calldata params\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the mint function and creates a new pool.\\n    /// @dev If the pair does not exist, creates a new pair first.\\n    /// @dev The asset deposited is ETH which will be wrapped as WETH.\\n    /// @dev Msg.value is the assetIn amount.\\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IMint interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function newLiquidityETHAsset(\\n        IMint.NewLiquidityETHAsset calldata params\\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the mint function and creates a new pool.\\n    /// @dev If the pair does not exist, creates a new pair first.\\n    /// @dev The collateral locked is ETH which will be wrapped as WETH.\\n    /// @dev Msg.value is the collateralIn amount.\\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IMint interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function newLiquidityETHCollateral(\\n        IMint.NewLiquidityETHCollateral calldata params\\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IMint interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function liquidityGivenAsset(\\n        IMint.LiquidityGivenAsset calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\\n    /// @dev The asset deposited is ETH which will be wrapped as WETH.\\n    /// @dev Msg.value is the assetIn amount.\\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IMint interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function liquidityGivenAssetETHAsset(\\n        IMint.LiquidityGivenAssetETHAsset calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\\n    /// @dev The collateral ERC20 is the WETH contract.\\n    /// @dev The collateral locked is ETH which will be wrapped as WETH.\\n    /// @dev Msg.value is the maxCollateral amount. Any excess ETH will be returned to Msg.sender.\\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IMint interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function liquidityGivenAssetETHCollateral(\\n        IMint.LiquidityGivenAssetETHCollateral calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IMint interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function liquidityGivenCollateral(\\n        IMint.LiquidityGivenCollateral calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\\n    /// @dev The asset deposited is ETH which will be wrapped as WETH.\\n    /// @dev Msg.value is the assetIn amount.\\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IMint interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function liquidityGivenCollateralETHAsset(\\n        IMint.LiquidityGivenCollateralETHAsset calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\\n    /// @dev The collateral ERC20 is the WETH contract.\\n    /// @dev The collateral locked is ETH which will be wrapped as WETH.\\n    /// @dev Msg.value is the maxCollateral amount. Any excess ETH will be returned to Msg.sender.\\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IMint interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\\n    /// @return id The array index of the locked debt received by dueTo.\\n    /// @return dueOut The locked debt received by dueTo.\\n    function liquidityGivenCollateralETHCollateral(\\n        IMint.LiquidityGivenCollateralETHCollateral calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the burn funtion and withdraw liquiidty from a pool.\\n    /// @param params The parameters for this function found in IBurn interface.\\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\\n    /// @return collateralOut The amount of collateral ERC20 received by collateralTo.\\n    function removeLiquidity(\\n        IBurn.RemoveLiquidity calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint256 assetOut, uint128 collateralOut);\\n\\n    /// @dev Calls the burn funtion and withdraw liquiidty from a pool.\\n    /// @dev The asset received is ETH which will be unwrapped from WETH.\\n    /// @param params The parameters for this function found in IBurn interface.\\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\\n    /// @return collateralOut The amount of collateral ERC20 received by collateralTo.\\n    function removeLiquidityETHAsset(\\n        IBurn.RemoveLiquidityETHAsset calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint256 assetOut, uint128 collateralOut);\\n\\n    /// @dev Calls the burn funtion and withdraw liquiidty from a pool.\\n    /// @dev The collateral received is ETH which will be unwrapped from WETH.\\n    /// @param params The parameters for this function found in IBurn interface.\\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\\n    /// @return collateralOut The amount of collateral ERC20 received by collateralTo.\\n    function removeLiquidityETHCollateral(\\n        IBurn.RemoveLiquidityETHCollateral calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint256 assetOut, uint128 collateralOut);\\n\\n    /// @dev Calls the lend function and deposit asset into a pool.\\n    /// @dev Calls given percentage ratio of loan and coverage.\\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in ILend interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return claimsOut The amount of loan ERC20 and coverage ERC20 received by loanTo and coverageTo.\\n    function lendGivenPercent(\\n        ILend.LendGivenPercent calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint256 assetIn, IPair.Claims memory claimsOut);\\n\\n    /// @dev Calls the lend function and deposit asset into a pool.\\n    /// @dev Calls given percentage ratio of loan and coverage.\\n    /// @dev The asset deposited is ETH which will be wrapped as WETH.\\n    /// @param params The parameters for this function found in ILend interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return claimsOut The amount of loan ERC20 and coverage ERC20 received by loanTo and coverageTo.\\n    function lendGivenPercentETHAsset(\\n        ILend.LendGivenPercentETHAsset calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external payable returns (uint256 assetIn, IPair.Claims memory claimsOut);\\n\\n    /// @dev Calls the lend function and deposit asset into a pool.\\n    /// @dev Calls given percentage ratio of loan and coverage.\\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in ILend interface.\\n    /// @return assetIn The amount of asset ERC20 deposited.\\n    /// @return claimsOut The amount of loan ERC20 and coverage ERC20 received by loanTo and coverageTo.\\n    function lendGivenPercentETHCollateral(\\n        ILend.LendGivenPercentETHCollateral calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint256 assetIn, IPair.Claims memory claimsOut);\\n\\n    /// @dev Calls the withdraw function and withdraw asset and collateral from a pool.\\n    /// @param params The parameters for this function found in IWithdraw interface.\\n    /// @return tokensOut The amount of asset ERC20 and collateral ERC20 received by assetTo and collateralTo.\\n    function collect(\\n        IWithdraw.Collect calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (IPair.Tokens memory tokensOut);\\n\\n    /// @dev Calls the withdraw function and withdraw asset and collateral from a pool.\\n    /// @dev The asset received is ETH which will be unwrapped from WETH.\\n    /// @param params The parameters for this function found in IWithdraw interface.\\n    /// @return tokensOut The amount of asset ERC20 and collateral ERC20 received by assetTo and collateralTo.\\n    function collectETHAsset(\\n        IWithdraw.CollectETHAsset calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (IPair.Tokens memory tokensOut);\\n\\n    /// @dev Calls the withdraw function and withdraw asset and collateral from a pool.\\n    /// @dev The collateral received is ETH which will be unwrapped from WETH.\\n    /// @param params The parameters for this function found in IWithdraw interface.\\n    /// @return tokensOut The amount of asset ERC20 and collateral ERC20 received by assetTo and collateralTo.\\n    function collectETHCollateral(\\n        IWithdraw.CollectETHCollateral calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (IPair.Tokens memory tokensOut);\\n\\n    /// @dev Calls the borrow function and borrow asset from a pool and locking collateral into the pool.\\n    /// @dev Calls given percentage ratio of debt and collateral.\\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IBorrow interface.\\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\\n    /// @return id The token id of locked debt ERC721 received by dueTo.\\n    /// @return dueOut The locked debt ERC721 received by dueTo.\\n    function borrowGivenPercent(\\n        IBorrow.BorrowGivenPercent calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the borrow function and borrow asset from a pool and locking collateral into the pool.\\n    /// @dev Calls given percentage ratio of debt and collateral.\\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\\n    /// @param params The parameters for this function found in IBorrow interface.\\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\\n    /// @return id The token id of locked debt ERC721 received by dueTo.\\n    /// @return dueOut The locked debt ERC721 received by dueTo.\\n    function borrowGivenPercentETHAsset(\\n        IBorrow.BorrowGivenPercentETHAsset calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the borrow function and borrow asset from a pool and locking collateral into the pool.\\n    /// @dev Calls given percentage ratio of debt and collateral.\\n    /// @dev The collateral locked is ETH which will be wrapped as WETH.\\n    /// @param params The parameters for this function found in IBorrow interface.\\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\\n    /// @return id The token id of locked debt ERC721 received by dueTo.\\n    /// @return dueOut The locked debt ERC721 received by dueTo.\\n    function borrowGivenPercentETHCollateral(\\n        IBorrow.BorrowGivenPercentETHCollateral calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external payable returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut);\\n\\n    /// @dev Calls the pay function and withdraw collateral from a pool given debt is paid or being paid.\\n    /// @dev If there is debt being paid, must have the asset ERC20 approve this contract before calling this function.\\n    /// @dev Possible to pay debt of locked debt not owned by msg.sender, which means no collateral is withdraw.\\n    /// @param params The parameters for this function found in IPay interface.\\n    /// @return assetIn The total amount of asset ERC20 paid.\\n    /// @return collateralOut The total amount of collateral ERC20 receceived by to;\\n    /// @return creditPositionFullyPaid The array of credit position id that is fully paid.\\n    function repay(\\n        IPay.Repay calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid);\\n\\n    /// @dev Calls the pay function and withdraw collateral from a pool given debt is paid or being paid.\\n    /// @dev The asset being paid is ETH which will be wrapped as WETH.\\n    /// @dev Possible to pay debt of locked debt not owned by msg.sender, which means no collateral is withdraw.\\n    /// @param params The parameters for this function found in IPay interface.\\n    /// @return assetIn The total amount of asset ERC20 paid.\\n    /// @return collateralOut The total amount of collateral ERC20 receceived by to;\\n    /// @return creditPositionFullyPaid The array of credit position id that is fully paid.\\n    function repayETHAsset(\\n        IPay.RepayETHAsset calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external payable returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid);\\n\\n    /// @dev Calls the pay function and withdraw collateral from a pool given debt is paid or being paid.\\n    /// @dev The collateral received is ETH which will be unwrapped from WETH.\\n    /// @dev If there is debt being paid, must have the asset ERC20 approve this contract before calling this function.\\n    /// @dev Possible to pay debt of locked debt not owned by msg.sender, which means no collateral is withdraw.\\n    /// @param params The parameters for this function found in IPay interface.\\n    /// @return assetIn The total amount of asset ERC20 paid.\\n    /// @return collateralOut The total amount of collateral ERC20 receceived by to;\\n    /// @return creditPositionFullyPaid The array of credit position id that is fully paid.\\n    function repayETHCollateral(\\n        IPay.RepayETHCollateral calldata params,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid);\\n}\\n\",\"keccak256\":\"0xb46a861c7104ca5aafd753df11b6c80093103fb780a3c8b726f4cf9ace23633e\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title WETH9 Interface\\ninterface IWETH is IERC20 {\\n    /* ===== UPDATE ===== */\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x679efb715beafba1f387019d8b60a8b170b0c444ec3124062648ddef59f24082\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/interfaces/IWithdraw.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IFactory } from \\\"../../core/interfaces/IFactory.sol\\\";\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\n\\n/// @title Withdraw interface\\ninterface IWithdraw {\\n    struct Collect {\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address assetTo;\\n        address collateralTo;\\n        uint256 creditPositionId;\\n    }\\n\\n    struct CollectETHAsset {\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address payable assetTo;\\n        address collateralTo;\\n        uint256 creditPositionId;\\n    }\\n\\n    struct CollectETHCollateral {\\n        IERC20 asset;\\n        uint256 maturity;\\n        address assetTo;\\n        address payable collateralTo;\\n        uint256 creditPositionId;\\n    }\\n\\n    struct _Collect {\\n        IFactory factory;\\n        IERC20 asset;\\n        IERC20 collateral;\\n        uint256 maturity;\\n        address assetTo;\\n        address collateralTo;\\n        uint256 creditPositionId;\\n    }\\n}\\n\",\"keccak256\":\"0x9168d97456aa8cffcc08f54f2b807220efd2c4d50a3b6fcc09470725d06b504f\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/libraries/ConstantProduct.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\n\\nlibrary ConstantProduct {\\n    struct CP {\\n        uint112 x;\\n        uint112 y;\\n        uint112 z;\\n    }\\n\\n    function get(IPair pair, uint256 maturity) internal view returns (CP memory cp) {\\n        (uint112 x, uint112 y, uint112 z) = pair.constantProduct(maturity);\\n        cp = CP(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x9057702268cce6d614385fbb70fea378de9f3d93586be3dfa08ee219305c90c6\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/libraries/ETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nlibrary ETH {\\n    function transfer(address payable to, uint256 amount) internal {\\n        //slither-disable-next-line unchecked-lowlevel\\n        (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"E521\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf3ce14ce75aefdb796c3a975c64d0f5b8d5637fe24def526edb3cd86a943f41a\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/libraries/Mint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IFactory } from \\\"../../core/interfaces/IFactory.sol\\\";\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\nimport { ICreditPositionManager } from \\\"../../tokens/interfaces/ICreditPositionManager.sol\\\";\\nimport { IRouter } from \\\"../interfaces/IRouter.sol\\\";\\nimport { IWETH } from \\\"../interfaces/IWETH.sol\\\";\\nimport { IMint } from \\\"../interfaces/IMint.sol\\\";\\nimport { MintMath } from \\\"./MintMath.sol\\\";\\nimport { MsgValue } from \\\"./MsgValue.sol\\\";\\nimport { ETH } from \\\"./ETH.sol\\\";\\n\\nlibrary Mint {\\n    using MintMath for IPair;\\n\\n    function newLiquidity(\\n        IRouter router,\\n        IFactory factory,\\n        ICreditPositionManager creditPosition,\\n        IMint.NewLiquidity calldata params\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        (assetIn, liquidityOut, id, dueOut) = _newLiquidity(\\n            creditPosition,\\n            IMint._NewLiquidity(\\n                router,\\n                factory,\\n                params.asset,\\n                params.collateral,\\n                params.maturity,\\n                msg.sender,\\n                msg.sender,\\n                params.liquidityTo,\\n                params.dueTo,\\n                params.assetIn,\\n                params.debtIn,\\n                params.collateralIn,\\n                params.deadline\\n            )\\n        );\\n    }\\n\\n    function newLiquidityETHAsset(\\n        IRouter router,\\n        IFactory factory,\\n        ICreditPositionManager creditPosition,\\n        IWETH weth,\\n        IMint.NewLiquidityETHAsset calldata params\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        uint112 assetInETH = MsgValue.getUint112();\\n\\n        (assetIn, liquidityOut, id, dueOut) = _newLiquidity(\\n            creditPosition,\\n            IMint._NewLiquidity(\\n                router,\\n                factory,\\n                weth,\\n                params.collateral,\\n                params.maturity,\\n                address(this),\\n                msg.sender,\\n                params.liquidityTo,\\n                params.dueTo,\\n                assetInETH,\\n                params.debtIn,\\n                params.collateralIn,\\n                params.deadline\\n            )\\n        );\\n    }\\n\\n    function newLiquidityETHCollateral(\\n        IRouter router,\\n        IFactory factory,\\n        ICreditPositionManager creditPosition,\\n        IWETH weth,\\n        IMint.NewLiquidityETHCollateral calldata params\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        uint112 collateralIn = MsgValue.getUint112();\\n\\n        (assetIn, liquidityOut, id, dueOut) = _newLiquidity(\\n            creditPosition,\\n            IMint._NewLiquidity(\\n                router,\\n                factory,\\n                params.asset,\\n                weth,\\n                params.maturity,\\n                msg.sender,\\n                address(this),\\n                params.liquidityTo,\\n                params.dueTo,\\n                params.assetIn,\\n                params.debtIn,\\n                collateralIn,\\n                params.deadline\\n            )\\n        );\\n    }\\n\\n    function liquidityGivenAsset(\\n        IRouter router,\\n        IFactory factory,\\n        ICreditPositionManager creditPosition,\\n        IMint.LiquidityGivenAsset calldata params\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenAsset(\\n            creditPosition,\\n            IMint._LiquidityGivenAsset(\\n                router,\\n                factory,\\n                params.asset,\\n                params.collateral,\\n                params.maturity,\\n                msg.sender,\\n                msg.sender,\\n                params.liquidityTo,\\n                params.dueTo,\\n                params.assetIn,\\n                params.minLiquidity,\\n                params.maxDebt,\\n                params.maxCollateral,\\n                params.deadline\\n            )\\n        );\\n    }\\n\\n    function liquidityGivenAssetETHAsset(\\n        IRouter router,\\n        IFactory factory,\\n        ICreditPositionManager creditPosition,\\n        IWETH weth,\\n        IMint.LiquidityGivenAssetETHAsset calldata params\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        uint112 assetInETH = MsgValue.getUint112();\\n\\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenAsset(\\n            creditPosition,\\n            IMint._LiquidityGivenAsset(\\n                router,\\n                factory,\\n                weth,\\n                params.collateral,\\n                params.maturity,\\n                address(this),\\n                msg.sender,\\n                params.liquidityTo,\\n                params.dueTo,\\n                assetInETH,\\n                params.minLiquidity,\\n                params.maxDebt,\\n                params.maxCollateral,\\n                params.deadline\\n            )\\n        );\\n    }\\n\\n    function liquidityGivenAssetETHCollateral(\\n        IRouter router,\\n        IFactory factory,\\n        ICreditPositionManager creditPosition,\\n        IWETH weth,\\n        IMint.LiquidityGivenAssetETHCollateral calldata params\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        uint112 maxCollateral = MsgValue.getUint112();\\n\\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenAsset(\\n            creditPosition,\\n            IMint._LiquidityGivenAsset(\\n                router,\\n                factory,\\n                params.asset,\\n                weth,\\n                params.maturity,\\n                msg.sender,\\n                address(this),\\n                params.liquidityTo,\\n                params.dueTo,\\n                params.assetIn,\\n                params.minLiquidity,\\n                params.maxDebt,\\n                maxCollateral,\\n                params.deadline\\n            )\\n        );\\n\\n        if (maxCollateral > dueOut.collateral) {\\n            uint256 excess = maxCollateral;\\n            unchecked {\\n                excess -= dueOut.collateral;\\n            }\\n            ETH.transfer(payable(msg.sender), excess);\\n        }\\n    }\\n\\n    function liquidityGivenCollateral(\\n        IRouter router,\\n        IFactory factory,\\n        ICreditPositionManager creditPosition,\\n        IMint.LiquidityGivenCollateral memory params\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenCollateral(\\n            creditPosition,\\n            IMint._LiquidityGivenCollateral(\\n                router,\\n                factory,\\n                params.asset,\\n                params.collateral,\\n                params.maturity,\\n                msg.sender,\\n                msg.sender,\\n                params.liquidityTo,\\n                params.dueTo,\\n                params.collateralIn,\\n                params.minLiquidity,\\n                params.maxAsset,\\n                params.maxDebt,\\n                params.deadline\\n            )\\n        );\\n    }\\n\\n    function liquidityGivenCollateralETHAsset(\\n        IRouter router,\\n        IFactory factory,\\n        ICreditPositionManager creditPosition,\\n        IWETH weth,\\n        IMint.LiquidityGivenCollateralETHAsset memory params\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        uint112 maxAsset = MsgValue.getUint112();\\n\\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenCollateral(\\n            creditPosition,\\n            IMint._LiquidityGivenCollateral(\\n                router,\\n                factory,\\n                weth,\\n                params.collateral,\\n                params.maturity,\\n                address(this),\\n                msg.sender,\\n                params.liquidityTo,\\n                params.dueTo,\\n                params.collateralIn,\\n                params.minLiquidity,\\n                maxAsset,\\n                params.maxDebt,\\n                params.deadline\\n            )\\n        );\\n\\n        if (maxAsset > assetIn) {\\n            uint256 excess = maxAsset;\\n            unchecked {\\n                excess -= assetIn;\\n            }\\n            ETH.transfer(payable(msg.sender), excess);\\n        }\\n    }\\n\\n    function liquidityGivenCollateralETHCollateral(\\n        IRouter router,\\n        IFactory factory,\\n        ICreditPositionManager creditPosition,\\n        IWETH weth,\\n        IMint.LiquidityGivenCollateralETHCollateral memory params\\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        uint112 collateralIn = MsgValue.getUint112();\\n\\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenCollateral(\\n            creditPosition,\\n            IMint._LiquidityGivenCollateral(\\n                router,\\n                factory,\\n                params.asset,\\n                weth,\\n                params.maturity,\\n                msg.sender,\\n                address(this),\\n                params.liquidityTo,\\n                params.dueTo,\\n                collateralIn,\\n                params.minLiquidity,\\n                params.maxAsset,\\n                params.maxDebt,\\n                params.deadline\\n            )\\n        );\\n    }\\n\\n    function _newLiquidity(\\n        ICreditPositionManager creditPosition,\\n        IMint._NewLiquidity memory params\\n    ) private returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        require(params.debtIn > params.assetIn, \\\"E516\\\");\\n        require(params.maturity > block.timestamp, \\\"E508\\\");\\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\\n        if (address(pair) == address(0)) pair = params.factory.createPair(params.asset, params.collateral);\\n\\n        require(pair.totalLiquidity(params.maturity) == 0, \\\"E506\\\");\\n\\n        (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) = MintMath.givenNew(\\n            params.maturity,\\n            params.assetIn,\\n            params.debtIn,\\n            params.collateralIn\\n        );\\n\\n        (assetIn, liquidityOut, id, dueOut) = _mint(\\n            creditPosition,\\n            IMint._Mint(\\n                params.router,\\n                pair,\\n                params.asset,\\n                params.collateral,\\n                params.maturity,\\n                params.assetFrom,\\n                params.collateralFrom,\\n                params.liquidityTo,\\n                params.dueTo,\\n                xIncrease,\\n                yIncrease,\\n                zIncrease,\\n                params.deadline\\n            )\\n        );\\n    }\\n\\n    function _liquidityGivenAsset(\\n        ICreditPositionManager creditPosition,\\n        IMint._LiquidityGivenAsset memory params\\n    ) private returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\\n        require(address(pair) != address(0), \\\"E501\\\");\\n        require(pair.totalLiquidity(params.maturity) != 0, \\\"E507\\\");\\n\\n        (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) = pair.givenAsset(params.maturity, params.assetIn);\\n\\n        (assetIn, liquidityOut, id, dueOut) = _mint(\\n            creditPosition,\\n            IMint._Mint(\\n                params.router,\\n                pair,\\n                params.asset,\\n                params.collateral,\\n                params.maturity,\\n                params.assetFrom,\\n                params.collateralFrom,\\n                params.liquidityTo,\\n                params.dueTo,\\n                xIncrease,\\n                yIncrease,\\n                zIncrease,\\n                params.deadline\\n            )\\n        );\\n\\n        require(liquidityOut >= params.minLiquidity, \\\"E511\\\");\\n        require(dueOut.collateral <= params.maxCollateral, \\\"E513\\\");\\n    }\\n\\n    function _liquidityGivenCollateral(\\n        ICreditPositionManager creditPosition,\\n        IMint._LiquidityGivenCollateral memory params\\n    ) private returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\\n        require(address(pair) != address(0), \\\"E501\\\");\\n        require(pair.totalLiquidity(params.maturity) != 0, \\\"E507\\\");\\n\\n        (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) = pair.givenCollateral(\\n            params.maturity,\\n            params.collateralIn\\n        );\\n        (assetIn, liquidityOut, id, dueOut) = _mint(\\n            creditPosition,\\n            IMint._Mint(\\n                params.router,\\n                pair,\\n                params.asset,\\n                params.collateral,\\n                params.maturity,\\n                params.assetFrom,\\n                params.collateralFrom,\\n                params.liquidityTo,\\n                params.dueTo,\\n                xIncrease,\\n                yIncrease,\\n                zIncrease,\\n                params.deadline\\n            )\\n        );\\n        require(liquidityOut >= params.minLiquidity, \\\"E511\\\");\\n        require(xIncrease <= params.maxAsset, \\\"E519\\\");\\n    }\\n\\n    function _mint(\\n        ICreditPositionManager creditPosition,\\n        IMint._Mint memory params\\n    ) private returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\\n        require(params.deadline >= block.timestamp, \\\"E504\\\");\\n        require(params.maturity > block.timestamp, \\\"E508\\\");\\n\\n        (assetIn, liquidityOut, id, dueOut) = params.pair.mint(\\n            IPair.MintParam(\\n                params.maturity,\\n                address(this),\\n                address(this),\\n                params.xIncrease,\\n                params.yIncrease,\\n                params.zIncrease,\\n                bytes(abi.encode(params.asset, params.collateral, params.assetFrom, params.collateralFrom))\\n            )\\n        );\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = liquidityOut;\\n\\n        ICreditPositionManager.MintParams memory mintParams = ICreditPositionManager.MintParams({\\n            pair: params.pair,\\n            maturity: params.maturity,\\n            positionType: ICreditPositionManager.PositionType.LIQUIDITY,\\n            amounts: amounts,\\n            recipient: params.liquidityTo\\n        });\\n\\n        creditPosition.mint(mintParams);\\n    }\\n}\\n\",\"keccak256\":\"0xae5733993f952bacbd56c2adc41b37daf1590010d3a3a031fcf7037b0aced613\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/libraries/MintMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\nimport { Math } from \\\"../../core/libraries/Math.sol\\\";\\nimport { SafeCast } from \\\"../../core/libraries/SafeCast.sol\\\";\\nimport { ConstantProduct } from \\\"./ConstantProduct.sol\\\";\\n\\nlibrary MintMath {\\n    using Math for uint256;\\n    using ConstantProduct for IPair;\\n    using SafeCast for uint256;\\n\\n    function givenNew(\\n        uint256 maturity,\\n        uint112 assetIn,\\n        uint112 debtIn,\\n        uint112 collateralIn\\n    ) internal view returns (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) {\\n        xIncrease = assetIn;\\n        uint256 duration = maturity;\\n        duration -= block.timestamp;\\n        uint256 _yIncrease = debtIn;\\n        _yIncrease -= assetIn;\\n        _yIncrease <<= 32;\\n        _yIncrease /= duration;\\n        yIncrease = _yIncrease.toUint112();\\n        uint256 _zIncrease = collateralIn;\\n        _zIncrease <<= 25;\\n        uint256 denominator = duration;\\n        denominator += 0x2000000;\\n        _zIncrease /= denominator;\\n        zIncrease = _zIncrease.toUint112();\\n    }\\n\\n    function givenAsset(\\n        IPair pair,\\n        uint256 maturity,\\n        uint112 assetIn\\n    ) internal view returns (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) {\\n        ConstantProduct.CP memory cp = pair.get(maturity);\\n\\n        uint256 _xIncrease = assetIn;\\n        _xIncrease *= cp.x;\\n        uint256 denominator = cp.x;\\n        denominator += pair.lpFeeStored(maturity);\\n        _xIncrease /= denominator;\\n        xIncrease = _xIncrease.toUint112();\\n\\n        uint256 _yIncrease = cp.y;\\n        _yIncrease *= xIncrease;\\n        _yIncrease /= cp.x;\\n        yIncrease = _yIncrease.toUint112();\\n\\n        uint256 _zIncrease = cp.z;\\n        _zIncrease *= xIncrease;\\n        _zIncrease /= cp.x;\\n        zIncrease = _zIncrease.toUint112();\\n    }\\n\\n    function givenCollateral(\\n        IPair pair,\\n        uint256 maturity,\\n        uint112 collateralIn\\n    ) internal view returns (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) {\\n        ConstantProduct.CP memory cp = pair.get(maturity);\\n\\n        uint256 _zIncrease = collateralIn;\\n        _zIncrease <<= 25;\\n        uint256 denominator = maturity;\\n        denominator -= block.timestamp;\\n        denominator += 0x2000000;\\n        _zIncrease /= denominator;\\n        zIncrease = _zIncrease.toUint112();\\n\\n        uint256 _xIncrease = cp.x;\\n        _xIncrease *= _zIncrease;\\n        _xIncrease = _xIncrease.divUp(cp.z);\\n        xIncrease = _xIncrease.toUint112();\\n\\n        uint256 _yIncrease = cp.y;\\n        _yIncrease *= _zIncrease;\\n        _yIncrease /= cp.z;\\n        yIncrease = _yIncrease.toUint112();\\n    }\\n}\\n\",\"keccak256\":\"0x07fa60379e34d16f0628ddcec4694d1a394b3e4a8b1171316ab564723315717a\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/libraries/MsgValue.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity =0.8.20;\\n\\nimport { SafeCast } from \\\"../../core/libraries/SafeCast.sol\\\";\\nimport { ETH } from \\\"./ETH.sol\\\";\\n\\nlibrary MsgValue {\\n    using SafeCast for uint256;\\n\\n    function getUint112() internal returns (uint112 value) {\\n        value = msg.value.truncateUint112();\\n        unchecked {\\n            if (msg.value > value) ETH.transfer(payable(msg.sender), msg.value - value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb428ca9a09f162b1f8c8eb7bb0e8e97c83f35af7b6ef877fd0805562e5f28251\",\"license\":\"GPL-2.0-or-later\"},\"contracts/tokens/interfaces/IClaim.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\nimport { IERC20Permit } from \\\"./IERC20Permit.sol\\\";\\nimport { IRouter } from \\\"../../periphery/interfaces/IRouter.sol\\\";\\n\\n/// @title Claim interface\\ninterface IClaim is IERC20Permit {\\n    function router() external returns (IRouter);\\n\\n    function pair() external returns (IPair);\\n\\n    function maturity() external returns (uint256);\\n\\n    function mint(address to, uint128 amount) external;\\n\\n    function burn(address from, uint128 amount) external;\\n}\\n\",\"keccak256\":\"0x7bd215b387143c23a4d3d8abe46933c1f8ccba2b1aaed34569458af968645227\",\"license\":\"BUSL-1.1\"},\"contracts/tokens/interfaces/ICreditPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\n\\ninterface ICreditPositionManager is IERC721Upgradeable {\\n    /// @param pair Pair Address\\n    /// @param maturity Maturity of the position\\n    /// @param positionType Type of position (see enum PositionType)\\n    /// @param slot0 Slot 0 of the position\\n    /// @param slot1 Slot 1 of the position\\n    /// @param slot2 Slot 2 of the position\\n    /// @param slot3 Slot 3 of the position\\n    struct CreditPosition {\\n        IPair pair;\\n        uint256 maturity;\\n        PositionType positionType;\\n        uint256 slot0;\\n        uint256 slot1;\\n        uint256 slot2;\\n        uint256 slot3;\\n    }\\n\\n    /// @param pair Pair Address\\n    /// @param maturity Maturity of the position\\n    /// @param positionType Type of position (see enum PositionType)\\n    /// @param amounts Amounts of the position (array of max length 4)\\n    /// @param recipient Recipient of the position\\n    struct MintParams {\\n        IPair pair;\\n        uint256 maturity;\\n        PositionType positionType;\\n        uint256[] amounts;\\n        address recipient;\\n    }\\n\\n    /// @notice The type of position, i.e. liquidity, credit or debt.\\n    enum PositionType {\\n        LIQUIDITY,\\n        CREDIT,\\n        DEBT\\n    }\\n\\n    event CreditPositionCreated(\\n        IPair pair,\\n        uint256 maturity,\\n        address indexed recipient,\\n        uint256 indexed tokenId,\\n        ICreditPositionManager.PositionType positionType\\n    );\\n\\n    event CreditPositionBurnt(uint256 indexed tokenId);\\n\\n    /**\\n     *  @notice Mint a Credit Position.\\n     *\\n     *  @param params          The parameters of the Credit Position.\\n     */\\n    function mint(ICreditPositionManager.MintParams calldata params) external;\\n\\n    /**\\n     *  @notice Burn a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     */\\n    function burn(uint256 _tokenId) external;\\n\\n    /**\\n     *  @notice Get the Credit Position Info.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return CreditPosition The Credit Position of the wrapped token.\\n     */\\n    function getPositions(uint256 _tokenId) external view returns (ICreditPositionManager.CreditPosition memory);\\n\\n    /**\\n     *  @notice Get the position type of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return PositionType   The position type of the Credit Position.\\n     */\\n    function getPositionType(uint256 _tokenId) external view returns (PositionType);\\n\\n    /**\\n     *  @notice Get the pair of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return address        The pair of the Credit Position.\\n     */\\n    function getPair(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     *  @notice Get the maturity of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return uint256        The maturity of the Credit Position.\\n     */\\n    function getMaturity(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     *  @notice Get the liquidity of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return Token          The liquidity of the Credit Position.\\n     */\\n    function getLiquidity(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     *  @notice Get the credit of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return Token          The credit of the Credit Position.\\n     */\\n    function getCredit(uint256 _tokenId) external view returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     *  @notice Get the debt if of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return Token          The debt of the Credit Position.\\n     */\\n    function getDebtId(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     *  @notice Get the due (from the Pair) of a Credit Position.\\n     *\\n     *  @param _tokenId        The id of the wrapped token.\\n     *  @return Due            The due of the Credit Position.\\n     */\\n    function dueOf(uint256 _tokenId) external view returns (IPair.Due memory);\\n\\n    /**\\n     *  @notice Get the credit position id of a due.\\n     *\\n     *  @param _dueId          The id of the due.\\n     *  @return uint256        The credit position id of the due.\\n     */\\n    function creditPositionOf(uint256 _dueId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7861d51f6ee478e13c65232f0056f4e324743c05e5b71cedc2b228eae413dbb8\",\"license\":\"BUSL-1.1\"},\"contracts/tokens/interfaces/IDue.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\nimport { IERC721Permit } from \\\"./IERC721Permit.sol\\\";\\nimport { IRouter } from \\\"../../periphery/interfaces/IRouter.sol\\\";\\n\\n/// @title Due interface\\ninterface IDue is IERC721Permit {\\n    function router() external view returns (IRouter);\\n\\n    function pair() external view returns (IPair);\\n\\n    function maturity() external view returns (uint256);\\n\\n    function dueOf(uint256 id) external view returns (IPair.Due memory);\\n\\n    function mint(address to, uint256 id) external;\\n}\\n\",\"keccak256\":\"0xbf115b8d2fa06422bce12ba83cf6fd490c93ac39b2ad34cd259d76311585f9c5\",\"license\":\"BUSL-1.1\"},\"contracts/tokens/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IERC20Permit is IERC20Metadata {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xaef28cfce5fca28bbef3423827f4dbc0008a444dfd8ee96225962466acaba834\",\"license\":\"GPL-2.0-or-later\"},\"contracts/tokens/interfaces/IERC721Extended.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport { IERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IERC721Extended is IERC721Metadata, IERC721Enumerable {\\n    function assetDecimals() external view returns (uint8);\\n\\n    function collateralDecimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd345b477cac8873689acc418f7582a4be384983f27555fb4ecf796655c490763\",\"license\":\"GPL-2.0-or-later\"},\"contracts/tokens/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC721Extended } from \\\"./IERC721Extended.sol\\\";\\n\\ninterface IERC721Permit is IERC721Extended {\\n    // /// @notice The permit typehash used in the permit signature\\n    // /// @return The typehash for the permit\\n    // function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xa0e594cdd9078ef25296f841f97c25ec2c449be99ee843c0af5c6e32731c7a56\",\"license\":\"GPL-2.0-or-later\"},\"contracts/tokens/interfaces/ILiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport { IPair } from \\\"../../core/interfaces/IPair.sol\\\";\\nimport { IERC20Permit } from \\\"./IERC20Permit.sol\\\";\\nimport { IRouter } from \\\"../../periphery/interfaces/IRouter.sol\\\";\\n\\n/// @title Liquidity interface\\ninterface ILiquidity is IERC20Permit {\\n    // VIEW\\n\\n    function router() external returns (IRouter);\\n\\n    function pair() external returns (IPair);\\n\\n    function maturity() external returns (uint256);\\n\\n    // UPDATE\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xc41d93c80a4bb67a4d6a167e6f7364ed998eaa1f378eba4f076da26df93232c3\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x61290761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063a7c62a1411610070578063a7c62a1414610170578063cbbcc4ef14610190578063dbf47b84146101b0578063f536bdd3146101d0578063f8ff5f0b146101f057600080fd5b80630bf9acfa146100a2578063214627e3146101105780633470b351146101305780633ee12a6514610150575b600080fd5b8180156100ae57600080fd5b506100c26100bd366004612009565b610210565b604080519485526020808601949094528481019290925280516001600160701b039081166060860152928101519092166080840152015163ffffffff1660a082015260c00160405180910390f35b81801561011c57600080fd5b506100c261012b366004612112565b61036d565b81801561013c57600080fd5b506100c261014b366004612208565b6104c4565b81801561015c57600080fd5b506100c261016b366004612281565b610636565b81801561017c57600080fd5b506100c261018b3660046122e4565b610789565b81801561019c57600080fd5b506100c26101ab366004612009565b6108f5565b8180156101bc57600080fd5b506100c26101cb36600461233c565b610a3e565b8180156101dc57600080fd5b506100c26101eb366004612281565b610b52565b8180156101fc57600080fd5b506100c261020b366004612444565b610ce6565b6040805160608101825260008082526020820181905291810182905281908190600061023a610dfc565b905061035988604051806101a001604052808d6001600160a01b031681526020018c6001600160a01b0316815260200189600001602081019061027d919061251c565b6001600160a01b031681526020018a6001600160a01b0316815260200189602001358152602001336001600160a01b03168152602001306001600160a01b031681526020018960400160208101906102d5919061251c565b6001600160a01b031681526020016102f360808b0160608c0161251c565b6001600160a01b0316815260200161031160a08b0160808c01612540565b6001600160701b0316815260200161032f60c08b0160a08c01612540565b6001600160701b03168152602001846001600160701b031681526020018960c00135815250610e32565b929d919c509a509098509650505050505050565b60408051606081018252600080825260208201819052918101829052819081906000610397610dfc565b905061048388604051806101c001604052808d6001600160a01b031681526020018c6001600160a01b031681526020018a6001600160a01b0316815260200189600001516001600160a01b0316815260200189602001518152602001306001600160a01b03168152602001336001600160a01b0316815260200189604001516001600160a01b0316815260200189606001516001600160a01b0316815260200189608001516001600160701b031681526020018960a001518152602001846001600160701b031681526020018960c001516001600160701b031681526020018960e001518152506111be565b929750909550935091506001600160701b0381168510156104b7576001600160701b0381168590036104b5338261150a565b505b5095509550955095915050565b604080516060810182526000808252602082018190529181018290528190819061062486604051806101a001604052808b6001600160a01b031681526020018a6001600160a01b03168152602001886000016020810190610525919061251c565b6001600160a01b03168152602001886020016020810190610546919061251c565b6001600160a01b0316815260200188604001358152602001336001600160a01b03168152602001336001600160a01b0316815260200188606001602081019061058f919061251c565b6001600160a01b031681526020016105ad60a08a0160808b0161251c565b6001600160a01b031681526020016105cb60c08a0160a08b01612540565b6001600160701b031681526020016105e960e08a0160c08b01612540565b6001600160701b031681526020016106086101008a0160e08b01612540565b6001600160701b03168152602001886101000135815250610e32565b929b919a509850909650945050505050565b60408051606081018252600080825260208201819052918101829052819081906000610660610dfc565b905061035988604051806101c001604052808d6001600160a01b031681526020018c6001600160a01b031681526020018a6001600160a01b031681526020018960000160208101906106b2919061251c565b6001600160a01b0316815260200189602001358152602001306001600160a01b03168152602001336001600160a01b031681526020018960400160208101906106fb919061251c565b6001600160a01b0316815260200161071960808b0160608c0161251c565b6001600160a01b031681526001600160701b038516602082015260808a0135604082015260600161075060c08b0160a08c01612540565b6001600160701b0316815260200161076e60e08b0160c08c01612540565b6001600160701b031681526020018960e0013581525061159b565b604080516060810182526000808252602082018190529181018290528190819061062486604051806101c001604052808b6001600160a01b031681526020018a6001600160a01b031681526020018860000160208101906107ea919061251c565b6001600160a01b0316815260200188602001602081019061080b919061251c565b6001600160a01b0316815260200188604001358152602001336001600160a01b03168152602001336001600160a01b03168152602001886060016020810190610854919061251c565b6001600160a01b0316815260200161087260a08a0160808b0161251c565b6001600160a01b0316815260200161089060c08a0160a08b01612540565b6001600160701b0316815260c089013560208201526040016108b96101008a0160e08b01612540565b6001600160701b031681526020016108d96101208a016101008b01612540565b6001600160701b0316815260200188610120013581525061159b565b6040805160608101825260008082526020820181905291810182905281908190600061091f610dfc565b905061035988604051806101a001604052808d6001600160a01b031681526020018c6001600160a01b031681526020018a6001600160a01b03168152602001896000016020810190610971919061251c565b6001600160a01b0316815260200189602001358152602001306001600160a01b03168152602001336001600160a01b031681526020018960400160208101906109ba919061251c565b6001600160a01b031681526020016109d860808b0160608c0161251c565b6001600160a01b031681526001600160701b0385166020820152604001610a0560a08b0160808c01612540565b6001600160701b03168152602001610a2360c08b0160a08c01612540565b6001600160701b031681526020018960c00135815250610e32565b604080516060810182526000808252602082018190529181018290528190819061062486604051806101c001604052808b6001600160a01b031681526020018a6001600160a01b0316815260200188600001516001600160a01b0316815260200188602001516001600160a01b0316815260200188604001518152602001336001600160a01b03168152602001336001600160a01b0316815260200188606001516001600160a01b0316815260200188608001516001600160a01b031681526020018860a001516001600160701b031681526020018860c0015181526020018860e001516001600160701b031681526020018861010001516001600160701b031681526020018861012001518152506111be565b60408051606081018252600080825260208201819052918101829052819081906000610b7c610dfc565b9050610ca588604051806101c001604052808d6001600160a01b031681526020018c6001600160a01b03168152602001896000016020810190610bbf919061251c565b6001600160a01b031681526020018a6001600160a01b0316815260200189602001358152602001336001600160a01b03168152602001306001600160a01b03168152602001896040016020810190610c17919061251c565b6001600160a01b03168152602001610c3560808b0160608c0161251c565b6001600160a01b03168152602001610c5360a08b0160808c01612540565b6001600160701b0316815260a08a01356020820152604001610c7b60e08b0160c08c01612540565b6001600160701b03168152602001846001600160701b031681526020018960e0013581525061159b565b6020810151939850919650945092506001600160701b0390811690821611156104b75760208201516001600160701b03908116908216036104b5338261150a565b60408051606081018252600080825260208201819052918101829052819081906000610d10610dfc565b905061035988604051806101c001604052808d6001600160a01b031681526020018c6001600160a01b0316815260200189600001516001600160a01b031681526020018a6001600160a01b0316815260200189602001518152602001336001600160a01b03168152602001306001600160a01b0316815260200189604001516001600160a01b0316815260200189606001516001600160a01b03168152602001846001600160701b03168152602001896080015181526020018960a001516001600160701b031681526020018960c001516001600160701b031681526020018960e001518152506111be565b6000610e07346118de565b9050806001600160701b0316341115610e2f57610e2f33826001600160701b0316340361150a565b90565b60408051606081018252600080825260208201819052918101829052819081908461012001516001600160701b03168561014001516001600160701b031611610eaf5760405162461bcd60e51b8152600401610ea690602080825260049082015263229a989b60e11b604082015260600190565b60405180910390fd5b42856080015111610eeb5760405162461bcd60e51b8152600401610ea69060208082526004908201526308a6a60760e31b604082015260600190565b60208501516040808701516060880151915163e6a4390560e01b81526001600160a01b0391821660048201529181166024830152600092169063e6a4390590604401602060405180830381865afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e919061255d565b90506001600160a01b038116611005576020860151604080880151606089015191516364e329cb60e11b81526001600160a01b03918216600482015291811660248301529091169063c9c65396906044016020604051808303816000875af1158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611002919061255d565b90505b6080860151604051632d79830f60e21b815260048101919091526001600160a01b0382169063b5e60c3c90602401602060405180830381865afa158015611050573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611074919061257a565b156110aa5760405162461bcd60e51b8152600401610ea690602080825260049082015263229a981b60e11b604082015260600190565b60008060006110ce89608001518a61012001518b61014001518c6101600151611901565b9250925092506103598a604051806101a001604052808c600001516001600160a01b03168152602001876001600160a01b031681526020018c604001516001600160a01b031681526020018c606001516001600160a01b031681526020018c6080015181526020018c60a001516001600160a01b031681526020018c60c001516001600160a01b031681526020018c60e001516001600160a01b031681526020018c61010001516001600160a01b03168152602001866001600160701b03168152602001856001600160701b03168152602001846001600160701b031681526020018c610180015181525061198d565b604080516060810182526000808252602082018190529181018290528190819060208501516040808701516060880151915163e6a4390560e01b81526001600160a01b0391821660048201529181166024830152600092169063e6a4390590604401602060405180830381865afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611261919061255d565b90506001600160a01b0381166112a25760405162461bcd60e51b8152600401610ea6906020808252600490820152634535303160e01b604082015260600190565b6080860151604051632d79830f60e21b815260048101919091526001600160a01b0382169063b5e60c3c90602401602060405180830381865afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611311919061257a565b6000036113495760405162461bcd60e51b8152600401610ea6906020808252600490820152634535303760e01b604082015260600190565b600080600061137589608001518a6101200151866001600160a01b0316611c799092919063ffffffff16565b9250925092506114658a604051806101a001604052808c600001516001600160a01b03168152602001876001600160a01b031681526020018c604001516001600160a01b031681526020018c606001516001600160a01b031681526020018c6080015181526020018c60a001516001600160a01b031681526020018c60c001516001600160a01b031681526020018c60e001516001600160a01b031681526020018c61010001516001600160a01b03168152602001866001600160701b03168152602001856001600160701b03168152602001846001600160701b031681526020018c6101a0015181525061198d565b6101408d0151939b50919950975095508710156114ad5760405162461bcd60e51b8152600401610ea6906020808252600490820152634535313160e01b604082015260600190565b8861016001516001600160701b0316836001600160701b031611156114fd5760405162461bcd60e51b8152600401610ea6906020808252600490820152634535313960e01b604082015260600190565b5050505092959194509250565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611557576040519150601f19603f3d011682016040523d82523d6000602084013e61155c565b606091505b50509050806115965760405162461bcd60e51b8152600401610ea6906020808252600490820152634535323160e01b604082015260600190565b505050565b604080516060810182526000808252602082018190529181018290528190819060208501516040808701516060880151915163e6a4390560e01b81526001600160a01b0391821660048201529181166024830152600092169063e6a4390590604401602060405180830381865afa15801561161a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163e919061255d565b90506001600160a01b03811661167f5760405162461bcd60e51b8152600401610ea6906020808252600490820152634535303160e01b604082015260600190565b6080860151604051632d79830f60e21b815260048101919091526001600160a01b0382169063b5e60c3c90602401602060405180830381865afa1580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee919061257a565b6000036117265760405162461bcd60e51b8152600401610ea6906020808252600490820152634535303760e01b604082015260600190565b600080600061175289608001518a6101200151866001600160a01b0316611d6c9092919063ffffffff16565b9250925092506118428a604051806101a001604052808c600001516001600160a01b03168152602001876001600160a01b031681526020018c604001516001600160a01b031681526020018c606001516001600160a01b031681526020018c6080015181526020018c60a001516001600160a01b031681526020018c60c001516001600160a01b031681526020018c60e001516001600160a01b031681526020018c61010001516001600160a01b03168152602001866001600160701b03168152602001856001600160701b03168152602001846001600160701b031681526020018c6101a0015181525061198d565b6101408d0151939b509199509750955087101561188a5760405162461bcd60e51b8152600401610ea6906020808252600490820152634535313160e01b604082015260600190565b8861018001516001600160701b031685602001516001600160701b031611156114fd5760405162461bcd60e51b8152600401610ea6906020808252600490820152634535313360e01b604082015260600190565b60006001600160701b038211156118fd57506001600160701b03919050565b5090565b826000808661191042826125a9565b90506001600160701b038087169061192a908916826125a9565b60201b905061193982826125d2565b905061194481611ecf565b93506302000000600160891b03601987901b16826119666302000000826125e6565b905061197281836125d2565b915061197d82611ecf565b9450505050509450945094915050565b60408051606081018252600080825260208201819052918101829052819081904285610180015110156119eb5760405162461bcd60e51b8152600401610ea690602080825260049082015263114d4c0d60e21b604082015260600190565b42856080015111611a275760405162461bcd60e51b8152600401610ea69060208082526004908201526308a6a60760e31b604082015260600190565b84602001516001600160a01b03166393910a686040518060e0016040528088608001518152602001306001600160a01b03168152602001306001600160a01b031681526020018861012001516001600160701b031681526020018861014001516001600160701b031681526020018861016001516001600160701b03168152602001886040015189606001518a60a001518b60c00151604051602001611af694939291906001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6040516020818303038152906040528152506040518263ffffffff1660e01b8152600401611b2491906125f9565b60c0604051808303816000875af1158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6791906126af565b604080516001808252818301909252949850929650909450925060009190602080830190803683370190505090508381600081518110611ba957611ba9612769565b60200260200101818152505060006040518060a0016040528088602001516001600160a01b031681526020018860800151815260200160006002811115611bf257611bf261277f565b81526020018381526020018860e001516001600160a01b03168152509050876001600160a01b031663ae6ba93a826040518263ffffffff1660e01b8152600401611c3c9190612795565b600060405180830381600087803b158015611c5657600080fd5b505af1158015611c6a573d6000803e3d6000fd5b50505050505092959194509250565b6000808080611c916001600160a01b03881687611ee5565b90506302000000600160891b03601986901b1686611caf42826125a9565b9050611cbf6302000000826125e6565b9050611ccb81836125d2565b9150611cd682611ecf565b83519094506001600160701b0316611cee8382612840565b9050611d1084604001516001600160701b031682611fa890919063ffffffff16565b9050611d1b81611ecf565b60208501519097506001600160701b0316611d368482612840565b905084604001516001600160701b031681611d5191906125d2565b9050611d5c81611ecf565b9650505050505093509350939050565b6000808080611d846001600160a01b03881687611ee5565b80519091506001600160701b0380871691611da0911682612840565b82516040516309c8b1ab60e01b8152600481018a90529192506001600160701b0316906001600160a01b038a16906309c8b1ab90602401602060405180830381865afa158015611df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e18919061257a565b611e2290826125e6565b9050611e2e81836125d2565b9150611e3982611ecf565b60208401519096506001600160701b0390811690611e5990881682612840565b8451909150611e71906001600160701b0316826125d2565b9050611e7c81611ecf565b60408501519096506001600160701b0390811690611e9c90891682612840565b8551909150611eb4906001600160701b0316826125d2565b9050611ebf81611ecf565b9550505050505093509350939050565b60006001600160701b038211156118fd57600080fd5b60408051606081018252600080825260208201819052918101919091526000806000856001600160a01b031663baadc6fe866040518263ffffffff1660e01b8152600401611f3591815260200190565b606060405180830381865afa158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f769190612857565b604080516060810182526001600160701b03948516815292841660208401529216918101919091529695505050505050565b6000611fb482846125d2565b9050611fc082846128a4565b15611fd35780611fcf816128b8565b9150505b92915050565b6001600160a01b0381168114611fee57600080fd5b50565b600060e0828403121561200357600080fd5b50919050565b6000806000806000610160868803121561202257600080fd5b853561202d81611fd9565b9450602086013561203d81611fd9565b9350604086013561204d81611fd9565b9250606086013561205d81611fd9565b915061206c8760808801611ff1565b90509295509295909350565b604051610100810167ffffffffffffffff811182821017156120aa57634e487b7160e01b600052604160045260246000fd5b60405290565b604051610140810167ffffffffffffffff811182821017156120aa57634e487b7160e01b600052604160045260246000fd5b80356120ed81611fd9565b919050565b6001600160701b0381168114611fee57600080fd5b80356120ed816120f2565b600080600080600085870361018081121561212c57600080fd5b863561213781611fd9565b9550602087013561214781611fd9565b9450604087013561215781611fd9565b9350606087013561216781611fd9565b9250610100607f19820181131561217d57600080fd5b612185612078565b9150608088013561219581611fd9565b825260a088013560208301526121ad60c089016120e2565b60408301526121be60e089016120e2565b60608301526121ce818901612107565b60808301525061012087013560a08201526121ec6101408801612107565b60c0820152610160969096013560e08701525092959194509290565b60008060008084860361018081121561222057600080fd5b853561222b81611fd9565b9450602086013561223b81611fd9565b9350604086013561224b81611fd9565b9250610120605f198201121561226057600080fd5b509295919450926060019150565b6000610100828403121561200357600080fd5b6000806000806000610180868803121561229a57600080fd5b85356122a581611fd9565b945060208601356122b581611fd9565b935060408601356122c581611fd9565b925060608601356122d581611fd9565b915061206c876080880161226e565b6000806000808486036101a08112156122fc57600080fd5b853561230781611fd9565b9450602086013561231781611fd9565b9350604086013561232781611fd9565b9250610140605f198201121561226057600080fd5b6000806000808486036101a081121561235457600080fd5b853561235f81611fd9565b9450602086013561236f81611fd9565b9350604086013561237f81611fd9565b9250610140605f19820181131561239557600080fd5b61239d6120b0565b91506123ab606088016120e2565b82526123b9608088016120e2565b602083015260a087013560408301526123d460c088016120e2565b60608301526123e560e088016120e2565b60808301526101006123f8818901612107565b60a08401526101208089013560c0850152612414838a01612107565b60e08501526124266101608a01612107565b82850152610180890135818501525050508091505092959194509250565b600080600080600085870361018081121561245e57600080fd5b863561246981611fd9565b9550602087013561247981611fd9565b9450604087013561248981611fd9565b9350606087013561249981611fd9565b9250610100607f1982018113156124af57600080fd5b6124b7612078565b915060808801356124c781611fd9565b825260a088013560208301526124df60c089016120e2565b60408301526124f060e089016120e2565b6060830152870135608082015261250a6101208801612107565b60a08201526121ec6101408801612107565b60006020828403121561252e57600080fd5b813561253981611fd9565b9392505050565b60006020828403121561255257600080fd5b8135612539816120f2565b60006020828403121561256f57600080fd5b815161253981611fd9565b60006020828403121561258c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611fd357611fd3612593565b634e487b7160e01b600052601260045260246000fd5b6000826125e1576125e16125bc565b500490565b80820180821115611fd357611fd3612593565b600060208083528351818401528084015160018060a01b038082166040860152806040870151166060860152505060608401516001600160701b0380821660808601528060808701511660a08601528060a08701511660c0860152505060c084015160e08085015280518061010086015260005b8181101561268a578281018401518682016101200152830161266d565b506101209250600083828701015282601f19601f830116860101935050505092915050565b60008060008084860360c08112156126c657600080fd5b8551945060208601519350604086015192506060605f19820112156126ea57600080fd5b506040516060810181811067ffffffffffffffff8211171561271c57634e487b7160e01b600052604160045260246000fd5b604052606086015161272d816120f2565b8152608086015161273d816120f2565b602082015260a086015163ffffffff8116811461275957600080fd5b6040820152939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000602080835260c0830160018060a01b03855116828501528185015160408501526040850151600381106127da57634e487b7160e01b600052602160045260246000fd5b60608581019190915285015160a0608086015280519182905282019060009060e08601905b8083101561281f57835182529284019260019290920191908401906127ff565b5060808701516001600160a01b03811660a088015293509695505050505050565b8082028115828204841417611fd357611fd3612593565b60008060006060848603121561286c57600080fd5b8351612877816120f2565b6020850151909350612888816120f2565b6040850151909250612899816120f2565b809150509250925092565b6000826128b3576128b36125bc565b500690565b6000600182016128ca576128ca612593565b506001019056fea2646970667358221220c1ef4aaac822da1eae1bea5ceca956973c7da9f7a8c32acb0d11b5f2d769685c64736f6c63430008140033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063a7c62a1411610070578063a7c62a1414610170578063cbbcc4ef14610190578063dbf47b84146101b0578063f536bdd3146101d0578063f8ff5f0b146101f057600080fd5b80630bf9acfa146100a2578063214627e3146101105780633470b351146101305780633ee12a6514610150575b600080fd5b8180156100ae57600080fd5b506100c26100bd366004612009565b610210565b604080519485526020808601949094528481019290925280516001600160701b039081166060860152928101519092166080840152015163ffffffff1660a082015260c00160405180910390f35b81801561011c57600080fd5b506100c261012b366004612112565b61036d565b81801561013c57600080fd5b506100c261014b366004612208565b6104c4565b81801561015c57600080fd5b506100c261016b366004612281565b610636565b81801561017c57600080fd5b506100c261018b3660046122e4565b610789565b81801561019c57600080fd5b506100c26101ab366004612009565b6108f5565b8180156101bc57600080fd5b506100c26101cb36600461233c565b610a3e565b8180156101dc57600080fd5b506100c26101eb366004612281565b610b52565b8180156101fc57600080fd5b506100c261020b366004612444565b610ce6565b6040805160608101825260008082526020820181905291810182905281908190600061023a610dfc565b905061035988604051806101a001604052808d6001600160a01b031681526020018c6001600160a01b0316815260200189600001602081019061027d919061251c565b6001600160a01b031681526020018a6001600160a01b0316815260200189602001358152602001336001600160a01b03168152602001306001600160a01b031681526020018960400160208101906102d5919061251c565b6001600160a01b031681526020016102f360808b0160608c0161251c565b6001600160a01b0316815260200161031160a08b0160808c01612540565b6001600160701b0316815260200161032f60c08b0160a08c01612540565b6001600160701b03168152602001846001600160701b031681526020018960c00135815250610e32565b929d919c509a509098509650505050505050565b60408051606081018252600080825260208201819052918101829052819081906000610397610dfc565b905061048388604051806101c001604052808d6001600160a01b031681526020018c6001600160a01b031681526020018a6001600160a01b0316815260200189600001516001600160a01b0316815260200189602001518152602001306001600160a01b03168152602001336001600160a01b0316815260200189604001516001600160a01b0316815260200189606001516001600160a01b0316815260200189608001516001600160701b031681526020018960a001518152602001846001600160701b031681526020018960c001516001600160701b031681526020018960e001518152506111be565b929750909550935091506001600160701b0381168510156104b7576001600160701b0381168590036104b5338261150a565b505b5095509550955095915050565b604080516060810182526000808252602082018190529181018290528190819061062486604051806101a001604052808b6001600160a01b031681526020018a6001600160a01b03168152602001886000016020810190610525919061251c565b6001600160a01b03168152602001886020016020810190610546919061251c565b6001600160a01b0316815260200188604001358152602001336001600160a01b03168152602001336001600160a01b0316815260200188606001602081019061058f919061251c565b6001600160a01b031681526020016105ad60a08a0160808b0161251c565b6001600160a01b031681526020016105cb60c08a0160a08b01612540565b6001600160701b031681526020016105e960e08a0160c08b01612540565b6001600160701b031681526020016106086101008a0160e08b01612540565b6001600160701b03168152602001886101000135815250610e32565b929b919a509850909650945050505050565b60408051606081018252600080825260208201819052918101829052819081906000610660610dfc565b905061035988604051806101c001604052808d6001600160a01b031681526020018c6001600160a01b031681526020018a6001600160a01b031681526020018960000160208101906106b2919061251c565b6001600160a01b0316815260200189602001358152602001306001600160a01b03168152602001336001600160a01b031681526020018960400160208101906106fb919061251c565b6001600160a01b0316815260200161071960808b0160608c0161251c565b6001600160a01b031681526001600160701b038516602082015260808a0135604082015260600161075060c08b0160a08c01612540565b6001600160701b0316815260200161076e60e08b0160c08c01612540565b6001600160701b031681526020018960e0013581525061159b565b604080516060810182526000808252602082018190529181018290528190819061062486604051806101c001604052808b6001600160a01b031681526020018a6001600160a01b031681526020018860000160208101906107ea919061251c565b6001600160a01b0316815260200188602001602081019061080b919061251c565b6001600160a01b0316815260200188604001358152602001336001600160a01b03168152602001336001600160a01b03168152602001886060016020810190610854919061251c565b6001600160a01b0316815260200161087260a08a0160808b0161251c565b6001600160a01b0316815260200161089060c08a0160a08b01612540565b6001600160701b0316815260c089013560208201526040016108b96101008a0160e08b01612540565b6001600160701b031681526020016108d96101208a016101008b01612540565b6001600160701b0316815260200188610120013581525061159b565b6040805160608101825260008082526020820181905291810182905281908190600061091f610dfc565b905061035988604051806101a001604052808d6001600160a01b031681526020018c6001600160a01b031681526020018a6001600160a01b03168152602001896000016020810190610971919061251c565b6001600160a01b0316815260200189602001358152602001306001600160a01b03168152602001336001600160a01b031681526020018960400160208101906109ba919061251c565b6001600160a01b031681526020016109d860808b0160608c0161251c565b6001600160a01b031681526001600160701b0385166020820152604001610a0560a08b0160808c01612540565b6001600160701b03168152602001610a2360c08b0160a08c01612540565b6001600160701b031681526020018960c00135815250610e32565b604080516060810182526000808252602082018190529181018290528190819061062486604051806101c001604052808b6001600160a01b031681526020018a6001600160a01b0316815260200188600001516001600160a01b0316815260200188602001516001600160a01b0316815260200188604001518152602001336001600160a01b03168152602001336001600160a01b0316815260200188606001516001600160a01b0316815260200188608001516001600160a01b031681526020018860a001516001600160701b031681526020018860c0015181526020018860e001516001600160701b031681526020018861010001516001600160701b031681526020018861012001518152506111be565b60408051606081018252600080825260208201819052918101829052819081906000610b7c610dfc565b9050610ca588604051806101c001604052808d6001600160a01b031681526020018c6001600160a01b03168152602001896000016020810190610bbf919061251c565b6001600160a01b031681526020018a6001600160a01b0316815260200189602001358152602001336001600160a01b03168152602001306001600160a01b03168152602001896040016020810190610c17919061251c565b6001600160a01b03168152602001610c3560808b0160608c0161251c565b6001600160a01b03168152602001610c5360a08b0160808c01612540565b6001600160701b0316815260a08a01356020820152604001610c7b60e08b0160c08c01612540565b6001600160701b03168152602001846001600160701b031681526020018960e0013581525061159b565b6020810151939850919650945092506001600160701b0390811690821611156104b75760208201516001600160701b03908116908216036104b5338261150a565b60408051606081018252600080825260208201819052918101829052819081906000610d10610dfc565b905061035988604051806101c001604052808d6001600160a01b031681526020018c6001600160a01b0316815260200189600001516001600160a01b031681526020018a6001600160a01b0316815260200189602001518152602001336001600160a01b03168152602001306001600160a01b0316815260200189604001516001600160a01b0316815260200189606001516001600160a01b03168152602001846001600160701b03168152602001896080015181526020018960a001516001600160701b031681526020018960c001516001600160701b031681526020018960e001518152506111be565b6000610e07346118de565b9050806001600160701b0316341115610e2f57610e2f33826001600160701b0316340361150a565b90565b60408051606081018252600080825260208201819052918101829052819081908461012001516001600160701b03168561014001516001600160701b031611610eaf5760405162461bcd60e51b8152600401610ea690602080825260049082015263229a989b60e11b604082015260600190565b60405180910390fd5b42856080015111610eeb5760405162461bcd60e51b8152600401610ea69060208082526004908201526308a6a60760e31b604082015260600190565b60208501516040808701516060880151915163e6a4390560e01b81526001600160a01b0391821660048201529181166024830152600092169063e6a4390590604401602060405180830381865afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e919061255d565b90506001600160a01b038116611005576020860151604080880151606089015191516364e329cb60e11b81526001600160a01b03918216600482015291811660248301529091169063c9c65396906044016020604051808303816000875af1158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611002919061255d565b90505b6080860151604051632d79830f60e21b815260048101919091526001600160a01b0382169063b5e60c3c90602401602060405180830381865afa158015611050573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611074919061257a565b156110aa5760405162461bcd60e51b8152600401610ea690602080825260049082015263229a981b60e11b604082015260600190565b60008060006110ce89608001518a61012001518b61014001518c6101600151611901565b9250925092506103598a604051806101a001604052808c600001516001600160a01b03168152602001876001600160a01b031681526020018c604001516001600160a01b031681526020018c606001516001600160a01b031681526020018c6080015181526020018c60a001516001600160a01b031681526020018c60c001516001600160a01b031681526020018c60e001516001600160a01b031681526020018c61010001516001600160a01b03168152602001866001600160701b03168152602001856001600160701b03168152602001846001600160701b031681526020018c610180015181525061198d565b604080516060810182526000808252602082018190529181018290528190819060208501516040808701516060880151915163e6a4390560e01b81526001600160a01b0391821660048201529181166024830152600092169063e6a4390590604401602060405180830381865afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611261919061255d565b90506001600160a01b0381166112a25760405162461bcd60e51b8152600401610ea6906020808252600490820152634535303160e01b604082015260600190565b6080860151604051632d79830f60e21b815260048101919091526001600160a01b0382169063b5e60c3c90602401602060405180830381865afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611311919061257a565b6000036113495760405162461bcd60e51b8152600401610ea6906020808252600490820152634535303760e01b604082015260600190565b600080600061137589608001518a6101200151866001600160a01b0316611c799092919063ffffffff16565b9250925092506114658a604051806101a001604052808c600001516001600160a01b03168152602001876001600160a01b031681526020018c604001516001600160a01b031681526020018c606001516001600160a01b031681526020018c6080015181526020018c60a001516001600160a01b031681526020018c60c001516001600160a01b031681526020018c60e001516001600160a01b031681526020018c61010001516001600160a01b03168152602001866001600160701b03168152602001856001600160701b03168152602001846001600160701b031681526020018c6101a0015181525061198d565b6101408d0151939b50919950975095508710156114ad5760405162461bcd60e51b8152600401610ea6906020808252600490820152634535313160e01b604082015260600190565b8861016001516001600160701b0316836001600160701b031611156114fd5760405162461bcd60e51b8152600401610ea6906020808252600490820152634535313960e01b604082015260600190565b5050505092959194509250565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611557576040519150601f19603f3d011682016040523d82523d6000602084013e61155c565b606091505b50509050806115965760405162461bcd60e51b8152600401610ea6906020808252600490820152634535323160e01b604082015260600190565b505050565b604080516060810182526000808252602082018190529181018290528190819060208501516040808701516060880151915163e6a4390560e01b81526001600160a01b0391821660048201529181166024830152600092169063e6a4390590604401602060405180830381865afa15801561161a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163e919061255d565b90506001600160a01b03811661167f5760405162461bcd60e51b8152600401610ea6906020808252600490820152634535303160e01b604082015260600190565b6080860151604051632d79830f60e21b815260048101919091526001600160a01b0382169063b5e60c3c90602401602060405180830381865afa1580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee919061257a565b6000036117265760405162461bcd60e51b8152600401610ea6906020808252600490820152634535303760e01b604082015260600190565b600080600061175289608001518a6101200151866001600160a01b0316611d6c9092919063ffffffff16565b9250925092506118428a604051806101a001604052808c600001516001600160a01b03168152602001876001600160a01b031681526020018c604001516001600160a01b031681526020018c606001516001600160a01b031681526020018c6080015181526020018c60a001516001600160a01b031681526020018c60c001516001600160a01b031681526020018c60e001516001600160a01b031681526020018c61010001516001600160a01b03168152602001866001600160701b03168152602001856001600160701b03168152602001846001600160701b031681526020018c6101a0015181525061198d565b6101408d0151939b509199509750955087101561188a5760405162461bcd60e51b8152600401610ea6906020808252600490820152634535313160e01b604082015260600190565b8861018001516001600160701b031685602001516001600160701b031611156114fd5760405162461bcd60e51b8152600401610ea6906020808252600490820152634535313360e01b604082015260600190565b60006001600160701b038211156118fd57506001600160701b03919050565b5090565b826000808661191042826125a9565b90506001600160701b038087169061192a908916826125a9565b60201b905061193982826125d2565b905061194481611ecf565b93506302000000600160891b03601987901b16826119666302000000826125e6565b905061197281836125d2565b915061197d82611ecf565b9450505050509450945094915050565b60408051606081018252600080825260208201819052918101829052819081904285610180015110156119eb5760405162461bcd60e51b8152600401610ea690602080825260049082015263114d4c0d60e21b604082015260600190565b42856080015111611a275760405162461bcd60e51b8152600401610ea69060208082526004908201526308a6a60760e31b604082015260600190565b84602001516001600160a01b03166393910a686040518060e0016040528088608001518152602001306001600160a01b03168152602001306001600160a01b031681526020018861012001516001600160701b031681526020018861014001516001600160701b031681526020018861016001516001600160701b03168152602001886040015189606001518a60a001518b60c00151604051602001611af694939291906001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6040516020818303038152906040528152506040518263ffffffff1660e01b8152600401611b2491906125f9565b60c0604051808303816000875af1158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6791906126af565b604080516001808252818301909252949850929650909450925060009190602080830190803683370190505090508381600081518110611ba957611ba9612769565b60200260200101818152505060006040518060a0016040528088602001516001600160a01b031681526020018860800151815260200160006002811115611bf257611bf261277f565b81526020018381526020018860e001516001600160a01b03168152509050876001600160a01b031663ae6ba93a826040518263ffffffff1660e01b8152600401611c3c9190612795565b600060405180830381600087803b158015611c5657600080fd5b505af1158015611c6a573d6000803e3d6000fd5b50505050505092959194509250565b6000808080611c916001600160a01b03881687611ee5565b90506302000000600160891b03601986901b1686611caf42826125a9565b9050611cbf6302000000826125e6565b9050611ccb81836125d2565b9150611cd682611ecf565b83519094506001600160701b0316611cee8382612840565b9050611d1084604001516001600160701b031682611fa890919063ffffffff16565b9050611d1b81611ecf565b60208501519097506001600160701b0316611d368482612840565b905084604001516001600160701b031681611d5191906125d2565b9050611d5c81611ecf565b9650505050505093509350939050565b6000808080611d846001600160a01b03881687611ee5565b80519091506001600160701b0380871691611da0911682612840565b82516040516309c8b1ab60e01b8152600481018a90529192506001600160701b0316906001600160a01b038a16906309c8b1ab90602401602060405180830381865afa158015611df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e18919061257a565b611e2290826125e6565b9050611e2e81836125d2565b9150611e3982611ecf565b60208401519096506001600160701b0390811690611e5990881682612840565b8451909150611e71906001600160701b0316826125d2565b9050611e7c81611ecf565b60408501519096506001600160701b0390811690611e9c90891682612840565b8551909150611eb4906001600160701b0316826125d2565b9050611ebf81611ecf565b9550505050505093509350939050565b60006001600160701b038211156118fd57600080fd5b60408051606081018252600080825260208201819052918101919091526000806000856001600160a01b031663baadc6fe866040518263ffffffff1660e01b8152600401611f3591815260200190565b606060405180830381865afa158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f769190612857565b604080516060810182526001600160701b03948516815292841660208401529216918101919091529695505050505050565b6000611fb482846125d2565b9050611fc082846128a4565b15611fd35780611fcf816128b8565b9150505b92915050565b6001600160a01b0381168114611fee57600080fd5b50565b600060e0828403121561200357600080fd5b50919050565b6000806000806000610160868803121561202257600080fd5b853561202d81611fd9565b9450602086013561203d81611fd9565b9350604086013561204d81611fd9565b9250606086013561205d81611fd9565b915061206c8760808801611ff1565b90509295509295909350565b604051610100810167ffffffffffffffff811182821017156120aa57634e487b7160e01b600052604160045260246000fd5b60405290565b604051610140810167ffffffffffffffff811182821017156120aa57634e487b7160e01b600052604160045260246000fd5b80356120ed81611fd9565b919050565b6001600160701b0381168114611fee57600080fd5b80356120ed816120f2565b600080600080600085870361018081121561212c57600080fd5b863561213781611fd9565b9550602087013561214781611fd9565b9450604087013561215781611fd9565b9350606087013561216781611fd9565b9250610100607f19820181131561217d57600080fd5b612185612078565b9150608088013561219581611fd9565b825260a088013560208301526121ad60c089016120e2565b60408301526121be60e089016120e2565b60608301526121ce818901612107565b60808301525061012087013560a08201526121ec6101408801612107565b60c0820152610160969096013560e08701525092959194509290565b60008060008084860361018081121561222057600080fd5b853561222b81611fd9565b9450602086013561223b81611fd9565b9350604086013561224b81611fd9565b9250610120605f198201121561226057600080fd5b509295919450926060019150565b6000610100828403121561200357600080fd5b6000806000806000610180868803121561229a57600080fd5b85356122a581611fd9565b945060208601356122b581611fd9565b935060408601356122c581611fd9565b925060608601356122d581611fd9565b915061206c876080880161226e565b6000806000808486036101a08112156122fc57600080fd5b853561230781611fd9565b9450602086013561231781611fd9565b9350604086013561232781611fd9565b9250610140605f198201121561226057600080fd5b6000806000808486036101a081121561235457600080fd5b853561235f81611fd9565b9450602086013561236f81611fd9565b9350604086013561237f81611fd9565b9250610140605f19820181131561239557600080fd5b61239d6120b0565b91506123ab606088016120e2565b82526123b9608088016120e2565b602083015260a087013560408301526123d460c088016120e2565b60608301526123e560e088016120e2565b60808301526101006123f8818901612107565b60a08401526101208089013560c0850152612414838a01612107565b60e08501526124266101608a01612107565b82850152610180890135818501525050508091505092959194509250565b600080600080600085870361018081121561245e57600080fd5b863561246981611fd9565b9550602087013561247981611fd9565b9450604087013561248981611fd9565b9350606087013561249981611fd9565b9250610100607f1982018113156124af57600080fd5b6124b7612078565b915060808801356124c781611fd9565b825260a088013560208301526124df60c089016120e2565b60408301526124f060e089016120e2565b6060830152870135608082015261250a6101208801612107565b60a08201526121ec6101408801612107565b60006020828403121561252e57600080fd5b813561253981611fd9565b9392505050565b60006020828403121561255257600080fd5b8135612539816120f2565b60006020828403121561256f57600080fd5b815161253981611fd9565b60006020828403121561258c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611fd357611fd3612593565b634e487b7160e01b600052601260045260246000fd5b6000826125e1576125e16125bc565b500490565b80820180821115611fd357611fd3612593565b600060208083528351818401528084015160018060a01b038082166040860152806040870151166060860152505060608401516001600160701b0380821660808601528060808701511660a08601528060a08701511660c0860152505060c084015160e08085015280518061010086015260005b8181101561268a578281018401518682016101200152830161266d565b506101209250600083828701015282601f19601f830116860101935050505092915050565b60008060008084860360c08112156126c657600080fd5b8551945060208601519350604086015192506060605f19820112156126ea57600080fd5b506040516060810181811067ffffffffffffffff8211171561271c57634e487b7160e01b600052604160045260246000fd5b604052606086015161272d816120f2565b8152608086015161273d816120f2565b602082015260a086015163ffffffff8116811461275957600080fd5b6040820152939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000602080835260c0830160018060a01b03855116828501528185015160408501526040850151600381106127da57634e487b7160e01b600052602160045260246000fd5b60608581019190915285015160a0608086015280519182905282019060009060e08601905b8083101561281f57835182529284019260019290920191908401906127ff565b5060808701516001600160a01b03811660a088015293509695505050505050565b8082028115828204841417611fd357611fd3612593565b60008060006060848603121561286c57600080fd5b8351612877816120f2565b6020850151909350612888816120f2565b6040850151909250612899816120f2565b809150509250925092565b6000826128b3576128b36125bc565b500690565b6000600182016128ca576128ca612593565b506001019056fea2646970667358221220c1ef4aaac822da1eae1bea5ceca956973c7da9f7a8c32acb0d11b5f2d769685c64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}