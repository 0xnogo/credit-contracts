{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract unpausable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/core/interfaces/callback/ICreditBorrowCallback.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\n/// @title Callback for ICreditPair#borrow\n/// @notice Any contract that calls ICreditPair#borrow must implement this interface\ninterface ICreditBorrowCallback {\n    /// @notice Called to `msg.sender` after initiating a borrow from ICreditPair#borrow.\n    /// @dev In the implementation you must pay the collateral token owed for the borrow transaction.\n    /// The caller of this method must be checked to be a CreditPair deployed by the canonical CreditFactory.\n    /// @param collateralIn The amount of asset tokens owed due to the pool for the borrow transaction\n    /// @param data Any data passed through by the caller via the ICreditPair#borrow call\n    function creditBorrowCallback(uint112 collateralIn, bytes calldata data) external;\n}\n"
    },
    "contracts/core/interfaces/callback/ICreditLendCallback.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\n/// @title Callback for ICreditPair#lend\n/// @notice Any contract that calls ICreditPair#lend must implement this interface\ninterface ICreditLendCallback {\n    /// @notice Called to `msg.sender` after initiating a lend from ICreditPair#lend.\n    /// @dev In the implementation you must pay the asset token owed for the lend transaction.\n    /// The caller of this method must be checked to be a CreditPair deployed by the canonical CreditFactory.\n    /// @param assetIn The amount of asset tokens owed due to the pool for the lend transaction\n    /// @param data Any data passed through by the caller via the ICreditPair#lend call\n    function creditLendCallback(uint256 assetIn, bytes calldata data) external;\n}\n"
    },
    "contracts/core/interfaces/callback/ICreditMintCallback.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\n/// @title Callback for ICreditPair#mint\n/// @notice Any contract that calls ICreditPair#mint must implement this interface\ninterface ICreditMintCallback {\n    /// @notice Called to `msg.sender` after initiating a mint from ICreditPair#mint.\n    /// @dev In the implementation you must pay the asset token and collateral token owed for the mint transaction.\n    /// The caller of this method must be checked to be a CreditPair deployed by the canonical CreditFactory.\n    /// @param assetIn The amount of asset tokens owed due to the pool for the mint transaction.\n    /// @param collateralIn The amount of collateral tokens owed due to the pool for the min transaction.\n    /// @param data Any data passed through by the caller via the ICreditPair#mint call\n    function creditMintCallback(uint256 assetIn, uint112 collateralIn, bytes calldata data) external;\n}\n"
    },
    "contracts/core/interfaces/callback/ICreditPayCallback.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\n/// @title Callback for ICreditPair#pay\n/// @notice Any contract that calls ICreditPair#pay must implement this interface\ninterface ICreditPayCallback {\n    /// @notice Called to `msg.sender` after initiating a pay from ICreditPair#pay.\n    /// @dev In the implementation you must pay the asset token owed for the pay transaction.\n    /// The caller of this method must be checked to be a CreditPair deployed by the canonical CreditFactory.\n    /// @param assetIn The amount of asset tokens owed due to the pool for the pay transaction\n    /// @param data Any data passed through by the caller via the ICreditPair#pay call\n    function creditPayCallback(uint128 assetIn, bytes calldata data) external;\n}\n"
    },
    "contracts/core/interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IPair } from \"./IPair.sol\";\n\n/// @title Credit Factory Interface\ninterface IFactory {\n    /* ===== EVENT ===== */\n\n    /// @dev Emits when a new Credit Pair contract is created.\n    /// @param asset The address of the ERC20 being lent and borrowed.\n    /// @param collateral The address of the ERC20 used as collateral.\n    /// @param pair The address of the Credit Pair contract created.\n    event CreatePair(IERC20 indexed asset, IERC20 indexed collateral, IPair pair);\n\n    /// @dev Emits when a new staking fee collector.\n    /// @param stakingFeeCollector The address of the stakingFeeCollector.\n    event SetStakingFeeCollector(address indexed stakingFeeCollector);\n\n    /// @dev Emits when a new protocol fee collector.\n    /// @param protocolFeeCollector The address of the protocolFeeCollector.\n    event SetProtocolFeeCollector(address indexed protocolFeeCollector);\n\n    /* ===== VIEW ===== */\n\n    /// @dev Return the lpFee per second earned by liquidity providers.\n    /// @dev Must be downcasted to uint16.\n    /// @return The lpFee following UQ0.40 format.\n    function lpFee() external view returns (uint256);\n\n    /// @dev Return the protocol fee per second earned by the owner.\n    /// @dev Must be downcasted to uint16.\n    /// @return The protocol fee per second following UQ0.40 format.\n    function protocolFee() external view returns (uint256);\n\n    /// @dev Return the staking fee per second earned by the owner.\n    /// @dev Must be downcasted to uint16.\n    /// @return The staking fee per second following UQ0.40 format.\n    function stakingFee() external view returns (uint256);\n\n    /// @dev Returns the address of a deployed pair.\n    /// @param asset The address of the ERC20 being lent and borrowed.\n    /// @param collateral The address of the ERC20 used as collateral.\n    /// @return pair The address of the Credit Pair contract.\n    function getPair(IERC20 asset, IERC20 collateral) external view returns (IPair pair);\n\n    /// @dev Return the beacon address for Pair contract.\n    /// @return The beacon address for Pair contract.\n    function beacon() external view returns (address);\n\n    /// @return Return the staking fee collector address.\n    function stakingFeeCollector() external view returns (address);\n\n    /// @return Return the protocol fee collector address.\n    function protocolFeeCollector() external view returns (address);\n\n    /* ===== UPDATE ===== */\n\n    /// @dev Creates a Credit Pool based on ERC20 pair parameters.\n    /// @dev Cannot create a Credit Pool with the same pair parameters.\n    /// @param asset The address of the ERC20 being lent and borrowed.\n    /// @param collateral The address of the ERC20 as the collateral.\n    /// @return pair The address of the Credit Pair contract.\n    function createPair(IERC20 asset, IERC20 collateral) external returns (IPair pair);\n\n    /// @dev Set the staking fee collector of the factory.\n    /// @param _stakingFeeCollector the chosen staking fee collector.\n    function setStakingFeeCollector(address _stakingFeeCollector) external;\n\n    /// @dev Set the protocol fee collector of the factory.\n    /// @param _protocolFeeCollector the chosen protocol fee collector.\n    function setProtocolFeeCollector(address _protocolFeeCollector) external;\n}\n"
    },
    "contracts/core/interfaces/IPair.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"./IFactory.sol\";\n\n/// @title The interface of Pair contract.\ninterface IPair {\n    /* ===== STRUCT ===== */\n\n    struct Tokens {\n        uint128 asset;\n        uint128 collateral;\n    }\n\n    struct Claims {\n        uint112 loanPrincipal;\n        uint112 loanInterest;\n        uint112 coveragePrincipal;\n        uint112 coverageInterest;\n    }\n\n    struct Due {\n        uint112 debt;\n        uint112 collateral;\n        uint32 startBlock;\n    }\n\n    struct State {\n        Tokens reserves;\n        uint256 lpFeeStored;\n        uint256 totalLiquidity;\n        Claims totalClaims;\n        uint120 totalDebtCreated;\n        uint112 x;\n        uint112 y;\n        uint112 z;\n    }\n\n    struct Pool {\n        State state;\n        mapping(address => uint256) liquidities;\n        mapping(address => Claims) claims;\n        mapping(address => Due[]) dues;\n    }\n\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param liquidityTo The address of the receiver of liquidity balance.\n    /// @param dueTo The addres of the receiver of locked debt balance.\n    /// @param xIncrease The increase in the X state.\n    /// @param yIncrease The increase in the Y state.\n    /// @param zIncrease The increase in the Z state.\n    /// @param data The data for callback.\n    struct MintParam {\n        uint256 maturity;\n        address liquidityTo;\n        address dueTo;\n        uint112 xIncrease;\n        uint112 yIncrease;\n        uint112 zIncrease;\n        bytes data;\n    }\n\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param assetTo The address of the receiver of asset ERC20.\n    /// @param collateralTo The addres of the receiver of collateral ERC20.\n    /// @param liquidityIn The amount of liquidity balance burnt by the msg.sender.\n    struct BurnParam {\n        uint256 maturity;\n        address assetTo;\n        address collateralTo;\n        uint256 liquidityIn;\n    }\n\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param loanTo The address of the receiver of loan balance.\n    /// @param coverageTo The addres of the receiver of coverage balance.\n    /// @param xIncrease The increase in x state and the amount of asset ERC20 sent.\n    /// @param yDecrease The decrease in y state.\n    /// @param zDecrease The decrease in z state.\n    /// @param data The data for callback.\n    struct LendParam {\n        uint256 maturity;\n        address loanTo;\n        address coverageTo;\n        uint112 xIncrease;\n        uint112 yDecrease;\n        uint112 zDecrease;\n        bytes data;\n    }\n\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param assetTo The address of the receiver of asset ERC20.\n    /// @param collateralTo The addres of the receiver of collateral ERC20.\n    /// @param claimsIn The amount of loan balance and coverage balance burnt by the msg.sender.\n    struct WithdrawParam {\n        uint256 maturity;\n        address assetTo;\n        address collateralTo;\n        Claims claimsIn;\n    }\n\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param assetTo The address of the receiver of asset ERC20.\n    /// @param dueTo The address of the receiver of locked debt.\n    /// @param xDecrease The decrease in x state and amount of asset ERC20 received by assetTo.\n    /// @param yIncrease The increase in y state.\n    /// @param zIncrease The increase in z state.\n    /// @param data The data for callback.\n    struct BorrowParam {\n        uint256 maturity;\n        address assetTo;\n        address dueTo;\n        uint112 xDecrease;\n        uint112 yIncrease;\n        uint112 zIncrease;\n        bytes data;\n    }\n\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param to The address of the receiver of collateral ERC20.\n    /// @param owner The addres of the owner of locked debt.\n    /// @param id The id of locked debt.\n    /// @param assetsIn The amount of asset ERC20 paid per locked debt.\n    /// @param collateralsOut The amount of collateral ERC20 withdrawn per collaterlaized debt.\n    /// @param data The data for callback.\n    struct PayParam {\n        uint256 maturity;\n        address to;\n        address owner;\n        uint256[] ids;\n        uint112[] assetsIn;\n        uint112[] collateralsOut;\n        bytes data;\n    }\n\n    /* ===== EVENT ===== */\n\n    /// @dev Emits when the state gets updated.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param x The new x state of the pool.\n    /// @param y The new y state of the pool.\n    /// @param z The new z state of the pool.\n    event Sync(uint256 indexed maturity, uint112 x, uint112 y, uint112 z);\n\n    /// @dev Emits when mint function is called.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param sender The address of the caller.\n    /// @param liquidityTo The address of the receiver of liquidity balance.\n    /// @param dueTo The address of the receiver of locked debt balance.\n    /// @param assetIn The increase in the X state.\n    /// @param liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @param id The array index of the locked debt received by dueTo.\n    /// @param dueOut The locked debt received by dueTo.\n    /// @param feeIn The amount of fee asset ERC20 deposited.\n    event Mint(\n        uint256 maturity,\n        address indexed sender,\n        address indexed liquidityTo,\n        address indexed dueTo,\n        uint256 assetIn,\n        uint256 liquidityOut,\n        uint256 id,\n        Due dueOut,\n        uint256 feeIn\n    );\n\n    /// @dev Emits when burn function is called.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param sender The address of the caller.\n    /// @param assetTo The address of the receiver of asset ERC20.\n    /// @param collateralTo The addres of the receiver of collateral ERC20.\n    /// @param liquidityIn The amount of liquidity balance burnt by the sender.\n    /// @param assetOut The amount of asset ERC20 received.\n    /// @param collateralOut The amount of collateral ERC20 received.\n    /// @param feeOut The amount of fee asset ERC20 received.\n    event Burn(\n        uint256 maturity,\n        address indexed sender,\n        address indexed assetTo,\n        address indexed collateralTo,\n        uint256 liquidityIn,\n        uint256 assetOut,\n        uint128 collateralOut,\n        uint256 feeOut\n    );\n\n    /// @dev Emits when lend function is called.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param sender The address of the caller.\n    /// @param loanTo The address of the receiver of loan balance.\n    /// @param coverageTo The addres of the receiver of coverage balance.\n    /// @param assetIn The increase in X state.\n    /// @param claimsOut The amount of loan balance and coverage balance received.\n    /// @param feeIn The amount of fee paid by lender.\n    /// @param protocolFeeIn The amount of protocol fee paid by lender.\n    /// @param stakingFeeIn The amount of staking fee paid by lender.\n    event Lend(\n        uint256 maturity,\n        address indexed sender,\n        address indexed loanTo,\n        address indexed coverageTo,\n        uint256 assetIn,\n        Claims claimsOut,\n        uint256 feeIn,\n        uint256 protocolFeeIn,\n        uint256 stakingFeeIn\n    );\n\n    /// @dev Emits when withdraw function is called.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param sender The address of the caller.\n    /// @param assetTo The address of the receiver of asset ERC20.\n    /// @param collateralTo The address of the receiver of collateral ERC20.\n    /// @param claimsIn The amount of loan balance and coverage balance burnt by the sender.\n    /// @param tokensOut The amount of asset ERC20 and collateral ERC20 received.\n    event Withdraw(\n        uint256 maturity,\n        address indexed sender,\n        address indexed assetTo,\n        address indexed collateralTo,\n        Claims claimsIn,\n        Tokens tokensOut\n    );\n\n    /// @dev Emits when borrow function is called.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param sender The address of the caller.\n    /// @param assetTo The address of the receiver of asset ERC20.\n    /// @param dueTo The address of the receiver of locked debt.\n    /// @param assetOut The amount of asset ERC20 received by assetTo.\n    /// @param id The array index of the locked debt received by dueTo.\n    /// @param dueOut The locked debt received by dueTo.\n    /// @param feeIn The amount of fee paid by lender.\n    /// @param protocolFeeIn The amount of protocol fee paid by lender.\n    /// @param stakingFeeIn The amount of staking fee paid by lender.\n    event Borrow(\n        uint256 maturity,\n        address indexed sender,\n        address indexed assetTo,\n        address indexed dueTo,\n        uint256 assetOut,\n        uint256 id,\n        Due dueOut,\n        uint256 feeIn,\n        uint256 protocolFeeIn,\n        uint256 stakingFeeIn\n    );\n\n    /// @dev Emits when pay function is called.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param sender The address of the caller.\n    /// @param to The address of the receiver of collateral ERC20.\n    /// @param owner The address of the owner of locked debt.\n    /// @param duesFullyPaid The ids fully repaid.\n    /// @param assetIn The total amount of asset ERC20 paid.\n    /// @param collateralOut The total amount of collateral ERC20 received.\n    event Pay(\n        uint256 maturity,\n        address indexed sender,\n        address indexed to,\n        address indexed owner,\n        uint256[] duesFullyPaid,\n        uint256 assetIn,\n        uint256 collateralOut\n    );\n\n    /// @dev Emits when collectProtocolFee function is called\n    /// @param sender The address of the caller.\n    /// @param to The address of the receiver of asset ERC20.\n    /// @param protocolFeeOut The amount of protocol fee asset ERC20 received.\n    event CollectProtocolFee(address indexed sender, address indexed to, uint256 protocolFeeOut);\n\n    /// @dev Emits when collectStakingFee function is called\n    /// @param sender The address of the caller.\n    /// @param to The address of the receiver of asset ERC20.\n    /// @param stakingFeeOut The amount of protocol fee asset ERC20 received.\n    event CollectStakingFee(address indexed sender, address indexed to, uint256 stakingFeeOut);\n\n    /* ===== VIEW ===== */\n\n    /// @dev Return the address of the factory contract that deployed this contract.\n    /// @return The address of the factory contract.\n    function factory() external view returns (IFactory);\n\n    /// @dev Return the address of the ERC20 being lent and borrowed.\n    /// @return The address of the asset ERC20.\n    function asset() external view returns (IERC20);\n\n    /// @dev Return the address of the ERC20 as collateral.\n    /// @return The address of the collateral ERC20.\n    function collateral() external view returns (IERC20);\n\n    //// @dev Return the fee per second earned by liquidity providers.\n    /// @dev Must be downcasted to uint16.\n    //// @return The transaction fee following the UQ0.40 format.\n    function lpFee() external view returns (uint256);\n\n    /// @dev Return the protocol fee per second earned by the owner.\n    /// @dev Must be downcasted to uint16.\n    /// @return The protocol fee per second following the UQ0.40 format.\n    function protocolFee() external view returns (uint256);\n\n    /// @dev Return the staking fee per second earned by the owner.\n    /// @dev Must be downcasted to uint16.\n    /// @return The staking fee per second following the UQ0.40 format.\n    function stakingFee() external view returns (uint256);\n\n    /// @dev Return the fee stored of the Pool given maturity.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @return The fee in asset ERC20 stored in the Pool.\n    function lpFeeStored(uint256 maturity) external view returns (uint256);\n\n    /// @dev Return the protocol fee stored.\n    /// @return The protocol fee in asset ERC20 stored.\n    function protocolFeeStored() external view returns (uint256);\n\n    /// @dev Return the staking fee stored.\n    /// @return The staking fee in asset ERC20 stored.\n    function stakingFeeStored() external view returns (uint256);\n\n    /// @dev Returns the Constant Product state of a Pool.\n    /// @dev The Y state follows the UQ80.32 format.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @return x The x state.\n    /// @return y The y state.\n    /// @return z The z state.\n    function constantProduct(uint256 maturity) external view returns (uint112 x, uint112 y, uint112 z);\n\n    /// @dev Returns the asset ERC20 and collateral ERC20 balances of a Pool.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @return The asset ERC20 and collateral ERC20 locked.\n    function totalReserves(uint256 maturity) external view returns (Tokens memory);\n\n    /// @dev Returns the total liquidity supply of a Pool.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @return The total liquidity supply.\n    function totalLiquidity(uint256 maturity) external view returns (uint256);\n\n    /// @dev Returns the liquidity balance of a user in a Pool.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param owner The address of the user.\n    /// @return The liquidity balance.\n    function liquidityOf(uint256 maturity, address owner) external view returns (uint256);\n\n    /// @dev Returns the total claims of a Pool.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @return The total claims.\n    function totalClaims(uint256 maturity) external view returns (Claims memory);\n\n    /// @dev Returms the claims of a user in a Pool.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param owner The address of the user.\n    /// @return The claims balance.\n    function claimsOf(uint256 maturity, address owner) external view returns (Claims memory);\n\n    /// @dev Returns the total debt created.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @return The total asset ERC20 debt created.\n    function totalDebtCreated(uint256 maturity) external view returns (uint120);\n\n    /// @dev Returns the number of dues owned by owner.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param owner The address of the user.\n    function totalDuesOf(uint256 maturity, address owner) external view returns (uint256);\n\n    /// @dev Returns a locked debt of a user in a Pool.\n    /// @param maturity The unix timestamp maturity of the Pool.\n    /// @param owner The address of the user.\n    /// @param id The index of the locked debt\n    /// @return The locked debt balance.\n    function dueOf(uint256 maturity, address owner, uint256 id) external view returns (Due memory);\n\n    /* ===== UPDATE ===== */\n\n    /// @dev Add liquidity into a Pool by a liquidity provider.\n    /// @dev Liquidity providers can be thought as making both lending and borrowing positions.\n    /// @dev Must be called by a contract implementing the ICreditMintCallback interface.\n    /// @param param The mint parameter found in the MintParam struct.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function mint(\n        MintParam calldata param\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, Due memory dueOut);\n\n    /// @dev Remove liquidity from a Pool by a liquidity provider.\n    /// @dev Can only be called after the maturity of the Pool.\n    /// @param param The burn parameter found in the BurnParam struct.\n    /// @return assetOut The amount of asset ERC20 received.\n    /// @return collateralOut The amount of collateral ERC20 received.\n    function burn(BurnParam calldata param) external returns (uint256 assetOut, uint128 collateralOut);\n\n    /// @dev Lend asset ERC20 into the Pool.\n    /// @dev Must be called by a contract implementing the ICreditLendCallback interface.\n    /// @param param The lend parameter found in the LendParam struct.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return claimsOut The amount of loan balance and coverage balance received.\n    function lend(LendParam calldata param) external returns (uint256 assetIn, Claims memory claimsOut);\n\n    /// @dev Withdraw asset ERC20 and/or collateral ERC20 for lenders.\n    /// @dev Can only be called after the maturity of the Pool.\n    /// @param param The withdraw parameter found in the WithdrawParam struct.\n    /// @return tokensOut The amount of asset ERC20 and collateral ERC20 received.\n    function withdraw(WithdrawParam calldata param) external returns (Tokens memory tokensOut);\n\n    /// @dev Borrow asset ERC20 from the Pool.\n    /// @dev Must be called by a contract implementing the ICreditBorrowCallback interface.\n    /// @param param The borrow parameter found in the BorrowParam struct.\n    /// @return assetOut The amount of asset ERC20 received.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function borrow(BorrowParam calldata param) external returns (uint256 assetOut, uint256 id, Due memory dueOut);\n\n    /// @dev Pay asset ERC20 into the Pool to repay debt for borrowers.\n    /// @dev If there are asset paid, must be called by a contract implementing the ICreditPayCallback interface.\n    /// @param param The pay parameter found in the PayParam struct.\n    /// @return assetIn The total amount of asset ERC20 paid.\n    /// @return collateralOut The total amount of collateral ERC20 received.\n    /// @return duesFullyPaid Dues fully reimbursed during the call\n    function pay(\n        PayParam calldata param\n    ) external returns (uint128 assetIn, uint128 collateralOut, uint256[] memory duesFullyPaid);\n\n    /// @dev Collect the stored protocol fee.\n    /// @dev Can only be called by the owner.\n    /// @param to The receiver of the protocol fee.\n    /// @return protocolFeeOut The total amount of protocol fee asset ERC20 received.\n    function collectProtocolFee(address to) external returns (uint256 protocolFeeOut);\n\n    /// @dev Collect the stored staking fee.\n    /// @dev Can only be called by the owner.\n    /// @param to The receiver of the staking fee.\n    /// @return stakingFeeOut The total amount of staking fee asset ERC20 received.\n    function collectStakingFee(address to) external returns (uint256 stakingFeeOut);\n}\n"
    },
    "contracts/core/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.20;\n\nlibrary FullMath {\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 prod0, uint256 prod1) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n    }\n\n    /// @notice Calculates floor(a×b÷denominator) with full precision.\n    /// Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 prod0, uint256 prod1) = mul512(a, b);\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator != 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            uint256 twos;\n            twos = (0 - denominator) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv;\n            inv = (3 * denominator) ^ 2;\n\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision.\n    /// Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) != 0) result++;\n    }\n}\n"
    },
    "contracts/core/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.8.20;\n\nlibrary Math {\n    function divUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x / y;\n        if (x % y != 0) z++;\n    }\n\n    function shiftRightUp(uint256 x, uint8 y) internal pure returns (uint256 z) {\n        z = x >> y;\n        if (x != z << y) z++;\n    }\n}\n"
    },
    "contracts/core/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.8.20;\n\nlibrary SafeCast {\n    function toUint112(uint256 x) internal pure returns (uint112 y) {\n        require(x <= type(uint112).max);\n        y = uint112(x);\n    }\n\n    function toUint128(uint256 x) internal pure returns (uint128 y) {\n        require(x <= type(uint128).max);\n        y = uint128(x);\n    }\n\n    function truncateUint112(uint256 x) internal pure returns (uint112 y) {\n        if (x > type(uint112).max) return y = type(uint112).max;\n        y = uint112(x);\n    }\n}\n"
    },
    "contracts/periphery/CreditRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC721Receiver } from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { UUPSUpgradeable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\nimport { IFactory } from \"../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../core/interfaces/IPair.sol\";\nimport { ICreditPayCallback } from \"../core/interfaces/callback/ICreditPayCallback.sol\";\nimport { ICreditBorrowCallback } from \"../core/interfaces/callback/ICreditBorrowCallback.sol\";\nimport { ICreditMintCallback } from \"../core/interfaces/callback/ICreditMintCallback.sol\";\nimport { ICreditLendCallback } from \"../core/interfaces/callback/ICreditLendCallback.sol\";\nimport { ICreditPositionManager } from \"../tokens/interfaces/ICreditPositionManager.sol\";\nimport { IBorrow } from \"./interfaces/IBorrow.sol\";\nimport { IBurn } from \"./interfaces/IBurn.sol\";\nimport { ILend } from \"./interfaces/ILend.sol\";\nimport { IMint } from \"./interfaces/IMint.sol\";\nimport { IPay } from \"./interfaces/IPay.sol\";\nimport { IWETH } from \"./interfaces/IWETH.sol\";\nimport { IWithdraw } from \"./interfaces/IWithdraw.sol\";\nimport { IRouter } from \"./interfaces/IRouter.sol\";\nimport { Borrow } from \"./libraries/Borrow.sol\";\nimport { Burn } from \"./libraries/Burn.sol\";\nimport { Lend } from \"./libraries/Lend.sol\";\nimport { Mint } from \"./libraries/Mint.sol\";\nimport { Pay } from \"./libraries/Pay.sol\";\nimport { SafeTransfer } from \"./libraries/SafeTransfer.sol\";\nimport { Withdraw } from \"./libraries/Withdraw.sol\";\n\n/**\n * @title Credit Router\n * @notice This contract provides router functions for users to interact with the Credit protocol.\n */\ncontract CreditRouter is IRouter, IERC721Receiver, Initializable, UUPSUpgradeable, OwnableUpgradeable {\n    using SafeTransfer for IERC20;\n\n    /*///////////////////////////////////////////////////////////////\n                        State variables\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IRouter\n    IFactory public override factory;\n    /// @inheritdoc IRouter\n    IWETH public override weth;\n    /// @inheritdoc IRouter\n    ICreditPositionManager public override creditPositionManager;\n\n    bytes32 public merkleRoot;\n\n    /*///////////////////////////////////////////////////////////////\n                        Init\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Initializes the Router contract.\n    /// @param _factory The address of factory contract used by this contract.\n    /// @param _weth The address of the Wrapped ETH contract.\n    /// @param _creditPositionManager The address of the Credit Position contract.\n    function initialize(\n        IFactory _factory,\n        IWETH _weth,\n        ICreditPositionManager _creditPositionManager\n    ) public initializer {\n        require(address(_factory) != address(0), \"E601\");\n        require(address(_weth) != address(0), \"E601\");\n        require(address(_creditPositionManager) != address(0), \"E601\");\n        require(address(_factory) != address(_weth), \"E612\");\n\n        __Ownable_init();\n\n        factory = _factory;\n        weth = _weth;\n        creditPositionManager = _creditPositionManager;\n    }\n\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n\n    modifier onlyWhitelist(bytes32[] calldata _merkleProof) {\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n        require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), \"Faucet: Not part of the whitelist\");\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        Owner functions\n    //////////////////////////////////////////////////////////////*/\n\n    ///@dev required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    /*///////////////////////////////////////////////////////////////\n                        Core logic\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IRouter\n    function deployPair(DeployPair calldata params) external override {\n        //slither-disable-next-line unused-return\n        factory.createPair(params.asset, params.collateral);\n    }\n\n    /// @inheritdoc IRouter\n    function newLiquidity(\n        IMint.NewLiquidity calldata params\n    ) external override onlyOwner returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        (assetIn, liquidityOut, id, dueOut) = Mint.newLiquidity(this, factory, creditPositionManager, params);\n    }\n\n    /// @inheritdoc IRouter\n    function newLiquidityETHAsset(\n        IMint.NewLiquidityETHAsset calldata params\n    )\n        external\n        payable\n        override\n        onlyOwner\n        returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut)\n    {\n        (assetIn, liquidityOut, id, dueOut) = Mint.newLiquidityETHAsset(\n            this,\n            factory,\n            creditPositionManager,\n            weth,\n            params\n        );\n    }\n\n    /// @inheritdoc IRouter\n    function newLiquidityETHCollateral(\n        IMint.NewLiquidityETHCollateral calldata params\n    )\n        external\n        payable\n        override\n        onlyOwner\n        returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut)\n    {\n        (assetIn, liquidityOut, id, dueOut) = Mint.newLiquidityETHCollateral(\n            this,\n            factory,\n            creditPositionManager,\n            weth,\n            params\n        );\n    }\n\n    receive() external payable {\n        require(msg.sender == address(weth), \"E615\");\n    }\n\n    /// @inheritdoc IRouter\n    function liquidityGivenAsset(\n        IMint.LiquidityGivenAsset calldata params,\n        bytes32[] calldata _merkleProof\n    )\n        external\n        override\n        onlyWhitelist(_merkleProof)\n        returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut)\n    {\n        (assetIn, liquidityOut, id, dueOut) = Mint.liquidityGivenAsset(this, factory, creditPositionManager, params);\n    }\n\n    /// @inheritdoc IRouter\n    function liquidityGivenAssetETHAsset(\n        IMint.LiquidityGivenAssetETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    )\n        external\n        payable\n        override\n        onlyWhitelist(_merkleProof)\n        returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut)\n    {\n        (assetIn, liquidityOut, id, dueOut) = Mint.liquidityGivenAssetETHAsset(\n            this,\n            factory,\n            creditPositionManager,\n            weth,\n            params\n        );\n    }\n\n    /// @inheritdoc IRouter\n    function liquidityGivenAssetETHCollateral(\n        IMint.LiquidityGivenAssetETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    )\n        external\n        payable\n        override\n        onlyWhitelist(_merkleProof)\n        returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut)\n    {\n        (assetIn, liquidityOut, id, dueOut) = Mint.liquidityGivenAssetETHCollateral(\n            this,\n            factory,\n            creditPositionManager,\n            weth,\n            params\n        );\n    }\n\n    /// @inheritdoc IRouter\n    function liquidityGivenCollateral(\n        IMint.LiquidityGivenCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    )\n        external\n        override\n        onlyWhitelist(_merkleProof)\n        returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut)\n    {\n        (assetIn, liquidityOut, id, dueOut) = Mint.liquidityGivenCollateral(\n            this,\n            factory,\n            creditPositionManager,\n            params\n        );\n    }\n\n    /// @inheritdoc IRouter\n    function liquidityGivenCollateralETHAsset(\n        IMint.LiquidityGivenCollateralETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    )\n        external\n        payable\n        override\n        onlyWhitelist(_merkleProof)\n        returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut)\n    {\n        (assetIn, liquidityOut, id, dueOut) = Mint.liquidityGivenCollateralETHAsset(\n            this,\n            factory,\n            creditPositionManager,\n            weth,\n            params\n        );\n    }\n\n    /// @inheritdoc IRouter\n    function liquidityGivenCollateralETHCollateral(\n        IMint.LiquidityGivenCollateralETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    )\n        external\n        payable\n        override\n        onlyWhitelist(_merkleProof)\n        returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut)\n    {\n        (assetIn, liquidityOut, id, dueOut) = Mint.liquidityGivenCollateralETHCollateral(\n            this,\n            factory,\n            creditPositionManager,\n            weth,\n            params\n        );\n    }\n\n    /// @inheritdoc IRouter\n    function removeLiquidity(\n        IBurn.RemoveLiquidity calldata params,\n        bytes32[] calldata _merkleProof\n    ) external override onlyWhitelist(_merkleProof) returns (uint256 assetOut, uint128 collateralOut) {\n        (assetOut, collateralOut) = Burn.removeLiquidity(factory, creditPositionManager, params);\n    }\n\n    /// @inheritdoc IRouter\n    function removeLiquidityETHAsset(\n        IBurn.RemoveLiquidityETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external override onlyWhitelist(_merkleProof) returns (uint256 assetOut, uint128 collateralOut) {\n        (assetOut, collateralOut) = Burn.removeLiquidityETHAsset(factory, creditPositionManager, weth, params);\n    }\n\n    /// @inheritdoc IRouter\n    function removeLiquidityETHCollateral(\n        IBurn.RemoveLiquidityETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external override onlyWhitelist(_merkleProof) returns (uint256 assetOut, uint128 collateralOut) {\n        (assetOut, collateralOut) = Burn.removeLiquidityETHCollateral(factory, creditPositionManager, weth, params);\n    }\n\n    /// @inheritdoc IRouter\n    function lendGivenPercent(\n        ILend.LendGivenPercent calldata params,\n        bytes32[] calldata _merkleProof\n    ) external override onlyWhitelist(_merkleProof) returns (uint256 assetIn, IPair.Claims memory claimsOut) {\n        (assetIn, claimsOut) = Lend.lendGivenPercent(this, factory, creditPositionManager, params);\n    }\n\n    /// @inheritdoc IRouter\n    function lendGivenPercentETHAsset(\n        ILend.LendGivenPercentETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external payable override onlyWhitelist(_merkleProof) returns (uint256 assetIn, IPair.Claims memory claimsOut) {\n        (assetIn, claimsOut) = Lend.lendGivenPercentETHAsset(this, factory, creditPositionManager, weth, params);\n    }\n\n    /// @inheritdoc IRouter\n    function lendGivenPercentETHCollateral(\n        ILend.LendGivenPercentETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external override onlyWhitelist(_merkleProof) returns (uint256 assetIn, IPair.Claims memory claimsOut) {\n        (assetIn, claimsOut) = Lend.lendGivenPercentETHCollateral(this, factory, creditPositionManager, weth, params);\n    }\n\n    /// @inheritdoc IRouter\n    function collect(\n        IWithdraw.Collect calldata params,\n        bytes32[] calldata _merkleProof\n    ) external override onlyWhitelist(_merkleProof) returns (IPair.Tokens memory tokensOut) {\n        tokensOut = Withdraw.collect(factory, creditPositionManager, params);\n    }\n\n    /// @inheritdoc IRouter\n    function collectETHAsset(\n        IWithdraw.CollectETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external override onlyWhitelist(_merkleProof) returns (IPair.Tokens memory tokensOut) {\n        tokensOut = Withdraw.collectETHAsset(factory, creditPositionManager, weth, params);\n    }\n\n    /// @inheritdoc IRouter\n    function collectETHCollateral(\n        IWithdraw.CollectETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external override onlyWhitelist(_merkleProof) returns (IPair.Tokens memory tokensOut) {\n        tokensOut = Withdraw.collectETHCollateral(factory, creditPositionManager, weth, params);\n    }\n\n    /// @inheritdoc IRouter\n    function borrowGivenPercent(\n        IBorrow.BorrowGivenPercent calldata params,\n        bytes32[] calldata _merkleProof\n    ) external override onlyWhitelist(_merkleProof) returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut) {\n        (assetOut, id, dueOut) = Borrow.borrowGivenPercent(this, factory, creditPositionManager, params);\n    }\n\n    /// @inheritdoc IRouter\n    function borrowGivenPercentETHAsset(\n        IBorrow.BorrowGivenPercentETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external override onlyWhitelist(_merkleProof) returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut) {\n        (assetOut, id, dueOut) = Borrow.borrowGivenPercentETHAsset(this, factory, creditPositionManager, weth, params);\n    }\n\n    /// @inheritdoc IRouter\n    function borrowGivenPercentETHCollateral(\n        IBorrow.BorrowGivenPercentETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    )\n        external\n        payable\n        override\n        onlyWhitelist(_merkleProof)\n        returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut)\n    {\n        (assetOut, id, dueOut) = Borrow.borrowGivenPercentETHCollateral(\n            this,\n            factory,\n            creditPositionManager,\n            weth,\n            params\n        );\n    }\n\n    /// @inheritdoc IRouter\n    function repay(\n        IPay.Repay calldata params,\n        bytes32[] calldata _merkleProof\n    )\n        external\n        override\n        onlyWhitelist(_merkleProof)\n        returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid)\n    {\n        (assetIn, collateralOut, creditPositionFullyPaid) = Pay.pay(factory, creditPositionManager, params);\n    }\n\n    /// @inheritdoc IRouter\n    function repayETHAsset(\n        IPay.RepayETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    )\n        external\n        payable\n        override\n        onlyWhitelist(_merkleProof)\n        returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid)\n    {\n        (assetIn, collateralOut, creditPositionFullyPaid) = Pay.payETHAsset(\n            factory,\n            creditPositionManager,\n            weth,\n            params\n        );\n    }\n\n    /// @inheritdoc IRouter\n    function repayETHCollateral(\n        IPay.RepayETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    )\n        external\n        override\n        onlyWhitelist(_merkleProof)\n        returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid)\n    {\n        (assetIn, collateralOut, creditPositionFullyPaid) = Pay.payETHCollateral(\n            factory,\n            creditPositionManager,\n            weth,\n            params\n        );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        Callback\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc ICreditMintCallback\n    function creditMintCallback(uint256 assetIn, uint112 collateralIn, bytes calldata data) external override {\n        (IERC20 asset, IERC20 collateral, address assetFrom, address collateralFrom) = abi.decode(\n            data,\n            (IERC20, IERC20, address, address)\n        );\n        IPair pair = getPairAndVerify(asset, collateral);\n        callbackTransfer(asset, assetFrom, pair, assetIn);\n        callbackTransfer(collateral, collateralFrom, pair, collateralIn);\n    }\n\n    /// @inheritdoc ICreditLendCallback\n    function creditLendCallback(uint256 assetIn, bytes calldata data) external override {\n        (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n        IPair pair = getPairAndVerify(asset, collateral);\n        callbackTransfer(asset, from, pair, assetIn);\n    }\n\n    /// @inheritdoc ICreditBorrowCallback\n    function creditBorrowCallback(uint112 collateralIn, bytes calldata data) external override {\n        (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n        IPair pair = getPairAndVerify(asset, collateral);\n        callbackTransfer(collateral, from, pair, collateralIn);\n    }\n\n    /// @inheritdoc ICreditPayCallback\n    function creditPayCallback(uint128 assetIn, bytes calldata data) external override {\n        (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n        IPair pair = getPairAndVerify(asset, collateral);\n        callbackTransfer(asset, from, pair, assetIn);\n    }\n\n    function getPairAndVerify(IERC20 asset, IERC20 collateral) private view returns (IPair pair) {\n        pair = factory.getPair(asset, collateral);\n        require(msg.sender == address(pair), \"E701\");\n    }\n\n    function callbackTransfer(IERC20 token, address from, IPair pair, uint256 tokenIn) private {\n        if (from == address(this)) {\n            // slither-disable-next-line arbitrary-send-eth\n            weth.deposit{ value: tokenIn }();\n            // slither-disable-next-line arbitrary-send-erc20\n            token.safeTransfer(pair, tokenIn);\n        } else {\n            // slither-disable-next-line arbitrary-send-erc20\n            token.safeTransferFrom(from, pair, tokenIn);\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        IERC 721 logic\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IERC721Receiver\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/periphery/interfaces/IBorrow.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { IRouter } from \"../interfaces/IRouter.sol\";\n\n/// @title Borrow interface\ninterface IBorrow {\n    struct BorrowGivenPercent {\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address assetTo;\n        address dueTo;\n        uint112 assetOut;\n        uint40 percent;\n        uint112 maxDebt;\n        uint112 maxCollateral;\n        uint256 deadline;\n    }\n\n    struct BorrowGivenPercentETHAsset {\n        IERC20 collateral;\n        uint256 maturity;\n        address payable assetTo;\n        address dueTo;\n        uint112 assetOut;\n        uint40 percent;\n        uint112 maxDebt;\n        uint112 maxCollateral;\n        uint256 deadline;\n    }\n\n    struct BorrowGivenPercentETHCollateral {\n        IERC20 asset;\n        uint256 maturity;\n        address assetTo;\n        address dueTo;\n        uint112 assetOut;\n        uint40 percent;\n        uint112 maxDebt;\n        uint256 deadline;\n    }\n\n    struct _BorrowGivenPercent {\n        IRouter router;\n        IFactory factory;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address from;\n        address assetTo;\n        address dueTo;\n        uint112 assetOut;\n        uint40 percent;\n        uint112 maxDebt;\n        uint112 maxCollateral;\n        uint256 deadline;\n    }\n\n    struct _Borrow {\n        IRouter router;\n        IPair pair;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address from;\n        address assetTo;\n        address dueTo;\n        uint112 xDecrease;\n        uint112 yIncrease;\n        uint112 zIncrease;\n        uint256 deadline;\n    }\n}\n"
    },
    "contracts/periphery/interfaces/IBurn.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\n\n/// @title Burn interface\ninterface IBurn {\n    struct RemoveLiquidity {\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address assetTo;\n        address collateralTo;\n        uint256 creditPositionId;\n    }\n\n    struct RemoveLiquidityETHAsset {\n        IERC20 collateral;\n        uint256 maturity;\n        address payable assetTo;\n        address collateralTo;\n        uint256 creditPositionId;\n    }\n\n    struct RemoveLiquidityETHCollateral {\n        IERC20 asset;\n        uint256 maturity;\n        address assetTo;\n        address payable collateralTo;\n        uint256 creditPositionId;\n    }\n\n    struct _RemoveLiquidity {\n        IFactory factory;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address assetTo;\n        address collateralTo;\n        uint256 creditPositionId;\n    }\n}\n"
    },
    "contracts/periphery/interfaces/IDeployPair.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IDeployPair {\n    struct DeployPair {\n        IERC20 asset;\n        IERC20 collateral;\n    }\n}\n"
    },
    "contracts/periphery/interfaces/ILend.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { IRouter } from \"../interfaces/IRouter.sol\";\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\n\n/// @title Lend interface\ninterface ILend {\n    struct LendGivenPercent {\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address to;\n        uint112 assetIn;\n        uint40 percent;\n        uint128 minLoan;\n        uint128 minCoverage;\n        uint256 deadline;\n    }\n\n    struct LendGivenPercentETHAsset {\n        IERC20 collateral;\n        uint256 maturity;\n        address to;\n        uint40 percent;\n        uint128 minLoan;\n        uint128 minCoverage;\n        uint256 deadline;\n    }\n\n    struct LendGivenPercentETHCollateral {\n        IERC20 asset;\n        uint256 maturity;\n        address to;\n        uint112 assetIn;\n        uint40 percent;\n        uint128 minLoan;\n        uint128 minCoverage;\n        uint256 deadline;\n    }\n\n    struct _LendGivenPercent {\n        IRouter router;\n        IFactory factory;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address from;\n        address to;\n        uint112 assetIn;\n        uint40 percent;\n        uint128 minLoan;\n        uint128 minCoverage;\n        uint256 deadline;\n    }\n\n    struct _Lend {\n        IRouter router;\n        IPair pair;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address from;\n        address to;\n        uint112 xIncrease;\n        uint112 yDecrease;\n        uint112 zDecrease;\n        uint256 deadline;\n    }\n}\n"
    },
    "contracts/periphery/interfaces/IMint.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { IRouter } from \"./IRouter.sol\";\n\n/// @title Mint interface\ninterface IMint {\n    struct NewLiquidity {\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address liquidityTo;\n        address dueTo;\n        uint112 assetIn;\n        uint112 debtIn;\n        uint112 collateralIn;\n        uint256 deadline;\n    }\n\n    struct NewLiquidityETHAsset {\n        IERC20 collateral;\n        uint256 maturity;\n        address liquidityTo;\n        address dueTo;\n        uint112 debtIn;\n        uint112 collateralIn;\n        uint256 deadline;\n    }\n\n    struct NewLiquidityETHCollateral {\n        IERC20 asset;\n        uint256 maturity;\n        address liquidityTo;\n        address dueTo;\n        uint112 assetIn;\n        uint112 debtIn;\n        uint256 deadline;\n    }\n\n    struct _NewLiquidity {\n        IRouter router;\n        IFactory factory;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address assetFrom;\n        address collateralFrom;\n        address liquidityTo;\n        address dueTo;\n        uint112 assetIn;\n        uint112 debtIn;\n        uint112 collateralIn;\n        uint256 deadline;\n    }\n\n    struct LiquidityGivenAsset {\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address liquidityTo;\n        address dueTo;\n        uint112 assetIn;\n        uint256 minLiquidity;\n        uint112 maxDebt;\n        uint112 maxCollateral;\n        uint256 deadline;\n    }\n\n    struct LiquidityGivenAssetETHAsset {\n        IERC20 collateral;\n        uint256 maturity;\n        address liquidityTo;\n        address dueTo;\n        uint256 minLiquidity;\n        uint112 maxDebt;\n        uint112 maxCollateral;\n        uint256 deadline;\n    }\n\n    struct LiquidityGivenAssetETHCollateral {\n        IERC20 asset;\n        uint256 maturity;\n        address liquidityTo;\n        address dueTo;\n        uint112 assetIn;\n        uint256 minLiquidity;\n        uint112 maxDebt;\n        uint256 deadline;\n    }\n\n    struct _LiquidityGivenAsset {\n        IRouter router;\n        IFactory factory;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address assetFrom;\n        address collateralFrom;\n        address liquidityTo;\n        address dueTo;\n        uint112 assetIn;\n        uint256 minLiquidity;\n        uint112 maxDebt;\n        uint112 maxCollateral;\n        uint256 deadline;\n    }\n\n    struct LiquidityGivenCollateral {\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address liquidityTo;\n        address dueTo;\n        uint112 collateralIn;\n        uint256 minLiquidity;\n        uint112 maxAsset;\n        uint112 maxDebt;\n        uint256 deadline;\n    }\n\n    struct LiquidityGivenCollateralETHAsset {\n        IERC20 collateral;\n        uint256 maturity;\n        address liquidityTo;\n        address dueTo;\n        uint112 collateralIn;\n        uint256 minLiquidity;\n        uint112 maxDebt;\n        uint256 deadline;\n    }\n\n    struct LiquidityGivenCollateralETHCollateral {\n        IERC20 asset;\n        uint256 maturity;\n        address liquidityTo;\n        address dueTo;\n        uint256 minLiquidity;\n        uint112 maxAsset;\n        uint112 maxDebt;\n        uint256 deadline;\n    }\n\n    struct _LiquidityGivenCollateral {\n        IRouter router;\n        IFactory factory;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address assetFrom;\n        address collateralFrom;\n        address liquidityTo;\n        address dueTo;\n        uint112 collateralIn;\n        uint256 minLiquidity;\n        uint112 maxAsset;\n        uint112 maxDebt;\n        uint256 deadline;\n    }\n\n    struct _Mint {\n        IRouter router;\n        IPair pair;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address assetFrom;\n        address collateralFrom;\n        address liquidityTo;\n        address dueTo;\n        uint112 xIncrease;\n        uint112 yIncrease;\n        uint112 zIncrease;\n        uint256 deadline;\n    }\n}\n"
    },
    "contracts/periphery/interfaces/IPay.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\n\n/// @title Pay interface\ninterface IPay {\n    struct Repay {\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address collateralTo;\n        uint256[] creditPositionIds;\n        uint112[] maxAssetsIn;\n        uint256 deadline;\n    }\n\n    struct RepayETHAsset {\n        IERC20 collateral;\n        uint256 maturity;\n        address collateralTo;\n        uint256[] creditPositionIds;\n        uint112[] maxAssetsIn;\n        uint256 deadline;\n    }\n\n    struct RepayETHCollateral {\n        IERC20 asset;\n        uint256 maturity;\n        address payable collateralTo;\n        uint256[] creditPositionIds;\n        uint112[] maxAssetsIn;\n        uint256 deadline;\n    }\n\n    struct _Repay {\n        IFactory factory;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address from;\n        address collateralTo;\n        uint256[] creditPositionIds;\n        uint112[] maxAssetsIn;\n        uint256 deadline;\n    }\n}\n"
    },
    "contracts/periphery/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { ICreditBorrowCallback } from \"../../core/interfaces/callback/ICreditBorrowCallback.sol\";\nimport { ICreditMintCallback } from \"../../core/interfaces/callback/ICreditMintCallback.sol\";\nimport { ICreditLendCallback } from \"../../core/interfaces/callback/ICreditLendCallback.sol\";\nimport { ICreditPayCallback } from \"../../core/interfaces/callback/ICreditPayCallback.sol\";\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { IBorrow } from \"./IBorrow.sol\";\nimport { IBurn } from \"./IBurn.sol\";\nimport { IClaim } from \"../../tokens/interfaces/IClaim.sol\";\nimport { ICreditPositionManager } from \"../../tokens/interfaces/ICreditPositionManager.sol\";\nimport { IDeployPair } from \"./IDeployPair.sol\";\nimport { IDue } from \"../../tokens/interfaces/IDue.sol\";\nimport { ILend } from \"./ILend.sol\";\nimport { ILiquidity } from \"../../tokens/interfaces/ILiquidity.sol\";\nimport { IMint } from \"./IMint.sol\";\nimport { IPay } from \"./IPay.sol\";\nimport { IWETH } from \"./IWETH.sol\";\nimport { IWithdraw } from \"./IWithdraw.sol\";\n\n/// @title Credit Router Interface\ninterface IRouter is ICreditMintCallback, ICreditLendCallback, ICreditBorrowCallback, ICreditPayCallback, IDeployPair {\n    struct Receipt {\n        ILiquidity liquidity;\n        IClaim loanInterest;\n        IClaim loanPrincipal;\n        IClaim coverageInterest;\n        IClaim coveragePrincipal;\n        IDue lockedDebt;\n    }\n\n    /* ===== VIEW ===== */\n\n    /// @dev Return the address of the factory contract used by this contract.\n    /// @return The address of the factory contract.\n    function factory() external returns (IFactory);\n\n    /// @dev Return the address of the Wrapped ETH contract.\n    /// @return The address of WETH.\n    function weth() external returns (IWETH);\n\n    /// @dev Return the address of the CreditPosition contract.\n    /// @return The address of CreditPosition.\n    function creditPositionManager() external returns (ICreditPositionManager);\n\n    /// @dev Create pair contracts.\n    /// @param params The parameters for this function found in IDeployPair interface.\n    function deployPair(IDeployPair.DeployPair calldata params) external;\n\n    /// @dev Calls the mint function and creates a new pool.\n    /// @dev If the pair does not exist, creates a new pair first.\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IMint interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function newLiquidity(\n        IMint.NewLiquidity calldata params\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the mint function and creates a new pool.\n    /// @dev If the pair does not exist, creates a new pair first.\n    /// @dev The asset deposited is ETH which will be wrapped as WETH.\n    /// @dev Msg.value is the assetIn amount.\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IMint interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function newLiquidityETHAsset(\n        IMint.NewLiquidityETHAsset calldata params\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the mint function and creates a new pool.\n    /// @dev If the pair does not exist, creates a new pair first.\n    /// @dev The collateral locked is ETH which will be wrapped as WETH.\n    /// @dev Msg.value is the collateralIn amount.\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IMint interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function newLiquidityETHCollateral(\n        IMint.NewLiquidityETHCollateral calldata params\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IMint interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function liquidityGivenAsset(\n        IMint.LiquidityGivenAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\n    /// @dev The asset deposited is ETH which will be wrapped as WETH.\n    /// @dev Msg.value is the assetIn amount.\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IMint interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function liquidityGivenAssetETHAsset(\n        IMint.LiquidityGivenAssetETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\n    /// @dev The collateral ERC20 is the WETH contract.\n    /// @dev The collateral locked is ETH which will be wrapped as WETH.\n    /// @dev Msg.value is the maxCollateral amount. Any excess ETH will be returned to Msg.sender.\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IMint interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function liquidityGivenAssetETHCollateral(\n        IMint.LiquidityGivenAssetETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IMint interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function liquidityGivenCollateral(\n        IMint.LiquidityGivenCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\n    /// @dev The asset deposited is ETH which will be wrapped as WETH.\n    /// @dev Msg.value is the assetIn amount.\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IMint interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function liquidityGivenCollateralETHAsset(\n        IMint.LiquidityGivenCollateralETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the mint function and add more liquidity to an existing pool.\n    /// @dev The collateral ERC20 is the WETH contract.\n    /// @dev The collateral locked is ETH which will be wrapped as WETH.\n    /// @dev Msg.value is the maxCollateral amount. Any excess ETH will be returned to Msg.sender.\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IMint interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return liquidityOut The amount of liquidity balance received by liquidityTo.\n    /// @return id The array index of the locked debt received by dueTo.\n    /// @return dueOut The locked debt received by dueTo.\n    function liquidityGivenCollateralETHCollateral(\n        IMint.LiquidityGivenCollateralETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external payable returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the burn funtion and withdraw liquiidty from a pool.\n    /// @param params The parameters for this function found in IBurn interface.\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\n    /// @return collateralOut The amount of collateral ERC20 received by collateralTo.\n    function removeLiquidity(\n        IBurn.RemoveLiquidity calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint256 assetOut, uint128 collateralOut);\n\n    /// @dev Calls the burn funtion and withdraw liquiidty from a pool.\n    /// @dev The asset received is ETH which will be unwrapped from WETH.\n    /// @param params The parameters for this function found in IBurn interface.\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\n    /// @return collateralOut The amount of collateral ERC20 received by collateralTo.\n    function removeLiquidityETHAsset(\n        IBurn.RemoveLiquidityETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint256 assetOut, uint128 collateralOut);\n\n    /// @dev Calls the burn funtion and withdraw liquiidty from a pool.\n    /// @dev The collateral received is ETH which will be unwrapped from WETH.\n    /// @param params The parameters for this function found in IBurn interface.\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\n    /// @return collateralOut The amount of collateral ERC20 received by collateralTo.\n    function removeLiquidityETHCollateral(\n        IBurn.RemoveLiquidityETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint256 assetOut, uint128 collateralOut);\n\n    /// @dev Calls the lend function and deposit asset into a pool.\n    /// @dev Calls given percentage ratio of loan and coverage.\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in ILend interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return claimsOut The amount of loan ERC20 and coverage ERC20 received by loanTo and coverageTo.\n    function lendGivenPercent(\n        ILend.LendGivenPercent calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint256 assetIn, IPair.Claims memory claimsOut);\n\n    /// @dev Calls the lend function and deposit asset into a pool.\n    /// @dev Calls given percentage ratio of loan and coverage.\n    /// @dev The asset deposited is ETH which will be wrapped as WETH.\n    /// @param params The parameters for this function found in ILend interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return claimsOut The amount of loan ERC20 and coverage ERC20 received by loanTo and coverageTo.\n    function lendGivenPercentETHAsset(\n        ILend.LendGivenPercentETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external payable returns (uint256 assetIn, IPair.Claims memory claimsOut);\n\n    /// @dev Calls the lend function and deposit asset into a pool.\n    /// @dev Calls given percentage ratio of loan and coverage.\n    /// @dev Must have the asset ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in ILend interface.\n    /// @return assetIn The amount of asset ERC20 deposited.\n    /// @return claimsOut The amount of loan ERC20 and coverage ERC20 received by loanTo and coverageTo.\n    function lendGivenPercentETHCollateral(\n        ILend.LendGivenPercentETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint256 assetIn, IPair.Claims memory claimsOut);\n\n    /// @dev Calls the withdraw function and withdraw asset and collateral from a pool.\n    /// @param params The parameters for this function found in IWithdraw interface.\n    /// @return tokensOut The amount of asset ERC20 and collateral ERC20 received by assetTo and collateralTo.\n    function collect(\n        IWithdraw.Collect calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (IPair.Tokens memory tokensOut);\n\n    /// @dev Calls the withdraw function and withdraw asset and collateral from a pool.\n    /// @dev The asset received is ETH which will be unwrapped from WETH.\n    /// @param params The parameters for this function found in IWithdraw interface.\n    /// @return tokensOut The amount of asset ERC20 and collateral ERC20 received by assetTo and collateralTo.\n    function collectETHAsset(\n        IWithdraw.CollectETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (IPair.Tokens memory tokensOut);\n\n    /// @dev Calls the withdraw function and withdraw asset and collateral from a pool.\n    /// @dev The collateral received is ETH which will be unwrapped from WETH.\n    /// @param params The parameters for this function found in IWithdraw interface.\n    /// @return tokensOut The amount of asset ERC20 and collateral ERC20 received by assetTo and collateralTo.\n    function collectETHCollateral(\n        IWithdraw.CollectETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (IPair.Tokens memory tokensOut);\n\n    /// @dev Calls the borrow function and borrow asset from a pool and locking collateral into the pool.\n    /// @dev Calls given percentage ratio of debt and collateral.\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IBorrow interface.\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\n    /// @return id The token id of locked debt ERC721 received by dueTo.\n    /// @return dueOut The locked debt ERC721 received by dueTo.\n    function borrowGivenPercent(\n        IBorrow.BorrowGivenPercent calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the borrow function and borrow asset from a pool and locking collateral into the pool.\n    /// @dev Calls given percentage ratio of debt and collateral.\n    /// @dev Must have the collateral ERC20 approve this contract before calling this function.\n    /// @param params The parameters for this function found in IBorrow interface.\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\n    /// @return id The token id of locked debt ERC721 received by dueTo.\n    /// @return dueOut The locked debt ERC721 received by dueTo.\n    function borrowGivenPercentETHAsset(\n        IBorrow.BorrowGivenPercentETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the borrow function and borrow asset from a pool and locking collateral into the pool.\n    /// @dev Calls given percentage ratio of debt and collateral.\n    /// @dev The collateral locked is ETH which will be wrapped as WETH.\n    /// @param params The parameters for this function found in IBorrow interface.\n    /// @return assetOut The amount of asset ERC20 received by assetTo.\n    /// @return id The token id of locked debt ERC721 received by dueTo.\n    /// @return dueOut The locked debt ERC721 received by dueTo.\n    function borrowGivenPercentETHCollateral(\n        IBorrow.BorrowGivenPercentETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external payable returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut);\n\n    /// @dev Calls the pay function and withdraw collateral from a pool given debt is paid or being paid.\n    /// @dev If there is debt being paid, must have the asset ERC20 approve this contract before calling this function.\n    /// @dev Possible to pay debt of locked debt not owned by msg.sender, which means no collateral is withdraw.\n    /// @param params The parameters for this function found in IPay interface.\n    /// @return assetIn The total amount of asset ERC20 paid.\n    /// @return collateralOut The total amount of collateral ERC20 receceived by to;\n    /// @return creditPositionFullyPaid The array of credit position id that is fully paid.\n    function repay(\n        IPay.Repay calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid);\n\n    /// @dev Calls the pay function and withdraw collateral from a pool given debt is paid or being paid.\n    /// @dev The asset being paid is ETH which will be wrapped as WETH.\n    /// @dev Possible to pay debt of locked debt not owned by msg.sender, which means no collateral is withdraw.\n    /// @param params The parameters for this function found in IPay interface.\n    /// @return assetIn The total amount of asset ERC20 paid.\n    /// @return collateralOut The total amount of collateral ERC20 receceived by to;\n    /// @return creditPositionFullyPaid The array of credit position id that is fully paid.\n    function repayETHAsset(\n        IPay.RepayETHAsset calldata params,\n        bytes32[] calldata _merkleProof\n    ) external payable returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid);\n\n    /// @dev Calls the pay function and withdraw collateral from a pool given debt is paid or being paid.\n    /// @dev The collateral received is ETH which will be unwrapped from WETH.\n    /// @dev If there is debt being paid, must have the asset ERC20 approve this contract before calling this function.\n    /// @dev Possible to pay debt of locked debt not owned by msg.sender, which means no collateral is withdraw.\n    /// @param params The parameters for this function found in IPay interface.\n    /// @return assetIn The total amount of asset ERC20 paid.\n    /// @return collateralOut The total amount of collateral ERC20 receceived by to;\n    /// @return creditPositionFullyPaid The array of credit position id that is fully paid.\n    function repayETHCollateral(\n        IPay.RepayETHCollateral calldata params,\n        bytes32[] calldata _merkleProof\n    ) external returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid);\n}\n"
    },
    "contracts/periphery/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title WETH9 Interface\ninterface IWETH is IERC20 {\n    /* ===== UPDATE ===== */\n\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/periphery/interfaces/IWithdraw.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\n\n/// @title Withdraw interface\ninterface IWithdraw {\n    struct Collect {\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address assetTo;\n        address collateralTo;\n        uint256 creditPositionId;\n    }\n\n    struct CollectETHAsset {\n        IERC20 collateral;\n        uint256 maturity;\n        address payable assetTo;\n        address collateralTo;\n        uint256 creditPositionId;\n    }\n\n    struct CollectETHCollateral {\n        IERC20 asset;\n        uint256 maturity;\n        address assetTo;\n        address payable collateralTo;\n        uint256 creditPositionId;\n    }\n\n    struct _Collect {\n        IFactory factory;\n        IERC20 asset;\n        IERC20 collateral;\n        uint256 maturity;\n        address assetTo;\n        address collateralTo;\n        uint256 creditPositionId;\n    }\n}\n"
    },
    "contracts/periphery/libraries/Borrow.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { ICreditPositionManager } from \"../../tokens/interfaces/ICreditPositionManager.sol\";\nimport { IRouter } from \"../interfaces/IRouter.sol\";\nimport { IWETH } from \"../interfaces/IWETH.sol\";\nimport { IBorrow } from \"../interfaces/IBorrow.sol\";\nimport { BorrowMath } from \"./BorrowMath.sol\";\nimport { MsgValue } from \"./MsgValue.sol\";\nimport { ETH } from \"./ETH.sol\";\n\nlibrary Borrow {\n    using BorrowMath for IPair;\n\n    function borrowGivenPercent(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IBorrow.BorrowGivenPercent calldata params\n    ) external returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut) {\n        (assetOut, id, dueOut) = _borrowGivenPercent(\n            creditPositionManager,\n            IBorrow._BorrowGivenPercent(\n                router,\n                factory,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                params.assetTo,\n                params.dueTo,\n                params.assetOut,\n                params.percent,\n                params.maxDebt,\n                params.maxCollateral,\n                params.deadline\n            )\n        );\n    }\n\n    function borrowGivenPercentETHAsset(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWETH weth,\n        IBorrow.BorrowGivenPercentETHAsset calldata params\n    ) external returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut) {\n        (assetOut, id, dueOut) = _borrowGivenPercent(\n            creditPositionManager,\n            IBorrow._BorrowGivenPercent(\n                router,\n                factory,\n                weth,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                address(this),\n                params.dueTo,\n                params.assetOut,\n                params.percent,\n                params.maxDebt,\n                params.maxCollateral,\n                params.deadline\n            )\n        );\n\n        weth.withdraw(assetOut);\n        ETH.transfer(params.assetTo, assetOut);\n    }\n\n    function borrowGivenPercentETHCollateral(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWETH weth,\n        IBorrow.BorrowGivenPercentETHCollateral calldata params\n    ) external returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut) {\n        uint112 maxCollateral = MsgValue.getUint112();\n\n        (assetOut, id, dueOut) = _borrowGivenPercent(\n            creditPositionManager,\n            IBorrow._BorrowGivenPercent(\n                router,\n                factory,\n                params.asset,\n                weth,\n                params.maturity,\n                address(this),\n                params.assetTo,\n                params.dueTo,\n                params.assetOut,\n                params.percent,\n                params.maxDebt,\n                maxCollateral,\n                params.deadline\n            )\n        );\n\n        if (maxCollateral > dueOut.collateral) {\n            uint256 excess = maxCollateral;\n            unchecked {\n                excess -= dueOut.collateral;\n            }\n            ETH.transfer(payable(msg.sender), excess);\n        }\n    }\n\n    function _borrowGivenPercent(\n        ICreditPositionManager creditPositionManager,\n        IBorrow._BorrowGivenPercent memory params\n    ) private returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut) {\n        require(params.percent <= 0x100000000, \"E505\");\n\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), \"E501\");\n\n        (uint112 xDecrease, uint112 yIncrease, uint112 zIncrease) = pair.givenPercent(\n            params.maturity,\n            params.assetOut,\n            params.percent\n        );\n\n        (assetOut, id, dueOut) = _borrow(\n            creditPositionManager,\n            IBorrow._Borrow(\n                params.router,\n                pair,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.from,\n                params.assetTo,\n                params.dueTo,\n                xDecrease,\n                yIncrease,\n                zIncrease,\n                params.deadline\n            )\n        );\n\n        require(dueOut.debt <= params.maxDebt, \"E512\");\n        require(dueOut.collateral <= params.maxCollateral, \"E513\");\n    }\n\n    function _borrow(\n        ICreditPositionManager creditPositionManager,\n        IBorrow._Borrow memory params\n    ) private returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut) {\n        require(params.deadline >= block.timestamp, \"E504\");\n        require(params.maturity > block.timestamp, \"E508\");\n\n        (assetOut, id, dueOut) = params.pair.borrow(\n            IPair.BorrowParam(\n                params.maturity,\n                params.assetTo,\n                address(this),\n                params.xDecrease,\n                params.yIncrease,\n                params.zIncrease,\n                bytes(abi.encode(params.asset, params.collateral, params.from))\n            )\n        );\n\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = id;\n\n        ICreditPositionManager.MintParams memory mintParams = ICreditPositionManager.MintParams({\n            pair: params.pair,\n            maturity: params.maturity,\n            positionType: ICreditPositionManager.PositionType.DEBT,\n            amounts: amounts,\n            recipient: params.dueTo\n        });\n\n        creditPositionManager.mint(mintParams);\n    }\n}\n"
    },
    "contracts/periphery/libraries/BorrowMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { Math } from \"../../core/libraries/Math.sol\";\nimport { FullMath } from \"../../core/libraries/FullMath.sol\";\nimport { SafeCast } from \"../../core/libraries/SafeCast.sol\";\nimport { SquareRoot } from \"./SquareRoot.sol\";\nimport { ConstantProduct } from \"./ConstantProduct.sol\";\n\nlibrary BorrowMath {\n    using Math for uint256;\n    using SquareRoot for uint256;\n    using FullMath for uint256;\n    using ConstantProduct for IPair;\n    using ConstantProduct for ConstantProduct.CP;\n    using SafeCast for uint256;\n\n    uint256 private constant BASE = 0x10000000000;\n\n    function givenPercent(\n        IPair pair,\n        uint256 maturity,\n        uint112 assetOut,\n        uint40 percent\n    ) internal view returns (uint112 xDecrease, uint112 yIncrease, uint112 zIncrease) {\n        ConstantProduct.CP memory cp = pair.get(maturity);\n\n        xDecrease = getX(pair, maturity, assetOut);\n\n        uint256 xReserve = cp.x;\n        xReserve -= xDecrease;\n\n        if (percent <= 0x80000000) {\n            uint256 yMin = xDecrease;\n            yMin *= cp.y;\n            yMin = yMin.divUp(xReserve);\n            yMin = yMin.shiftRightUp(4);\n\n            uint256 yMid = cp.y;\n            yMid *= cp.y;\n            yMid = yMid.mulDivUp(cp.x, xReserve);\n            yMid = yMid.sqrtUp();\n            yMid -= cp.y;\n\n            uint256 _yIncrease = yMid;\n            _yIncrease -= yMin;\n            _yIncrease *= percent;\n            _yIncrease = _yIncrease.shiftRightUp(31);\n            _yIncrease += yMin;\n            yIncrease = _yIncrease.toUint112();\n\n            uint256 yReserve = cp.y;\n            yReserve += _yIncrease;\n\n            uint256 zReserve = cp.x;\n            zReserve *= cp.y;\n            uint256 denominator = xReserve;\n            denominator *= yReserve;\n            zReserve = zReserve.mulDivUp(cp.z, denominator);\n\n            uint256 _zIncrease = zReserve;\n            _zIncrease -= cp.z;\n            zIncrease = _zIncrease.toUint112();\n        } else {\n            percent = 0x100000000 - percent;\n\n            uint256 zMid = cp.z;\n            zMid *= cp.z;\n            zMid = zMid.mulDivUp(cp.x, xReserve);\n            zMid = zMid.sqrtUp();\n            zMid -= cp.z;\n\n            uint256 _zIncrease = zMid;\n            _zIncrease *= percent;\n            _zIncrease = _zIncrease.shiftRightUp(31);\n            zIncrease = _zIncrease.toUint112();\n\n            uint256 zReserve = cp.z;\n            zReserve += _zIncrease;\n\n            uint256 yReserve = cp.x;\n            yReserve *= cp.z;\n            uint256 denominator = xReserve;\n            denominator *= zReserve;\n            yReserve = yReserve.mulDivUp(cp.y, denominator);\n\n            uint256 _yIncrease = yReserve;\n            _yIncrease -= cp.y;\n            yIncrease = _yIncrease.toUint112();\n        }\n    }\n\n    /// Giving x from the assetOut by adding the fee\n    /// @dev xDecrease = (assetOut * (d * totalFee + BASE)) / BASE\n    /// @param pair Pair to get the fee from\n    /// @param maturity Maturity of the pool\n    /// @param assetOut Amount of asset out which include only principal. The pools needs to have enough to pay for fees too\n    function getX(IPair pair, uint256 maturity, uint112 assetOut) private view returns (uint112 xDecrease) {\n        uint256 totalFee = pair.lpFee();\n        totalFee += pair.protocolFee();\n        totalFee += pair.stakingFee();\n\n        uint256 numerator = maturity;\n        numerator -= block.timestamp;\n        numerator *= totalFee;\n        numerator += BASE;\n\n        uint256 _xDecrease = assetOut;\n        _xDecrease *= numerator;\n        _xDecrease = _xDecrease.divUp(BASE);\n        xDecrease = _xDecrease.toUint112();\n    }\n}\n"
    },
    "contracts/periphery/libraries/Burn.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { IRouter } from \"../interfaces/IRouter.sol\";\nimport { ICreditPositionManager } from \"../../tokens/interfaces/ICreditPositionManager.sol\";\nimport { IWETH } from \"../interfaces/IWETH.sol\";\nimport { IBurn } from \"../interfaces/IBurn.sol\";\nimport { ETH } from \"./ETH.sol\";\n\nlibrary Burn {\n    function removeLiquidity(\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IBurn.RemoveLiquidity calldata params\n    ) external returns (uint256 assetOut, uint128 collateralOut) {\n        (assetOut, collateralOut) = _removeLiquidity(\n            creditPositionManager,\n            IBurn._RemoveLiquidity(\n                factory,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.assetTo,\n                params.collateralTo,\n                params.creditPositionId\n            )\n        );\n    }\n\n    function removeLiquidityETHAsset(\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWETH weth,\n        IBurn.RemoveLiquidityETHAsset calldata params\n    ) external returns (uint256 assetOut, uint128 collateralOut) {\n        (assetOut, collateralOut) = _removeLiquidity(\n            creditPositionManager,\n            IBurn._RemoveLiquidity(\n                factory,\n                weth,\n                params.collateral,\n                params.maturity,\n                address(this),\n                params.collateralTo,\n                params.creditPositionId\n            )\n        );\n\n        if (assetOut != 0) {\n            weth.withdraw(assetOut);\n            ETH.transfer(params.assetTo, assetOut);\n        }\n    }\n\n    function removeLiquidityETHCollateral(\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWETH weth,\n        IBurn.RemoveLiquidityETHCollateral calldata params\n    ) external returns (uint256 assetOut, uint128 collateralOut) {\n        (assetOut, collateralOut) = _removeLiquidity(\n            creditPositionManager,\n            IBurn._RemoveLiquidity(\n                factory,\n                params.asset,\n                weth,\n                params.maturity,\n                params.assetTo,\n                address(this),\n                params.creditPositionId\n            )\n        );\n\n        if (collateralOut != 0) {\n            weth.withdraw(collateralOut);\n            ETH.transfer(params.collateralTo, collateralOut);\n        }\n    }\n\n    function _removeLiquidity(\n        ICreditPositionManager creditPositionManager,\n        IBurn._RemoveLiquidity memory params\n    ) private returns (uint256 assetOut, uint128 collateralOut) {\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), \"E501\");\n        require(creditPositionManager.ownerOf(params.creditPositionId) == msg.sender, \"E603\");\n        require(\n            creditPositionManager.getPositionType(params.creditPositionId) ==\n                ICreditPositionManager.PositionType.LIQUIDITY,\n            \"E524\"\n        );\n\n        uint256 liquidityIn = ICreditPositionManager(creditPositionManager).getLiquidity(params.creditPositionId);\n\n        creditPositionManager.burn(params.creditPositionId);\n\n        (assetOut, collateralOut) = pair.burn(\n            IPair.BurnParam(params.maturity, params.assetTo, params.collateralTo, liquidityIn)\n        );\n    }\n}\n"
    },
    "contracts/periphery/libraries/ConstantProduct.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\n\nlibrary ConstantProduct {\n    struct CP {\n        uint112 x;\n        uint112 y;\n        uint112 z;\n    }\n\n    function get(IPair pair, uint256 maturity) internal view returns (CP memory cp) {\n        (uint112 x, uint112 y, uint112 z) = pair.constantProduct(maturity);\n        cp = CP(x, y, z);\n    }\n}\n"
    },
    "contracts/periphery/libraries/ETH.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nlibrary ETH {\n    function transfer(address payable to, uint256 amount) internal {\n        //slither-disable-next-line unchecked-lowlevel\n        (bool success, ) = to.call{ value: amount }(\"\");\n        require(success, \"E521\");\n    }\n}\n"
    },
    "contracts/periphery/libraries/Lend.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { ICreditPositionManager } from \"../../tokens/interfaces/ICreditPositionManager.sol\";\nimport { IRouter } from \"../interfaces/IRouter.sol\";\nimport { IWETH } from \"../interfaces/IWETH.sol\";\nimport { ILend } from \"../interfaces/ILend.sol\";\nimport { LendMath } from \"./LendMath.sol\";\nimport { MsgValue } from \"./MsgValue.sol\";\n\nlibrary Lend {\n    using LendMath for IPair;\n\n    function lendGivenPercent(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        ILend.LendGivenPercent calldata params\n    ) external returns (uint256 assetIn, IPair.Claims memory claimsOut) {\n        (assetIn, claimsOut) = _lendGivenPercent(\n            creditPositionManager,\n            ILend._LendGivenPercent(\n                router,\n                factory,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                params.to,\n                params.assetIn,\n                params.percent,\n                params.minLoan,\n                params.minCoverage,\n                params.deadline\n            )\n        );\n    }\n\n    function lendGivenPercentETHAsset(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWETH weth,\n        ILend.LendGivenPercentETHAsset calldata params\n    ) external returns (uint256 assetIn, IPair.Claims memory claimsOut) {\n        uint112 assetInETH = MsgValue.getUint112();\n\n        (assetIn, claimsOut) = _lendGivenPercent(\n            creditPositionManager,\n            ILend._LendGivenPercent(\n                router,\n                factory,\n                weth,\n                params.collateral,\n                params.maturity,\n                address(this),\n                params.to,\n                assetInETH,\n                params.percent,\n                params.minLoan,\n                params.minCoverage,\n                params.deadline\n            )\n        );\n    }\n\n    function lendGivenPercentETHCollateral(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWETH weth,\n        ILend.LendGivenPercentETHCollateral calldata params\n    ) external returns (uint256 assetIn, IPair.Claims memory claimsOut) {\n        (assetIn, claimsOut) = _lendGivenPercent(\n            creditPositionManager,\n            ILend._LendGivenPercent(\n                router,\n                factory,\n                params.asset,\n                weth,\n                params.maturity,\n                msg.sender,\n                params.to,\n                params.assetIn,\n                params.percent,\n                params.minLoan,\n                params.minCoverage,\n                params.deadline\n            )\n        );\n    }\n\n    function _lendGivenPercent(\n        ICreditPositionManager creditPositionManager,\n        ILend._LendGivenPercent memory params\n    ) private returns (uint256 assetIn, IPair.Claims memory claimsOut) {\n        require(params.percent <= 0x100000000, \"E505\");\n\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), \"E501\");\n\n        (uint112 xIncrease, uint112 yDecrease, uint112 zDecrease) = pair.givenPercent(\n            params.maturity,\n            params.assetIn,\n            params.percent\n        );\n\n        (assetIn, claimsOut) = _lend(\n            creditPositionManager,\n            ILend._Lend(\n                params.router,\n                pair,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.from,\n                params.to,\n                xIncrease,\n                yDecrease,\n                zDecrease,\n                params.deadline\n            )\n        );\n\n        require(uint128(claimsOut.loanInterest) + claimsOut.loanPrincipal >= params.minLoan, \"E514\");\n        require(uint128(claimsOut.coverageInterest) + claimsOut.coveragePrincipal >= params.minCoverage, \"E515\");\n    }\n\n    function _lend(\n        ICreditPositionManager creditPositionManager,\n        ILend._Lend memory params\n    ) private returns (uint256 assetIn, IPair.Claims memory claimsOut) {\n        require(params.deadline >= block.timestamp, \"E504\");\n        require(params.maturity > block.timestamp, \"E508\");\n\n        (assetIn, claimsOut) = params.pair.lend(\n            IPair.LendParam(\n                params.maturity,\n                address(this),\n                address(this),\n                params.xIncrease,\n                params.yDecrease,\n                params.zDecrease,\n                bytes(abi.encode(params.asset, params.collateral, params.from))\n            )\n        );\n\n        uint256[] memory amounts = new uint256[](4);\n        amounts[0] = claimsOut.loanPrincipal;\n        amounts[1] = claimsOut.loanInterest;\n        amounts[2] = claimsOut.coveragePrincipal;\n        amounts[3] = claimsOut.coverageInterest;\n\n        ICreditPositionManager.MintParams memory mintParams = ICreditPositionManager.MintParams({\n            pair: params.pair,\n            maturity: params.maturity,\n            positionType: ICreditPositionManager.PositionType.CREDIT,\n            amounts: amounts,\n            recipient: params.to\n        });\n\n        creditPositionManager.mint(mintParams);\n    }\n}\n"
    },
    "contracts/periphery/libraries/LendMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { Math } from \"../../core/libraries/Math.sol\";\nimport { FullMath } from \"../../core/libraries/FullMath.sol\";\nimport { SafeCast } from \"../../core/libraries/SafeCast.sol\";\nimport { SquareRoot } from \"./SquareRoot.sol\";\nimport { ConstantProduct } from \"./ConstantProduct.sol\";\n\nlibrary LendMath {\n    using Math for uint256;\n    using SquareRoot for uint256;\n    using FullMath for uint256;\n    using ConstantProduct for IPair;\n    using ConstantProduct for ConstantProduct.CP;\n    using SafeCast for uint256;\n\n    uint256 private constant BASE = 0x10000000000;\n\n    function givenPercent(\n        IPair pair,\n        uint256 maturity,\n        uint112 assetIn,\n        uint40 percent\n    ) internal view returns (uint112 xIncrease, uint112 yDecrease, uint112 zDecrease) {\n        ConstantProduct.CP memory cp = pair.get(maturity);\n\n        xIncrease = getX(pair, maturity, assetIn);\n\n        uint256 xReserve = cp.x;\n        xReserve += xIncrease;\n\n        if (percent <= 0x80000000) {\n            uint256 yMin = xIncrease;\n            yMin *= cp.y;\n            yMin /= xReserve;\n            yMin >>= 4;\n\n            uint256 yMid = cp.y;\n            uint256 subtrahend = cp.y;\n            subtrahend *= cp.y;\n            subtrahend = subtrahend.mulDivUp(cp.x, xReserve);\n            subtrahend = subtrahend.sqrtUp();\n            yMid -= subtrahend;\n\n            uint256 _yDecrease = yMid;\n            _yDecrease -= yMin;\n            _yDecrease *= percent;\n            _yDecrease >>= 31;\n            _yDecrease += yMin;\n            yDecrease = _yDecrease.toUint112();\n\n            uint256 yReserve = cp.y;\n            yReserve -= _yDecrease;\n\n            uint256 zReserve = cp.x;\n            zReserve *= cp.y;\n            uint256 denominator = xReserve;\n            denominator *= yReserve;\n            zReserve = zReserve.mulDivUp(cp.z, denominator);\n\n            uint256 _zDecrease = cp.z;\n            _zDecrease -= zReserve;\n            zDecrease = _zDecrease.toUint112();\n        } else {\n            percent = 0x100000000 - percent;\n\n            uint256 zMid = cp.z;\n            uint256 subtrahend = cp.z;\n            subtrahend *= cp.z;\n            subtrahend = subtrahend.mulDivUp(cp.x, xReserve);\n            subtrahend = subtrahend.sqrtUp();\n            zMid -= subtrahend;\n\n            uint256 _zDecrease = zMid;\n            _zDecrease *= percent;\n            _zDecrease >>= 31;\n            zDecrease = _zDecrease.toUint112();\n\n            uint256 zReserve = cp.z;\n            zReserve -= _zDecrease;\n\n            uint256 yReserve = cp.x;\n            yReserve *= cp.z;\n            uint256 denominator = xReserve;\n            denominator *= zReserve;\n            yReserve = yReserve.mulDivUp(cp.y, denominator);\n\n            uint256 _yDecrease = cp.y;\n            _yDecrease -= yReserve;\n            yDecrease = _yDecrease.toUint112();\n        }\n    }\n\n    function getX(IPair pair, uint256 maturity, uint112 assetIn) private view returns (uint112 xIncrease) {\n        uint256 totalFee = pair.lpFee();\n        totalFee += pair.protocolFee();\n        totalFee += pair.stakingFee();\n\n        uint256 denominator = maturity;\n        denominator -= block.timestamp;\n        denominator *= totalFee;\n        denominator += BASE;\n\n        uint256 _xIncrease = assetIn;\n        _xIncrease *= BASE;\n        _xIncrease /= denominator;\n        xIncrease = _xIncrease.toUint112();\n    }\n}\n"
    },
    "contracts/periphery/libraries/Mint.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { ICreditPositionManager } from \"../../tokens/interfaces/ICreditPositionManager.sol\";\nimport { IRouter } from \"../interfaces/IRouter.sol\";\nimport { IWETH } from \"../interfaces/IWETH.sol\";\nimport { IMint } from \"../interfaces/IMint.sol\";\nimport { MintMath } from \"./MintMath.sol\";\nimport { MsgValue } from \"./MsgValue.sol\";\nimport { ETH } from \"./ETH.sol\";\n\nlibrary Mint {\n    using MintMath for IPair;\n\n    function newLiquidity(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPosition,\n        IMint.NewLiquidity calldata params\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        (assetIn, liquidityOut, id, dueOut) = _newLiquidity(\n            creditPosition,\n            IMint._NewLiquidity(\n                router,\n                factory,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.assetIn,\n                params.debtIn,\n                params.collateralIn,\n                params.deadline\n            )\n        );\n    }\n\n    function newLiquidityETHAsset(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPosition,\n        IWETH weth,\n        IMint.NewLiquidityETHAsset calldata params\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        uint112 assetInETH = MsgValue.getUint112();\n\n        (assetIn, liquidityOut, id, dueOut) = _newLiquidity(\n            creditPosition,\n            IMint._NewLiquidity(\n                router,\n                factory,\n                weth,\n                params.collateral,\n                params.maturity,\n                address(this),\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                assetInETH,\n                params.debtIn,\n                params.collateralIn,\n                params.deadline\n            )\n        );\n    }\n\n    function newLiquidityETHCollateral(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPosition,\n        IWETH weth,\n        IMint.NewLiquidityETHCollateral calldata params\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        uint112 collateralIn = MsgValue.getUint112();\n\n        (assetIn, liquidityOut, id, dueOut) = _newLiquidity(\n            creditPosition,\n            IMint._NewLiquidity(\n                router,\n                factory,\n                params.asset,\n                weth,\n                params.maturity,\n                msg.sender,\n                address(this),\n                params.liquidityTo,\n                params.dueTo,\n                params.assetIn,\n                params.debtIn,\n                collateralIn,\n                params.deadline\n            )\n        );\n    }\n\n    function liquidityGivenAsset(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPosition,\n        IMint.LiquidityGivenAsset calldata params\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenAsset(\n            creditPosition,\n            IMint._LiquidityGivenAsset(\n                router,\n                factory,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.assetIn,\n                params.minLiquidity,\n                params.maxDebt,\n                params.maxCollateral,\n                params.deadline\n            )\n        );\n    }\n\n    function liquidityGivenAssetETHAsset(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPosition,\n        IWETH weth,\n        IMint.LiquidityGivenAssetETHAsset calldata params\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        uint112 assetInETH = MsgValue.getUint112();\n\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenAsset(\n            creditPosition,\n            IMint._LiquidityGivenAsset(\n                router,\n                factory,\n                weth,\n                params.collateral,\n                params.maturity,\n                address(this),\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                assetInETH,\n                params.minLiquidity,\n                params.maxDebt,\n                params.maxCollateral,\n                params.deadline\n            )\n        );\n    }\n\n    function liquidityGivenAssetETHCollateral(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPosition,\n        IWETH weth,\n        IMint.LiquidityGivenAssetETHCollateral calldata params\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        uint112 maxCollateral = MsgValue.getUint112();\n\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenAsset(\n            creditPosition,\n            IMint._LiquidityGivenAsset(\n                router,\n                factory,\n                params.asset,\n                weth,\n                params.maturity,\n                msg.sender,\n                address(this),\n                params.liquidityTo,\n                params.dueTo,\n                params.assetIn,\n                params.minLiquidity,\n                params.maxDebt,\n                maxCollateral,\n                params.deadline\n            )\n        );\n\n        if (maxCollateral > dueOut.collateral) {\n            uint256 excess = maxCollateral;\n            unchecked {\n                excess -= dueOut.collateral;\n            }\n            ETH.transfer(payable(msg.sender), excess);\n        }\n    }\n\n    function liquidityGivenCollateral(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPosition,\n        IMint.LiquidityGivenCollateral memory params\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenCollateral(\n            creditPosition,\n            IMint._LiquidityGivenCollateral(\n                router,\n                factory,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.collateralIn,\n                params.minLiquidity,\n                params.maxAsset,\n                params.maxDebt,\n                params.deadline\n            )\n        );\n    }\n\n    function liquidityGivenCollateralETHAsset(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPosition,\n        IWETH weth,\n        IMint.LiquidityGivenCollateralETHAsset memory params\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        uint112 maxAsset = MsgValue.getUint112();\n\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenCollateral(\n            creditPosition,\n            IMint._LiquidityGivenCollateral(\n                router,\n                factory,\n                weth,\n                params.collateral,\n                params.maturity,\n                address(this),\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.collateralIn,\n                params.minLiquidity,\n                maxAsset,\n                params.maxDebt,\n                params.deadline\n            )\n        );\n\n        if (maxAsset > assetIn) {\n            uint256 excess = maxAsset;\n            unchecked {\n                excess -= assetIn;\n            }\n            ETH.transfer(payable(msg.sender), excess);\n        }\n    }\n\n    function liquidityGivenCollateralETHCollateral(\n        IRouter router,\n        IFactory factory,\n        ICreditPositionManager creditPosition,\n        IWETH weth,\n        IMint.LiquidityGivenCollateralETHCollateral memory params\n    ) external returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        uint112 collateralIn = MsgValue.getUint112();\n\n        (assetIn, liquidityOut, id, dueOut) = _liquidityGivenCollateral(\n            creditPosition,\n            IMint._LiquidityGivenCollateral(\n                router,\n                factory,\n                params.asset,\n                weth,\n                params.maturity,\n                msg.sender,\n                address(this),\n                params.liquidityTo,\n                params.dueTo,\n                collateralIn,\n                params.minLiquidity,\n                params.maxAsset,\n                params.maxDebt,\n                params.deadline\n            )\n        );\n    }\n\n    function _newLiquidity(\n        ICreditPositionManager creditPosition,\n        IMint._NewLiquidity memory params\n    ) private returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        require(params.debtIn > params.assetIn, \"E516\");\n        require(params.maturity > block.timestamp, \"E508\");\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\n        if (address(pair) == address(0)) pair = params.factory.createPair(params.asset, params.collateral);\n\n        require(pair.totalLiquidity(params.maturity) == 0, \"E506\");\n\n        (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) = MintMath.givenNew(\n            params.maturity,\n            params.assetIn,\n            params.debtIn,\n            params.collateralIn\n        );\n\n        (assetIn, liquidityOut, id, dueOut) = _mint(\n            creditPosition,\n            IMint._Mint(\n                params.router,\n                pair,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.assetFrom,\n                params.collateralFrom,\n                params.liquidityTo,\n                params.dueTo,\n                xIncrease,\n                yIncrease,\n                zIncrease,\n                params.deadline\n            )\n        );\n    }\n\n    function _liquidityGivenAsset(\n        ICreditPositionManager creditPosition,\n        IMint._LiquidityGivenAsset memory params\n    ) private returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), \"E501\");\n        require(pair.totalLiquidity(params.maturity) != 0, \"E507\");\n\n        (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) = pair.givenAsset(params.maturity, params.assetIn);\n\n        (assetIn, liquidityOut, id, dueOut) = _mint(\n            creditPosition,\n            IMint._Mint(\n                params.router,\n                pair,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.assetFrom,\n                params.collateralFrom,\n                params.liquidityTo,\n                params.dueTo,\n                xIncrease,\n                yIncrease,\n                zIncrease,\n                params.deadline\n            )\n        );\n\n        require(liquidityOut >= params.minLiquidity, \"E511\");\n        require(dueOut.collateral <= params.maxCollateral, \"E513\");\n    }\n\n    function _liquidityGivenCollateral(\n        ICreditPositionManager creditPosition,\n        IMint._LiquidityGivenCollateral memory params\n    ) private returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), \"E501\");\n        require(pair.totalLiquidity(params.maturity) != 0, \"E507\");\n\n        (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) = pair.givenCollateral(\n            params.maturity,\n            params.collateralIn\n        );\n        (assetIn, liquidityOut, id, dueOut) = _mint(\n            creditPosition,\n            IMint._Mint(\n                params.router,\n                pair,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.assetFrom,\n                params.collateralFrom,\n                params.liquidityTo,\n                params.dueTo,\n                xIncrease,\n                yIncrease,\n                zIncrease,\n                params.deadline\n            )\n        );\n        require(liquidityOut >= params.minLiquidity, \"E511\");\n        require(xIncrease <= params.maxAsset, \"E519\");\n    }\n\n    function _mint(\n        ICreditPositionManager creditPosition,\n        IMint._Mint memory params\n    ) private returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {\n        require(params.deadline >= block.timestamp, \"E504\");\n        require(params.maturity > block.timestamp, \"E508\");\n\n        (assetIn, liquidityOut, id, dueOut) = params.pair.mint(\n            IPair.MintParam(\n                params.maturity,\n                address(this),\n                address(this),\n                params.xIncrease,\n                params.yIncrease,\n                params.zIncrease,\n                bytes(abi.encode(params.asset, params.collateral, params.assetFrom, params.collateralFrom))\n            )\n        );\n\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = liquidityOut;\n\n        ICreditPositionManager.MintParams memory mintParams = ICreditPositionManager.MintParams({\n            pair: params.pair,\n            maturity: params.maturity,\n            positionType: ICreditPositionManager.PositionType.LIQUIDITY,\n            amounts: amounts,\n            recipient: params.liquidityTo\n        });\n\n        creditPosition.mint(mintParams);\n    }\n}\n"
    },
    "contracts/periphery/libraries/MintMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { Math } from \"../../core/libraries/Math.sol\";\nimport { SafeCast } from \"../../core/libraries/SafeCast.sol\";\nimport { ConstantProduct } from \"./ConstantProduct.sol\";\n\nlibrary MintMath {\n    using Math for uint256;\n    using ConstantProduct for IPair;\n    using SafeCast for uint256;\n\n    function givenNew(\n        uint256 maturity,\n        uint112 assetIn,\n        uint112 debtIn,\n        uint112 collateralIn\n    ) internal view returns (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) {\n        xIncrease = assetIn;\n        uint256 duration = maturity;\n        duration -= block.timestamp;\n        uint256 _yIncrease = debtIn;\n        _yIncrease -= assetIn;\n        _yIncrease <<= 32;\n        _yIncrease /= duration;\n        yIncrease = _yIncrease.toUint112();\n        uint256 _zIncrease = collateralIn;\n        _zIncrease <<= 25;\n        uint256 denominator = duration;\n        denominator += 0x2000000;\n        _zIncrease /= denominator;\n        zIncrease = _zIncrease.toUint112();\n    }\n\n    function givenAsset(\n        IPair pair,\n        uint256 maturity,\n        uint112 assetIn\n    ) internal view returns (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) {\n        ConstantProduct.CP memory cp = pair.get(maturity);\n\n        uint256 _xIncrease = assetIn;\n        _xIncrease *= cp.x;\n        uint256 denominator = cp.x;\n        denominator += pair.lpFeeStored(maturity);\n        _xIncrease /= denominator;\n        xIncrease = _xIncrease.toUint112();\n\n        uint256 _yIncrease = cp.y;\n        _yIncrease *= xIncrease;\n        _yIncrease /= cp.x;\n        yIncrease = _yIncrease.toUint112();\n\n        uint256 _zIncrease = cp.z;\n        _zIncrease *= xIncrease;\n        _zIncrease /= cp.x;\n        zIncrease = _zIncrease.toUint112();\n    }\n\n    function givenCollateral(\n        IPair pair,\n        uint256 maturity,\n        uint112 collateralIn\n    ) internal view returns (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) {\n        ConstantProduct.CP memory cp = pair.get(maturity);\n\n        uint256 _zIncrease = collateralIn;\n        _zIncrease <<= 25;\n        uint256 denominator = maturity;\n        denominator -= block.timestamp;\n        denominator += 0x2000000;\n        _zIncrease /= denominator;\n        zIncrease = _zIncrease.toUint112();\n\n        uint256 _xIncrease = cp.x;\n        _xIncrease *= _zIncrease;\n        _xIncrease = _xIncrease.divUp(cp.z);\n        xIncrease = _xIncrease.toUint112();\n\n        uint256 _yIncrease = cp.y;\n        _yIncrease *= _zIncrease;\n        _yIncrease /= cp.z;\n        yIncrease = _yIncrease.toUint112();\n    }\n}\n"
    },
    "contracts/periphery/libraries/MsgValue.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.8.20;\n\nimport { SafeCast } from \"../../core/libraries/SafeCast.sol\";\nimport { ETH } from \"./ETH.sol\";\n\nlibrary MsgValue {\n    using SafeCast for uint256;\n\n    function getUint112() internal returns (uint112 value) {\n        value = msg.value.truncateUint112();\n        unchecked {\n            if (msg.value > value) ETH.transfer(payable(msg.sender), msg.value - value);\n        }\n    }\n}\n"
    },
    "contracts/periphery/libraries/Pay.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { ICreditPositionManager } from \"../../tokens/interfaces/ICreditPositionManager.sol\";\nimport { IDue } from \"../../tokens/interfaces/IDue.sol\";\nimport { IRouter } from \"../interfaces/IRouter.sol\";\nimport { IWETH } from \"../interfaces/IWETH.sol\";\nimport { IPay } from \"../interfaces/IPay.sol\";\nimport { MsgValue } from \"./MsgValue.sol\";\nimport { ETH } from \"./ETH.sol\";\nimport { PayMath } from \"./PayMath.sol\";\n\nlibrary Pay {\n    using PayMath for IPair;\n\n    function pay(\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IPay.Repay memory params\n    ) external returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid) {\n        (assetIn, collateralOut, creditPositionFullyPaid) = _pay(\n            creditPositionManager,\n            IPay._Repay(\n                factory,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                params.collateralTo,\n                params.creditPositionIds,\n                params.maxAssetsIn,\n                params.deadline\n            )\n        );\n    }\n\n    function payETHAsset(\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWETH weth,\n        IPay.RepayETHAsset memory params\n    ) external returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid) {\n        uint128 maxAssetIn = MsgValue.getUint112();\n\n        (assetIn, collateralOut, creditPositionFullyPaid) = _pay(\n            creditPositionManager,\n            IPay._Repay(\n                factory,\n                weth,\n                params.collateral,\n                params.maturity,\n                address(this),\n                params.collateralTo,\n                params.creditPositionIds,\n                params.maxAssetsIn,\n                params.deadline\n            )\n        );\n\n        if (maxAssetIn > assetIn) {\n            uint256 excess = maxAssetIn;\n            unchecked {\n                excess -= assetIn;\n            }\n            ETH.transfer(payable(msg.sender), excess);\n        }\n    }\n\n    function payETHCollateral(\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWETH weth,\n        IPay.RepayETHCollateral memory params\n    ) external returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid) {\n        (assetIn, collateralOut, creditPositionFullyPaid) = _pay(\n            creditPositionManager,\n            IPay._Repay(\n                factory,\n                params.asset,\n                weth,\n                params.maturity,\n                msg.sender,\n                address(this),\n                params.creditPositionIds,\n                params.maxAssetsIn,\n                params.deadline\n            )\n        );\n\n        if (collateralOut != 0) {\n            weth.withdraw(collateralOut);\n            ETH.transfer(params.collateralTo, collateralOut);\n        }\n    }\n\n    function _pay(\n        ICreditPositionManager creditPositionManager,\n        IPay._Repay memory params\n    ) private returns (uint128 assetIn, uint128 collateralOut, uint256[] memory creditPositionFullyPaid) {\n        require(params.deadline >= block.timestamp, \"E504\");\n        require(params.maturity > block.timestamp, \"E508\");\n\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), \"E501\");\n\n        (uint256[] memory ids, uint112[] memory assetsIn, uint112[] memory collateralsOut) = pair.givenMaxAssetsIn(\n            params.maturity,\n            creditPositionManager,\n            params.creditPositionIds,\n            params.maxAssetsIn\n        );\n\n        uint256[] memory duesFullyPaid;\n        (assetIn, collateralOut, duesFullyPaid) = pair.pay(\n            IPair.PayParam(\n                params.maturity,\n                params.collateralTo,\n                address(this),\n                ids,\n                assetsIn,\n                collateralsOut,\n                bytes(abi.encode(params.asset, params.collateral, params.from, params.maturity))\n            )\n        );\n\n        creditPositionFullyPaid = new uint256[](duesFullyPaid.length);\n\n        for (uint256 i = 0; i < duesFullyPaid.length; i++) {\n            creditPositionFullyPaid[i] = creditPositionManager.creditPositionOf(duesFullyPaid[i]);\n        }\n\n        for (uint256 i = 0; i < creditPositionFullyPaid.length; i++) {\n            creditPositionManager.burn(creditPositionFullyPaid[i]);\n        }\n    }\n}\n"
    },
    "contracts/periphery/libraries/PayMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { SafeCast } from \"../../core/libraries/SafeCast.sol\";\n\nimport { ICreditPositionManager } from \"../../tokens/interfaces/ICreditPositionManager.sol\";\n\nlibrary PayMath {\n    using SafeCast for uint256;\n\n    function givenMaxAssetsIn(\n        IPair pair,\n        uint256 maturity,\n        ICreditPositionManager creditPositionManager,\n        uint256[] memory cpIds,\n        uint112[] memory maxAssetsIn\n    ) internal view returns (uint256[] memory ids, uint112[] memory assetsIn, uint112[] memory collateralsOut) {\n        uint256 length = cpIds.length;\n        ids = new uint256[](length);\n\n        for (uint256 j; j < length; ) {\n            require(\n                creditPositionManager.getPositionType(cpIds[j]) == ICreditPositionManager.PositionType.DEBT,\n                \"E524\"\n            );\n            ids[j] = creditPositionManager.getDebtId(cpIds[j]);\n\n            unchecked {\n                ++j;\n            }\n        }\n\n        assetsIn = maxAssetsIn;\n        collateralsOut = new uint112[](length);\n\n        for (uint256 i; i < length; ) {\n            IPair.Due memory due = pair.dueOf(maturity, address(this), ids[i]);\n\n            if (assetsIn[i] > due.debt) assetsIn[i] = due.debt;\n            if (msg.sender == creditPositionManager.ownerOf(cpIds[i])) {\n                uint256 _collateralOut = due.collateral;\n                if (due.debt != 0) {\n                    _collateralOut *= assetsIn[i];\n                    _collateralOut /= due.debt;\n                }\n                collateralsOut[i] = _collateralOut.toUint112();\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/periphery/libraries/SafeTransfer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\n\nlibrary SafeTransfer {\n    using SafeERC20 for IERC20;\n\n    function safeTransfer(IERC20 token, IPair to, uint256 amount) internal {\n        token.safeTransfer(address(to), amount);\n    }\n\n    // slither-disable-next-line arbitrary-send-erc20\n    function safeTransferFrom(IERC20 token, address from, IPair to, uint256 amount) internal {\n        token.safeTransferFrom(from, address(to), amount);\n    }\n}\n"
    },
    "contracts/periphery/libraries/SquareRoot.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.8.20;\n\nlibrary SquareRoot {\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) >> 1;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) >> 1;\n        }\n    }\n\n    function sqrtUp(uint256 x) internal pure returns (uint256 y) {\n        y = sqrt(x);\n        if (x % y != 0) y++;\n    }\n}\n"
    },
    "contracts/periphery/libraries/Withdraw.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { ICreditPositionManager } from \"../../tokens/interfaces/ICreditPositionManager.sol\";\nimport { IRouter } from \"../interfaces/IRouter.sol\";\nimport { IWETH } from \"../interfaces/IWETH.sol\";\nimport { IWithdraw } from \"../interfaces/IWithdraw.sol\";\nimport { ETH } from \"./ETH.sol\";\n\nlibrary Withdraw {\n    function collect(\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWithdraw.Collect calldata params\n    ) external returns (IPair.Tokens memory tokensOut) {\n        tokensOut = _collect(\n            creditPositionManager,\n            IWithdraw._Collect(\n                factory,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.assetTo,\n                params.collateralTo,\n                params.creditPositionId\n            )\n        );\n    }\n\n    function collectETHAsset(\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWETH weth,\n        IWithdraw.CollectETHAsset calldata params\n    ) external returns (IPair.Tokens memory tokensOut) {\n        tokensOut = _collect(\n            creditPositionManager,\n            IWithdraw._Collect(\n                factory,\n                weth,\n                params.collateral,\n                params.maturity,\n                address(this),\n                params.collateralTo,\n                params.creditPositionId\n            )\n        );\n\n        if (tokensOut.asset != 0) {\n            weth.withdraw(tokensOut.asset);\n            ETH.transfer(params.assetTo, tokensOut.asset);\n        }\n    }\n\n    function collectETHCollateral(\n        IFactory factory,\n        ICreditPositionManager creditPositionManager,\n        IWETH weth,\n        IWithdraw.CollectETHCollateral calldata params\n    ) external returns (IPair.Tokens memory tokensOut) {\n        tokensOut = _collect(\n            creditPositionManager,\n            IWithdraw._Collect(\n                factory,\n                params.asset,\n                weth,\n                params.maturity,\n                params.assetTo,\n                address(this),\n                params.creditPositionId\n            )\n        );\n\n        if (tokensOut.collateral != 0) {\n            weth.withdraw(tokensOut.collateral);\n            ETH.transfer(params.collateralTo, tokensOut.collateral);\n        }\n    }\n\n    function _collect(\n        ICreditPositionManager creditPositionManager,\n        IWithdraw._Collect memory params\n    ) private returns (IPair.Tokens memory tokensOut) {\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), \"E501\");\n        require(creditPositionManager.ownerOf(params.creditPositionId) == msg.sender, \"E603\");\n        require(\n            creditPositionManager.getPositionType(params.creditPositionId) ==\n                ICreditPositionManager.PositionType.CREDIT,\n            \"E524\"\n        );\n\n        (\n            uint256 loanPrincipal,\n            uint256 loanInterest,\n            uint256 coveragePrincipal,\n            uint256 coverageInterest\n        ) = ICreditPositionManager(creditPositionManager).getCredit(params.creditPositionId);\n\n        // safe to cast to uint112 because CREDIT position is always created with uint112 (see Lend.sol)\n        IPair.Claims memory claimsIn = IPair.Claims(\n            uint112(loanPrincipal),\n            uint112(loanInterest),\n            uint112(coveragePrincipal),\n            uint112(coverageInterest)\n        );\n\n        creditPositionManager.burn(params.creditPositionId);\n\n        tokensOut = pair.withdraw(IPair.WithdrawParam(params.maturity, params.assetTo, params.collateralTo, claimsIn));\n    }\n}\n"
    },
    "contracts/test/contracts/Faucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract Faucet {\n    address public constant ETH_ADDRESS = address(0);\n\n    address public admin;\n\n    uint256 currentEpoch;\n\n    mapping(uint256 => mapping(address => mapping(address => bool))) public claimed; // to track who claimed (eth + erc20s)\n    mapping(uint256 => mapping(address => bool)) public tokenAddresses; // allowed tokens to withdraw\n    mapping(uint256 => bytes32) public merkleRoots; // merkle root of each epoch\n    mapping(uint256 => uint256) public maxEthWithdrawable;\n    mapping(uint256 => uint256) public maxErc20Withdrawable;\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    function initNextEpoch(\n        address[] memory _tokenAddresses,\n        bytes memory _merkleRoot,\n        uint256 _maxEthWithdrawable,\n        uint256 _maxErc20Withdrawable\n    ) external onlyAdmin {\n        currentEpoch++;\n        merkleRoots[currentEpoch] = keccak256(_merkleRoot);\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\n            tokenAddresses[currentEpoch][_tokenAddresses[i]] = true;\n        }\n        tokenAddresses[currentEpoch][ETH_ADDRESS] = true;\n\n        maxEthWithdrawable[currentEpoch] = _maxEthWithdrawable;\n        maxErc20Withdrawable[currentEpoch] = _maxErc20Withdrawable;\n    }\n\n    function modifyMaxWithdrawable(uint256 _epoch, uint256 _ethAmount, uint256 _ercAmount) external onlyAdmin {\n        maxEthWithdrawable[_epoch] = _ethAmount;\n        maxErc20Withdrawable[_epoch] = _ercAmount;\n    }\n\n    function modifyRoot(uint256 _epoch, bytes32 _merkleRoot) external onlyAdmin {\n        merkleRoots[_epoch] = _merkleRoot;\n    }\n\n    function addToken(uint256 _epoch, address _tokenAddresses) external onlyAdmin {\n        tokenAddresses[_epoch][_tokenAddresses] = true;\n    }\n\n    function removeToken(uint256 _epoch, address _tokenAddresses) external onlyAdmin {\n        tokenAddresses[_epoch][_tokenAddresses] = false;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Only admin can call this function\");\n        _;\n    }\n\n    modifier onlyWhitelist(bytes32[] calldata _merkleProof) {\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n        require(MerkleProof.verify(_merkleProof, merkleRoots[currentEpoch], leaf), \"Faucet: Not part of the whitelist\");\n        _;\n    }\n\n    function mint(bytes32[] calldata _merkleProof, address _tokenAddress) external onlyWhitelist(_merkleProof) {\n        require(!claimed[currentEpoch][msg.sender][_tokenAddress], \"Faucet: already claimed\");\n        require(tokenAddresses[currentEpoch][_tokenAddress], \"Faucet: token not allowed\");\n\n        claimed[currentEpoch][msg.sender][_tokenAddress] = true;\n\n        uint256 amount = 0;\n        if (_tokenAddress == ETH_ADDRESS) {\n            amount = address(this).balance >= maxEthWithdrawable[currentEpoch]\n                ? maxEthWithdrawable[currentEpoch]\n                : address(this).balance;\n            payable(msg.sender).transfer(amount);\n        } else {\n            amount = maxErc20Withdrawable[currentEpoch];\n            ERC20PresetMinterPauser(_tokenAddress).mint(msg.sender, amount);\n        }\n    }\n\n    function withdraw(address _tokenAddress, uint256 _amount, address payable _to) external onlyAdmin {\n        require(_to != address(0), \"Invalid address\");\n        if (_tokenAddress == ETH_ADDRESS) {\n            require(address(this).balance >= _amount, \"Not enough ETH\");\n            _to.transfer(_amount);\n        } else {\n            ERC20PresetMinterPauser(_tokenAddress).transfer(_to, _amount);\n        }\n    }\n\n    receive() external payable {} // fallback function to accept ETH\n}\n"
    },
    "contracts/test/upgradeability/CreditRouterV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC721Receiver } from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { UUPSUpgradeable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\nimport { ICreditPositionManager } from \"../../tokens/interfaces/ICreditPositionManager.sol\";\nimport { IFactory } from \"../../core/interfaces/IFactory.sol\";\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { IBorrow } from \"../../periphery/interfaces/IBorrow.sol\";\nimport { IBurn } from \"../../periphery/interfaces/IBurn.sol\";\nimport { ILend } from \"../../periphery/interfaces/ILend.sol\";\nimport { IMint } from \"../../periphery/interfaces/IMint.sol\";\nimport { IPay } from \"../../periphery/interfaces/IPay.sol\";\nimport { IWETH } from \"../../periphery/interfaces/IWETH.sol\";\nimport { IWithdraw } from \"../../periphery/interfaces/IWithdraw.sol\";\nimport { Borrow } from \"../../periphery/libraries/Borrow.sol\";\nimport { Burn } from \"../../periphery/libraries/Burn.sol\";\nimport { Lend } from \"../../periphery/libraries/Lend.sol\";\nimport { Mint } from \"../../periphery/libraries/Mint.sol\";\nimport { Pay } from \"../../periphery/libraries/Pay.sol\";\nimport { SafeTransfer } from \"../../periphery/libraries/SafeTransfer.sol\";\nimport { Withdraw } from \"../../periphery/libraries/Withdraw.sol\";\nimport { IRouter } from \"../../periphery/interfaces/IRouter.sol\";\nimport { ICreditPayCallback } from \"../../core/interfaces/callback/ICreditPayCallback.sol\";\nimport { ICreditBorrowCallback } from \"../../core/interfaces/callback/ICreditBorrowCallback.sol\";\nimport { ICreditMintCallback } from \"../../core/interfaces/callback/ICreditMintCallback.sol\";\nimport { ICreditLendCallback } from \"../../core/interfaces/callback/ICreditLendCallback.sol\";\n\n/// @title Credit Router\n/// @author Credit Labs\n/// @notice It is recommnded to use this contract to interact with Credit Core contract.\n/// @notice All error messages are abbreviated and can be found in the documentation.\ncontract CreditRouterV2 is IRouter, IERC721Receiver, Initializable, UUPSUpgradeable, OwnableUpgradeable {\n    using SafeTransfer for IERC20;\n\n    /* ===== MODEL ===== */\n\n    /// @inheritdoc IRouter\n    IFactory public override factory;\n    /// @inheritdoc IRouter\n    IWETH public override weth;\n    /// @inheritdoc IRouter\n    ICreditPositionManager public override creditPositionManager;\n\n    uint256 public newValue;\n    bool public initializedV2;\n\n    /* ===== INIT ===== */\n\n    /// @dev Initializes the Router contract.\n    /// @param _factory The address of factory contract used by this contract.\n    /// @param _weth The address of the Wrapped ETH contract.\n    /// @param _creditPositionManager The address of the Credit Position contract.\n    function initialize(\n        IFactory _factory,\n        IWETH _weth,\n        ICreditPositionManager _creditPositionManager\n    ) public initializer {\n        require(address(_factory) != address(0), \"E601\");\n        require(address(_weth) != address(0), \"E601\");\n        require(address(_creditPositionManager) != address(0), \"E601\");\n        require(address(_factory) != address(_weth), \"E612\");\n\n        __Ownable_init();\n\n        factory = _factory;\n        weth = _weth;\n        creditPositionManager = _creditPositionManager;\n    }\n\n    function initializeV2(uint _newValue) public {\n        require(!initializedV2, \"CreditRouterV2: V2 already initialized\");\n        initializedV2 = true;\n        newValue = _newValue;\n    }\n\n    ///@dev required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    /* ===== UPDATE ===== */\n\n    function newMethod() public pure returns (string memory) {\n        return \"hello I am new\";\n    }\n\n    receive() external payable {\n        require(msg.sender == address(weth), \"E615\");\n    }\n\n    /// @inheritdoc IRouter\n    function deployPair(DeployPair calldata params) external override {\n        factory.createPair(params.asset, params.collateral);\n    }\n\n    /// @inheritdoc IRouter\n    function newLiquidity(\n        IMint.NewLiquidity calldata\n    ) external override returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function newLiquidityETHAsset(\n        IMint.NewLiquidityETHAsset calldata\n    ) external payable override returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function newLiquidityETHCollateral(\n        IMint.NewLiquidityETHCollateral calldata\n    ) external payable override returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function liquidityGivenAsset(\n        IMint.LiquidityGivenAsset calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function liquidityGivenAssetETHAsset(\n        IMint.LiquidityGivenAssetETHAsset calldata,\n        bytes32[] calldata _merkleProof\n    ) external payable override returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function liquidityGivenAssetETHCollateral(\n        IMint.LiquidityGivenAssetETHCollateral calldata,\n        bytes32[] calldata _merkleProof\n    ) external payable override returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function liquidityGivenCollateral(\n        IMint.LiquidityGivenCollateral calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function liquidityGivenCollateralETHAsset(\n        IMint.LiquidityGivenCollateralETHAsset calldata,\n        bytes32[] calldata _merkleProof\n    ) external payable override returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function liquidityGivenCollateralETHCollateral(\n        IMint.LiquidityGivenCollateralETHCollateral calldata,\n        bytes32[] calldata _merkleProof\n    ) external payable override returns (uint256 assetIn, uint256 liquidityOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function removeLiquidity(\n        IBurn.RemoveLiquidity calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint256 assetOut, uint128 collateralOut) {}\n\n    /// @inheritdoc IRouter\n    function removeLiquidityETHAsset(\n        IBurn.RemoveLiquidityETHAsset calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint256 assetOut, uint128 collateralOut) {}\n\n    /// @inheritdoc IRouter\n    function removeLiquidityETHCollateral(\n        IBurn.RemoveLiquidityETHCollateral calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint256 assetOut, uint128 collateralOut) {}\n\n    /// @inheritdoc IRouter\n    function lendGivenPercent(\n        ILend.LendGivenPercent calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint256 assetIn, IPair.Claims memory claimsOut) {}\n\n    /// @inheritdoc IRouter\n    function lendGivenPercentETHAsset(\n        ILend.LendGivenPercentETHAsset calldata,\n        bytes32[] calldata _merkleProof\n    ) external payable override returns (uint256 assetIn, IPair.Claims memory claimsOut) {}\n\n    /// @inheritdoc IRouter\n    function lendGivenPercentETHCollateral(\n        ILend.LendGivenPercentETHCollateral calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint256 assetIn, IPair.Claims memory claimsOut) {}\n\n    /// @inheritdoc IRouter\n    function collect(\n        IWithdraw.Collect calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (IPair.Tokens memory tokensOut) {}\n\n    /// @inheritdoc IRouter\n    function collectETHAsset(\n        IWithdraw.CollectETHAsset calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (IPair.Tokens memory tokensOut) {}\n\n    /// @inheritdoc IRouter\n    function collectETHCollateral(\n        IWithdraw.CollectETHCollateral calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (IPair.Tokens memory tokensOut) {}\n\n    /// @inheritdoc IRouter\n    function borrowGivenPercent(\n        IBorrow.BorrowGivenPercent calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function borrowGivenPercentETHAsset(\n        IBorrow.BorrowGivenPercentETHAsset calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function borrowGivenPercentETHCollateral(\n        IBorrow.BorrowGivenPercentETHCollateral calldata,\n        bytes32[] calldata _merkleProof\n    ) external payable override returns (uint256 assetOut, uint256 id, IPair.Due memory dueOut) {}\n\n    /// @inheritdoc IRouter\n    function repay(\n        IPay.Repay calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint128 assetIn, uint128 collateralOut, uint256[] memory duesFullyPaid) {}\n\n    /// @inheritdoc IRouter\n    function repayETHAsset(\n        IPay.RepayETHAsset calldata,\n        bytes32[] calldata _merkleProof\n    ) external payable override returns (uint128 assetIn, uint128 collateralOut, uint256[] memory duesFullyPaid) {}\n\n    /// @inheritdoc IRouter\n    function repayETHCollateral(\n        IPay.RepayETHCollateral calldata,\n        bytes32[] calldata _merkleProof\n    ) external override returns (uint128 assetIn, uint128 collateralOut, uint256[] memory duesFullyPaid) {}\n\n    /// @inheritdoc ICreditMintCallback\n    function creditMintCallback(uint256, uint112, bytes calldata) external override {}\n\n    /// @inheritdoc ICreditLendCallback\n    function creditLendCallback(uint256, bytes calldata) external override {}\n\n    /// @inheritdoc ICreditBorrowCallback\n    function creditBorrowCallback(uint112, bytes calldata) external override {}\n\n    /// @inheritdoc ICreditPayCallback\n    function creditPayCallback(uint128, bytes calldata) external override {}\n\n    function getPairAndVerify(IERC20, IERC20) private view returns (IPair pair) {}\n\n    function callbackTransfer(IERC20, address, IPair, uint256) private {}\n\n    /*///////////////////////////////////////////////////////////////\n                        IERC 721 logic\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IERC721Receiver\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/tokens/CreditPositionManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { ERC721EnumerableUpgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\nimport { IERC721Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { AccessControlUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport { UUPSUpgradeable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport { IERC165Upgradeable } from \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\nimport { ERC721Holder } from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\nimport { IPair } from \"../core/interfaces/IPair.sol\";\nimport { IRouter } from \"../periphery/interfaces/IRouter.sol\";\nimport { ICreditPositionManager } from \"./interfaces/ICreditPositionManager.sol\";\nimport { IDue } from \"./interfaces/IDue.sol\";\nimport { ICreditPositionManager } from \"./interfaces/ICreditPositionManager.sol\";\nimport { NFTTokenURIScaffold } from \"./libraries/NFTTokenURIScaffold.sol\";\n\n/**\n *  @title      CreditPositionManager\n *  @notice     A contract for managing credit positions.\n */\ncontract CreditPositionManager is\n    Initializable,\n    OwnableUpgradeable,\n    UUPSUpgradeable,\n    ReentrancyGuardUpgradeable,\n    ERC721Holder,\n    AccessControlUpgradeable,\n    ERC721EnumerableUpgradeable,\n    ICreditPositionManager\n{\n    /*///////////////////////////////////////////////////////////////\n                            State variables\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Only MINTER_ROLE holders can mint Credit Position\n    bytes32 private constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    /// @dev The next token ID of the NFT to mint.\n    uint256 public nextTokenIdToMint;\n\n    // @dev Router address - used for the debt retrieval\n    IRouter public router;\n\n    /// @dev Mapping from positions UID => positions info.\n    mapping(uint256 => ICreditPositionManager.CreditPosition) internal positions;\n\n    mapping(uint256 => uint256) internal dueIdToCreditPositionId;\n\n    /*///////////////////////////////////////////////////////////////\n                            Initializer logic\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Initiliazes the contract\n    function initialize(string memory _name, string memory _symbol) external initializer {\n        // Initialize inherited contracts, most base-like -> most derived.\n        __ReentrancyGuard_init();\n        __ERC721_init(_name, _symbol);\n\n        // Initialize this contract's state.\n        __Ownable_init();\n        __AccessControl_init();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    /// @dev    Grants roles to the specified addresses.\n    /// @notice Needs to be executed after router depoyment as\n    ///         there is a deadlock in initialization with the router contract.\n    function grantRoles(address _minter) external onlyOwner {\n        _grantRole(MINTER_ROLE, _minter);\n    }\n\n    /// @dev    Sets the router address.\n    /// @notice Needs to be executed after router depoyment as\n    ///         there is a deadlock in initialization with the router contract.\n    function setRouter(address _router) external onlyOwner {\n        router = IRouter(_router);\n    }\n\n    ///@dev required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    /*///////////////////////////////////////////////////////////////\n                            Modifiers\n    //////////////////////////////////////////////////////////////*/\n\n    modifier onlyRoleWithSwitch(bytes32 role) {\n        require(hasRole(role, _msgSender()), \"E406\");\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            Minting logic\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc ICreditPositionManager\n    function mint(ICreditPositionManager.MintParams calldata params) external onlyRoleWithSwitch(MINTER_ROLE) {\n        require(params.amounts.length > 0, \"E525\");\n        require(params.recipient != address(0), \"E601\");\n\n        uint256 tokenId = nextTokenIdToMint;\n        nextTokenIdToMint++;\n\n        if (params.positionType == PositionType.CREDIT) {\n            require(params.amounts.length == 4, \"E525\");\n            positions[tokenId] = CreditPosition({\n                pair: params.pair,\n                maturity: params.maturity,\n                positionType: params.positionType,\n                slot0: params.amounts[0],\n                slot1: params.amounts[1],\n                slot2: params.amounts[2],\n                slot3: params.amounts[3]\n            });\n        } else if (params.positionType == PositionType.DEBT) {\n            require(params.amounts.length == 1, \"E525\");\n            positions[tokenId] = CreditPosition({\n                pair: params.pair,\n                maturity: params.maturity,\n                positionType: params.positionType,\n                slot0: params.amounts[0],\n                slot1: 0,\n                slot2: 0,\n                slot3: 0\n            });\n            dueIdToCreditPositionId[params.amounts[0]] = tokenId;\n        } else if (params.positionType == PositionType.LIQUIDITY) {\n            require(params.amounts.length == 1, \"E525\");\n            positions[tokenId] = CreditPosition({\n                pair: params.pair,\n                maturity: params.maturity,\n                positionType: params.positionType,\n                slot0: params.amounts[0],\n                slot1: 0,\n                slot2: 0,\n                slot3: 0\n            });\n        } else {\n            revert(\"E409\");\n        }\n\n        _mint(params.recipient, tokenId);\n\n        emit CreditPositionCreated(params.pair, params.maturity, params.recipient, tokenId, params.positionType);\n    }\n\n    /// @inheritdoc ICreditPositionManager\n    function burn(uint256 _tokenId) external override {\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \"E403\");\n\n        if (getPositionType(_tokenId) == PositionType.DEBT) {\n            delete dueIdToCreditPositionId[getDebtId(_tokenId)];\n        }\n\n        delete positions[_tokenId];\n\n        _burn(_tokenId);\n\n        emit CreditPositionBurnt(_tokenId);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            Getters\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc ICreditPositionManager\n    function getPositions(\n        uint256 _tokenId\n    ) external view override returns (ICreditPositionManager.CreditPosition memory) {\n        return positions[_tokenId];\n    }\n\n    /// @inheritdoc ICreditPositionManager\n    function getPositionType(uint256 _tokenId) public view override returns (ICreditPositionManager.PositionType) {\n        return positions[_tokenId].positionType;\n    }\n\n    /// @inheritdoc ICreditPositionManager\n    function getPair(uint256 _tokenId) public view override returns (address) {\n        return address(positions[_tokenId].pair);\n    }\n\n    /// @inheritdoc ICreditPositionManager\n    function getMaturity(uint256 _tokenId) public view override returns (uint256) {\n        return positions[_tokenId].maturity;\n    }\n\n    /// @inheritdoc ICreditPositionManager\n    function getLiquidity(uint256 _tokenId) public view override returns (uint256) {\n        require(positions[_tokenId].positionType == ICreditPositionManager.PositionType.LIQUIDITY, \"E409\");\n\n        return positions[_tokenId].slot0;\n    }\n\n    /// @inheritdoc ICreditPositionManager\n    function getCredit(uint256 _tokenId) public view override returns (uint256, uint256, uint256, uint256) {\n        require(positions[_tokenId].positionType == ICreditPositionManager.PositionType.CREDIT, \"E409\");\n\n        return (\n            positions[_tokenId].slot0,\n            positions[_tokenId].slot1,\n            positions[_tokenId].slot2,\n            positions[_tokenId].slot3\n        );\n    }\n\n    /// @inheritdoc ICreditPositionManager\n    function getDebtId(uint256 _tokenId) public view override returns (uint256) {\n        require(positions[_tokenId].positionType == ICreditPositionManager.PositionType.DEBT, \"E409\");\n\n        return positions[_tokenId].slot0;\n    }\n\n    /// @inheritdoc ICreditPositionManager\n    function dueOf(uint256 _tokenId) public view override returns (IPair.Due memory) {\n        return _dueOf(_tokenId, address(router));\n    }\n\n    function creditPositionOf(uint256 _dueId) external view override returns (uint256) {\n        return dueIdToCreditPositionId[_dueId];\n    }\n\n    function _dueOf(uint256 _tokenId, address debtOwner) internal view returns (IPair.Due memory) {\n        require(positions[_tokenId].positionType == ICreditPositionManager.PositionType.DEBT, \"E409\");\n\n        CreditPosition memory position = positions[_tokenId];\n        return position.pair.dueOf(position.maturity, debtOwner, position.slot0);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        ERC 165 / 721 logic\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     *  @notice Returns the URI for a given token ID.\n     *  @dev Throws if the token type doesn't exist.\n     *\n     *  @param _tokenId      The id of the wrapped token.\n     *  @return string        The URI for the given token ID.\n     */\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\n        ICreditPositionManager.CreditPosition storage position = positions[_tokenId];\n        ICreditPositionManager.PositionType positionType = position.positionType;\n        IPair pair = position.pair;\n        uint256 maturity = position.maturity;\n\n        //slither-disable-next-line uninitialized-local\n        NFTTokenURIScaffold.NFTParams memory params;\n\n        if (positionType == ICreditPositionManager.PositionType.LIQUIDITY) {\n            uint256 liquidity = getLiquidity(_tokenId);\n            params = NFTTokenURIScaffold.NFTParams({\n                tokenId: _tokenId,\n                pair: pair,\n                maturity: maturity,\n                positionType: positionType,\n                liquidityAmount: liquidity,\n                debtRequired: 0,\n                collateralLocked: 0,\n                loanAmount: 0,\n                coverageAmount: 0\n            });\n        } else if (positionType == ICreditPositionManager.PositionType.CREDIT) {\n            (\n                uint256 loanPrincipal,\n                uint256 loanInterest,\n                uint256 coveragePrincipal,\n                uint256 coverageInterest\n            ) = getCredit(_tokenId);\n\n            params = NFTTokenURIScaffold.NFTParams({\n                tokenId: _tokenId,\n                pair: pair,\n                maturity: maturity,\n                positionType: positionType,\n                liquidityAmount: 0,\n                debtRequired: 0,\n                collateralLocked: 0,\n                loanAmount: loanPrincipal + loanInterest,\n                coverageAmount: coveragePrincipal + coverageInterest\n            });\n        } else if (positionType == ICreditPositionManager.PositionType.DEBT) {\n            IPair.Due memory due = dueOf(_tokenId);\n\n            params = NFTTokenURIScaffold.NFTParams({\n                tokenId: _tokenId,\n                pair: pair,\n                maturity: maturity,\n                positionType: positionType,\n                liquidityAmount: 0,\n                debtRequired: due.debt,\n                collateralLocked: due.collateral,\n                loanAmount: 0,\n                coverageAmount: 0\n            });\n        } else {\n            revert(\"E409\");\n        }\n\n        return NFTTokenURIScaffold.tokenURI(params);\n    }\n\n    /// @dev See ERC 165\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(AccessControlUpgradeable, ERC721EnumerableUpgradeable, IERC165Upgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId) || interfaceId == type(IERC721Upgradeable).interfaceId;\n    }\n}\n"
    },
    "contracts/tokens/interfaces/IClaim.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { IERC20Permit } from \"./IERC20Permit.sol\";\nimport { IRouter } from \"../../periphery/interfaces/IRouter.sol\";\n\n/// @title Claim interface\ninterface IClaim is IERC20Permit {\n    function router() external returns (IRouter);\n\n    function pair() external returns (IPair);\n\n    function maturity() external returns (uint256);\n\n    function mint(address to, uint128 amount) external;\n\n    function burn(address from, uint128 amount) external;\n}\n"
    },
    "contracts/tokens/interfaces/ICreditPositionManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\n\ninterface ICreditPositionManager is IERC721Upgradeable {\n    /// @param pair Pair Address\n    /// @param maturity Maturity of the position\n    /// @param positionType Type of position (see enum PositionType)\n    /// @param slot0 Slot 0 of the position\n    /// @param slot1 Slot 1 of the position\n    /// @param slot2 Slot 2 of the position\n    /// @param slot3 Slot 3 of the position\n    struct CreditPosition {\n        IPair pair;\n        uint256 maturity;\n        PositionType positionType;\n        uint256 slot0;\n        uint256 slot1;\n        uint256 slot2;\n        uint256 slot3;\n    }\n\n    /// @param pair Pair Address\n    /// @param maturity Maturity of the position\n    /// @param positionType Type of position (see enum PositionType)\n    /// @param amounts Amounts of the position (array of max length 4)\n    /// @param recipient Recipient of the position\n    struct MintParams {\n        IPair pair;\n        uint256 maturity;\n        PositionType positionType;\n        uint256[] amounts;\n        address recipient;\n    }\n\n    /// @notice The type of position, i.e. liquidity, credit or debt.\n    enum PositionType {\n        LIQUIDITY,\n        CREDIT,\n        DEBT\n    }\n\n    event CreditPositionCreated(\n        IPair pair,\n        uint256 maturity,\n        address indexed recipient,\n        uint256 indexed tokenId,\n        ICreditPositionManager.PositionType positionType\n    );\n\n    event CreditPositionBurnt(uint256 indexed tokenId);\n\n    /**\n     *  @notice Mint a Credit Position.\n     *\n     *  @param params          The parameters of the Credit Position.\n     */\n    function mint(ICreditPositionManager.MintParams calldata params) external;\n\n    /**\n     *  @notice Burn a Credit Position.\n     *\n     *  @param _tokenId        The id of the wrapped token.\n     */\n    function burn(uint256 _tokenId) external;\n\n    /**\n     *  @notice Get the Credit Position Info.\n     *\n     *  @param _tokenId        The id of the wrapped token.\n     *  @return CreditPosition The Credit Position of the wrapped token.\n     */\n    function getPositions(uint256 _tokenId) external view returns (ICreditPositionManager.CreditPosition memory);\n\n    /**\n     *  @notice Get the position type of a Credit Position.\n     *\n     *  @param _tokenId        The id of the wrapped token.\n     *  @return PositionType   The position type of the Credit Position.\n     */\n    function getPositionType(uint256 _tokenId) external view returns (PositionType);\n\n    /**\n     *  @notice Get the pair of a Credit Position.\n     *\n     *  @param _tokenId        The id of the wrapped token.\n     *  @return address        The pair of the Credit Position.\n     */\n    function getPair(uint256 _tokenId) external view returns (address);\n\n    /**\n     *  @notice Get the maturity of a Credit Position.\n     *\n     *  @param _tokenId        The id of the wrapped token.\n     *  @return uint256        The maturity of the Credit Position.\n     */\n    function getMaturity(uint256 _tokenId) external view returns (uint256);\n\n    /**\n     *  @notice Get the liquidity of a Credit Position.\n     *\n     *  @param _tokenId        The id of the wrapped token.\n     *  @return Token          The liquidity of the Credit Position.\n     */\n    function getLiquidity(uint256 _tokenId) external view returns (uint256);\n\n    /**\n     *  @notice Get the credit of a Credit Position.\n     *\n     *  @param _tokenId        The id of the wrapped token.\n     *  @return Token          The credit of the Credit Position.\n     */\n    function getCredit(uint256 _tokenId) external view returns (uint256, uint256, uint256, uint256);\n\n    /**\n     *  @notice Get the debt if of a Credit Position.\n     *\n     *  @param _tokenId        The id of the wrapped token.\n     *  @return Token          The debt of the Credit Position.\n     */\n    function getDebtId(uint256 _tokenId) external view returns (uint256);\n\n    /**\n     *  @notice Get the due (from the Pair) of a Credit Position.\n     *\n     *  @param _tokenId        The id of the wrapped token.\n     *  @return Due            The due of the Credit Position.\n     */\n    function dueOf(uint256 _tokenId) external view returns (IPair.Due memory);\n\n    /**\n     *  @notice Get the credit position id of a due.\n     *\n     *  @param _dueId          The id of the due.\n     *  @return uint256        The credit position id of the due.\n     */\n    function creditPositionOf(uint256 _dueId) external view returns (uint256);\n}\n"
    },
    "contracts/tokens/interfaces/IDue.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { IERC721Permit } from \"./IERC721Permit.sol\";\nimport { IRouter } from \"../../periphery/interfaces/IRouter.sol\";\n\n/// @title Due interface\ninterface IDue is IERC721Permit {\n    function router() external view returns (IRouter);\n\n    function pair() external view returns (IPair);\n\n    function maturity() external view returns (uint256);\n\n    function dueOf(uint256 id) external view returns (IPair.Due memory);\n\n    function mint(address to, uint256 id) external;\n}\n"
    },
    "contracts/tokens/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.8.20;\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IERC20Permit is IERC20Metadata {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/tokens/interfaces/IERC721Extended.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.8.20;\n\nimport { IERC721Metadata } from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport { IERC721Enumerable } from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ninterface IERC721Extended is IERC721Metadata, IERC721Enumerable {\n    function assetDecimals() external view returns (uint8);\n\n    function collateralDecimals() external view returns (uint8);\n}\n"
    },
    "contracts/tokens/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.8.20;\n\nimport { IERC721Extended } from \"./IERC721Extended.sol\";\n\ninterface IERC721Permit is IERC721Extended {\n    // /// @notice The permit typehash used in the permit signature\n    // /// @return The typehash for the permit\n    // function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "contracts/tokens/interfaces/ILiquidity.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.20;\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { IERC20Permit } from \"./IERC20Permit.sol\";\nimport { IRouter } from \"../../periphery/interfaces/IRouter.sol\";\n\n/// @title Liquidity interface\ninterface ILiquidity is IERC20Permit {\n    // VIEW\n\n    function router() external returns (IRouter);\n\n    function pair() external returns (IPair);\n\n    function maturity() external returns (uint256);\n\n    // UPDATE\n\n    function mint(address to, uint256 amount) external;\n\n    function burn(address from, uint256 amount) external;\n}\n"
    },
    "contracts/tokens/libraries/Base64.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.8.20;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides a function for encoding some bytes in base64\nlibrary Base64 {\n    string internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \"\";\n\n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                dataPtr := add(dataPtr, 3)\n\n                // read 3 bytes\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n                resultPtr := add(resultPtr, 1)\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n                resultPtr := add(resultPtr, 1)\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\n                resultPtr := add(resultPtr, 1)\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/tokens/libraries/CreditPositionSVG.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n/* solhint-disable quotes, max-line-length */\n\nimport \"../interfaces/ICreditPositionManager.sol\";\n\npragma solidity =0.8.20;\n\nlibrary CreditPositionSVG {\n    struct SVGParams {\n        Input[] inputs;\n        string color;\n        string title;\n    }\n\n    struct Input {\n        string id;\n        string input;\n        string info;\n        string xTitle;\n        string yTitle;\n        string xInfo;\n        string yInfo;\n        bool rotate;\n        bool bold;\n        string fillInfo;\n    }\n\n    string constant BEGINNING =\n        string('<svg width=\"417\" height=\"609\" viewBox=\"0 0 417 609\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">');\n\n    string constant END =\n        string(\n            '<g filter=\"url(#filter0_d_1838_20465)\"><path d=\"M341.412 20.5206H370.418C382.568 20.5206 392.418 30.3704 392.418 42.5206V101.959\" stroke=\"#FFBD13\" stroke-miterlimit=\"1.41421\" stroke-linecap=\"round\"/></g><g filter=\"url(#filter1_d_1838_20465)\"><path d=\"M341.412 20.5205H370.418C382.568 20.5205 392.418 30.3702 392.418 42.5205V101.959\" stroke=\"#FFBD13\" stroke-miterlimit=\"1.41421\" stroke-linecap=\"round\"/></g><g filter=\"url(#filter2_d_1838_20465)\"><path d=\"M315.241 20.5205H370.418C382.568 20.5205 392.418 30.3702 392.418 42.5205V122.998\" stroke=\"#FFBD13\" stroke-miterlimit=\"1.41421\" stroke-linecap=\"round\"/></g><g filter=\"url(#filter3_d_1838_20465)\"><path d=\"M315.241 20.5205H370.418C382.568 20.5205 392.418 30.3702 392.418 42.5205V122.998\" class=\"S\" stroke-width=\"2\" stroke-miterlimit=\"1.41421\" stroke-linecap=\"round\"/></g><path d=\"M1 25C1 16.7157 7.71573 10 16 10H200L315.611 10C322.318 10 327.758 15.431 327.769 22.1378C327.782 29.9479 334.117 36.2723 341.927 36.2723H362.791C371.075 36.2723 377.791 42.988 377.791 51.2723V105.501C377.791 111.917 382.974 117.128 389.39 117.162C394.706 117.191 399 121.508 399 126.824V309V593C399 601.284 392.284 608 384 608H16C7.71574 608 1 601.284 1 593V25Z\" fill=\"black\" stroke=\"#2B2D2F\" stroke-width=\"2\"/><use href=\"#pair\" /><use href=\"#title\" /><use href=\"#tokenid\" /><use href=\"#firstdata\"/><use href=\"#seconddata\"/><use href=\"#maturity\" /><rect x=\"112.864\" y=\"213.734\" width=\"173.392\" height=\"173.392\" rx=\"86.696\" fill=\"#0F0F0F\"/><g filter=\"url(#filter4_d_1838_20465)\"><path d=\"M276.262 301.273C276.262 321.837 268.08 340.49 254.794 354.153M200.403 377.132C175.785 377.132 153.905 365.405 140.046 347.232C130.32 334.478 124.544 318.55 124.544 301.273M164.689 234.331C175.332 228.64 187.491 225.414 200.403 225.414C237.182 225.414 267.847 251.587 274.79 286.323M276.266 301.273C276.266 321.837 268.084 340.489 254.797 354.153\" class=\"S\" stroke-width=\"2.70925\" stroke-linecap=\"round\"/></g><g opacity=\"0.3\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M192.652 235.79C185.642 236.553 177.16 239.117 170.412 242.513C165.627 244.921 158.745 249.581 156.475 251.95L155.12 253.364L161.181 259.439L167.242 265.513L169.146 263.974C186.716 249.765 210.812 249.191 228.394 262.561L232.204 265.458L238.256 259.369L244.308 253.279L241.961 251.133C234.99 244.757 223.985 239.288 213.314 236.899C209.139 235.965 197.025 235.314 192.652 235.79ZM191.481 266.311C187.758 267.125 180.645 270.562 178.094 272.781L176.216 274.415L182.248 280.483L188.28 286.551L191.589 284.855C194.775 283.223 194.76 282.826 199.558 282.826C202.75 282.826 204.941 283.205 207.966 284.876L211.07 286.592L217.123 280.504L223.176 274.415L221.298 272.781C218.842 270.646 211.796 267.261 207.817 266.307C203.938 265.375 195.753 265.378 191.481 266.311ZM171.511 279.511C163.611 289.857 162.336 304.583 168.308 316.5C169.271 318.422 170.849 320.899 171.815 322.005L173.572 324.016L179.71 317.907L185.848 311.797L184.725 310.145C181.168 304.91 181.167 296.163 184.723 290.929L185.844 289.28L179.863 283.285C176.573 279.988 173.729 277.291 173.544 277.291C173.358 277.291 172.443 278.29 171.511 279.511ZM195.437 295.722C192.42 298.494 192.424 302.73 195.446 305.383C198.321 307.908 201.735 307.771 204.366 305.024C206.921 302.357 206.74 298.282 203.954 295.722C202.498 294.385 201.971 294.196 199.696 294.196C197.42 294.196 196.894 294.385 195.437 295.722ZM210.027 315.164C208.475 316.365 205.295 317.599 202.395 318.125C198.869 318.764 195.067 318.092 191.112 316.128L188.164 314.665L182.307 320.507C179.086 323.721 176.45 326.575 176.45 326.85C176.45 327.405 182.792 331.652 185.387 332.834C192.228 335.951 202.039 336.599 209.371 334.419C214.785 332.809 222.867 328.281 222.923 326.827C222.933 326.565 220.247 323.67 216.954 320.394C211.262 314.732 210.92 314.474 210.027 315.164ZM229.432 337.803C213.033 351.385 188.156 351.69 170.868 338.518C169.043 337.128 167.384 335.991 167.18 335.991C166.976 335.991 164.179 338.627 160.965 341.85L155.121 347.708L156.511 349.176C160.575 353.47 171.716 359.955 179.287 362.436C186.576 364.824 190.154 365.331 199.696 365.331C209.238 365.331 212.817 364.823 220.105 362.435C227.716 359.941 236.608 354.851 242.584 349.569L244.49 347.885L238.355 341.703C234.982 338.303 232.194 335.538 232.16 335.558C232.126 335.578 230.899 336.588 229.432 337.803Z\" class=\"M\"/><path d=\"M135.328 290.441C137.122 279.114 142.607 267.147 149.853 258.755C151.089 257.323 152.242 256.152 152.417 256.152C152.84 256.152 164.255 267.55 164.255 267.972C164.255 268.153 163.091 269.846 161.669 271.736C157.59 277.156 155.101 282.34 153.143 289.494C151.827 294.301 151.954 307.169 153.369 312.505C154.734 317.647 158.863 326.016 161.886 329.765C163.189 331.381 164.255 332.863 164.255 333.059C164.255 333.256 161.617 336.048 158.392 339.265L152.53 345.113L150.617 343.249C144.752 337.535 138.265 324.576 135.802 313.655C134.645 308.521 134.396 296.325 135.328 290.441Z\" class=\"M\"/><path d=\"M225.148 276.717L229.571 272.316C232.003 269.896 234.239 267.911 234.539 267.904C235.691 267.879 240.665 274.896 243.19 280.108C251.27 296.788 248.484 317.995 236.436 331.524L234.763 333.402L230.269 328.95C227.797 326.502 225.775 324.318 225.775 324.098C225.775 323.878 226.481 322.818 227.344 321.741C231.806 316.176 234.683 307.848 234.694 300.464C234.704 293.697 231.084 283.604 226.911 278.762L225.148 276.717Z\" class=\"M\"/></g><defs><filter id=\"filter0_d_1838_20465\" x=\"317.912\" y=\"1.02063\" width=\"98.0062\" height=\"128.438\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/><feOffset dy=\"4\"/><feGaussianBlur stdDeviation=\"11.5\"/><feComposite in2=\"hardAlpha\" operator=\"out\"/><feColorMatrix type=\"matrix\" values=\"0 0 0 0 1 0 0 0 0 0.741176 0 0 0 0 0.905882 0 0 0 1 0\"/><feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow_1838_20465\"/><feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow_1838_20465\" result=\"shape\"/></filter><filter id=\"filter1_d_1838_20465\" x=\"317.912\" y=\"1.02051\" width=\"98.0062\" height=\"128.438\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/><feOffset dy=\"4\"/><feGaussianBlur stdDeviation=\"11.5\"/><feComposite in2=\"hardAlpha\" operator=\"out\"/><feColorMatrix type=\"matrix\" values=\"0 0 0 0 1 0 0 0 0 0.741176 0 0 0 0 0.905882 0 0 0 1 0\"/><feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow_1838_20465\"/><feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow_1838_20465\" result=\"shape\"/></filter><filter id=\"filter2_d_1838_20465\" x=\"291.741\" y=\"1.02051\" width=\"124.177\" height=\"149.477\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/><feOffset dy=\"4\"/><feGaussianBlur stdDeviation=\"11.5\"/><feComposite in2=\"hardAlpha\" operator=\"out\"/><feColorMatrix type=\"matrix\" values=\"0 0 0 0 1 0 0 0 0 0.741176 0 0 0 0 0.905882 0 0 0 1 0\"/><feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow_1838_20465\"/><feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow_1838_20465\" result=\"shape\"/></filter><filter id=\"filter3_d_1838_20465\" x=\"291.241\" y=\"0.520508\" width=\"125.177\" height=\"150.477\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/><feOffset dy=\"4\"/><feGaussianBlur stdDeviation=\"11.5\"/><feComposite in2=\"hardAlpha\" operator=\"out\"/><feColorMatrix type=\"matrix\" values=\"0 0 0 0 1 0 0 0 0 0.741176 0 0 0 0 0.905882 0 0 0 1 0\"/><feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow_1838_20465\"/><feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow_1838_20465\" result=\"shape\"/></filter><filter id=\"filter4_d_1838_20465\" x=\"115.062\" y=\"215.932\" width=\"170.686\" height=\"170.683\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/><feOffset/><feGaussianBlur stdDeviation=\"4.06387\"/><feComposite in2=\"hardAlpha\" operator=\"out\"/><feColorMatrix type=\"matrix\" values=\"0 0 0 0 1 0 0 0 0 0.741176 0 0 0 0 0.905882 0 0 0 1 0\"/><feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow_1838_20465\"/><feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow_1838_20465\" result=\"shape\"/></filter></defs></svg>'\n        );\n\n    // slither-disable-next-line encode-packed-collision\n    function constructSVG(SVGParams memory params) public pure returns (string memory) {\n        return string(abi.encodePacked(BEGINNING, generateStyles(params), generatesDefs(params), END));\n    }\n\n    function generatesDefs(SVGParams memory params) internal pure returns (string memory) {\n        string memory textFields;\n\n        for (uint i = 0; i < params.inputs.length; i++) {\n            textFields = string(abi.encodePacked(textFields, generateTextField(params.inputs[i])));\n        }\n\n        return string(abi.encodePacked(\"<defs>\", params.title, textFields, \"</defs>\"));\n    }\n\n    function generateStyles(SVGParams memory params) internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    '<style type=\"text/css\" >.M{fill:',\n                    params.color,\n                    \"}.S{stroke:\",\n                    params.color,\n                    \"}</style>\"\n                )\n            );\n    }\n\n    function generateTextField(Input memory input) internal pure returns (string memory) {\n        string memory titleField = string(\n            abi.encodePacked(\n                '<g opacity=\"0.8\" id=\"',\n                input.id,\n                '\">',\n                '<text transform=\"translate(',\n                input.xTitle,\n                \" \",\n                input.yTitle,\n                input.rotate ? ') rotate(-90)\" ' : ')\" ',\n                ' fill=\"#F4F4F4\" xml:space=\"preserve\" style=\"white-space: pre\" font-family=\"Courier New\" font-size=\"16\" font-weight=\"bold\" letter-spacing=\"0em\"><tspan x=\"0\" y=\"16.2578\">',\n                input.input,\n                \"</tspan></text>\"\n            )\n        );\n\n        string memory infoField = string(\n            abi.encodePacked(\n                '<text transform=\"translate(',\n                input.xInfo,\n                \" \",\n                input.yInfo,\n                input.rotate ? ') rotate(-90)\" ' : ')\" ',\n                'fill=\"',\n                input.fillInfo,\n                '\" xml:space=\"preserve\" style=\"white-space: pre\" font-family=\"Courier New\" font-size=\"16\" letter-spacing=\"0em\"',\n                input.bold ? ' font-weight=\"bold\" ' : \"\",\n                '><tspan x=\"0\" y=\"16.2578\">',\n                input.info,\n                \"</tspan></text>\",\n                \"</g>\"\n            )\n        );\n\n        return string(abi.encodePacked(titleField, infoField));\n    }\n}\n"
    },
    "contracts/tokens/libraries/DateTime.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's DateTime Library v1.01\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n// ----------------------------------------------------------------------------\n\nlibrary DateTime {\n    uint256 constant SECONDS_PER_DAY = 86400;\n    uint256 constant SECONDS_PER_HOUR = 3600;\n    uint256 constant SECONDS_PER_MINUTE = 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    uint256 constant DOW_MON = 1;\n    uint256 constant DOW_TUE = 2;\n    uint256 constant DOW_WED = 3;\n    uint256 constant DOW_THU = 4;\n    uint256 constant DOW_FRI = 5;\n    uint256 constant DOW_SAT = 6;\n    uint256 constant DOW_SUN = 7;\n\n    // ------------------------------------------------------------------------\n    // Calculate the number of days from 1970/01/01 to year/month/day using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // days = day\n    //      - 32075\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n    //      - offset\n    // ------------------------------------------------------------------------\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\n        require(year >= 1970);\n        int256 _year = int256(year);\n        int256 _month = int256(month);\n        int256 _day = int256(day);\n\n        int256 __days = _day -\n            32075 +\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\n            4 +\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\n            12 -\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\n            4 -\n            OFFSET19700101;\n\n        _days = uint256(__days);\n    }\n\n    // ------------------------------------------------------------------------\n    // Calculate year/month/day from the number of days since 1970/01/01 using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // int L = days + 68569 + offset\n    // int N = 4 * L / 146097\n    // L = L - (146097 * N + 3) / 4\n    // year = 4000 * (L + 1) / 1461001\n    // L = L - 1461 * year / 4 + 31\n    // month = 80 * L / 2447\n    // dd = L - 2447 * month / 80\n    // L = month / 11\n    // month = month + 2 - 12 * L\n    // year = 100 * (N - 49) + year + L\n    // ------------------------------------------------------------------------\n    function _daysToDate(uint256 _days) internal pure returns (uint256 year, uint256 month, uint256 day) {\n        int256 __days = int256(_days);\n\n        //slither-disable-next-line write-after-write\n        int256 L = __days + 68569 + OFFSET19700101;\n        int256 N = (4 * L) / 146097;\n        L = L - (146097 * N + 3) / 4;\n        int256 _year = (4000 * (L + 1)) / 1461001;\n        L = L - (1461 * _year) / 4 + 31;\n        int256 _month = (80 * L) / 2447;\n        int256 _day = L - (2447 * _month) / 80;\n        L = _month / 11;\n        _month = _month + 2 - 12 * L;\n        _year = 100 * (N - 49) + _year + L;\n\n        year = uint256(_year);\n        month = uint256(_month);\n        day = uint256(_day);\n    }\n\n    function timestampFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 timestamp) {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\n    }\n\n    function timestampFromDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    ) internal pure returns (uint256 timestamp) {\n        timestamp =\n            _daysFromDate(year, month, day) *\n            SECONDS_PER_DAY +\n            hour *\n            SECONDS_PER_HOUR +\n            minute *\n            SECONDS_PER_MINUTE +\n            second;\n    }\n\n    function timestampToDate(uint256 timestamp) internal pure returns (uint256 year, uint256 month, uint256 day) {\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function timestampToDateTime(\n        uint256 timestamp\n    ) internal pure returns (uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second) {\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        uint256 secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n        secs = secs % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n        second = secs % SECONDS_PER_MINUTE;\n    }\n\n    function isValidDate(uint256 year, uint256 month, uint256 day) internal pure returns (bool valid) {\n        if (year >= 1970 && month != 0 && month <= 12) {\n            if (day != 0 && day <= _getDaysInMonth(year, month)) {\n                valid = true;\n            }\n        }\n    }\n\n    function isValidDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    ) internal pure returns (bool valid) {\n        if (isValidDate(year, month, day)) {\n            if (hour < 24 && minute < 60 && second < 60) {\n                valid = true;\n            }\n        }\n    }\n\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        leapYear = _isLeapYear(year);\n    }\n\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n    }\n\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\n    }\n\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\n    }\n\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\n        (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        daysInMonth = _getDaysInMonth(year, month);\n    }\n\n    function _getDaysInMonth(uint256 year, uint256 month) internal pure returns (uint256 daysInMonth) {\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            daysInMonth = 31;\n        } else if (month != 2) {\n            daysInMonth = 30;\n        } else {\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\n        }\n    }\n\n    // 1 = Monday, 7 = Sunday\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\n        uint256 _days = timestamp / SECONDS_PER_DAY;\n        dayOfWeek = ((_days + 3) % 7) + 1;\n    }\n\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\n        uint256 secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n    }\n\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n    }\n\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\n        second = timestamp % SECONDS_PER_MINUTE;\n    }\n\n    function addYears(uint256 timestamp, uint256 _years) internal pure returns (uint256 newTimestamp) {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        year += _years;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp >= timestamp);\n    }\n\n    function addMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        month += _months;\n        year += (month - 1) / 12;\n        month = ((month - 1) % 12) + 1;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp >= timestamp);\n    }\n\n    function addDays(uint256 timestamp, uint256 _days) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\n        require(newTimestamp >= timestamp);\n    }\n\n    function addHours(uint256 timestamp, uint256 _hours) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\n        require(newTimestamp >= timestamp);\n    }\n\n    function addMinutes(uint256 timestamp, uint256 _minutes) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\n        require(newTimestamp >= timestamp);\n    }\n\n    function addSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp + _seconds;\n        require(newTimestamp >= timestamp);\n    }\n\n    function subYears(uint256 timestamp, uint256 _years) internal pure returns (uint256 newTimestamp) {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        year -= _years;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp <= timestamp);\n    }\n\n    function subMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\n        //slither-disable-start write-after-write\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\n        year = yearMonth / 12;\n        month = (yearMonth % 12) + 1;\n        //slither-disable-end write-after-write\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp <= timestamp);\n    }\n\n    function subDays(uint256 timestamp, uint256 _days) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\n        require(newTimestamp <= timestamp);\n    }\n\n    function subHours(uint256 timestamp, uint256 _hours) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\n        require(newTimestamp <= timestamp);\n    }\n\n    function subMinutes(uint256 timestamp, uint256 _minutes) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\n        require(newTimestamp <= timestamp);\n    }\n\n    function subSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\n        newTimestamp = timestamp - _seconds;\n        require(newTimestamp <= timestamp);\n    }\n\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _years) {\n        require(fromTimestamp <= toTimestamp);\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n        _years = toYear - fromYear;\n    }\n\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _months) {\n        require(fromTimestamp <= toTimestamp);\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\n    }\n\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _days) {\n        require(fromTimestamp <= toTimestamp);\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\n    }\n\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _hours) {\n        require(fromTimestamp <= toTimestamp);\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\n    }\n\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _minutes) {\n        require(fromTimestamp <= toTimestamp);\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\n    }\n\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _seconds) {\n        require(fromTimestamp <= toTimestamp);\n        _seconds = toTimestamp - fromTimestamp;\n    }\n}\n"
    },
    "contracts/tokens/libraries/NFTTokenURIScaffold.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n/* solhint-disable quotes, max-line-length */\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport { IPair } from \"../../core/interfaces/IPair.sol\";\nimport { ICreditPositionManager } from \"../interfaces/ICreditPositionManager.sol\";\nimport { SafeMetadata } from \"./SafeMetadata.sol\";\nimport { DateTime } from \"./DateTime.sol\";\nimport { CreditPositionSVG } from \"./CreditPositionSVG.sol\";\n\nimport \"./Base64.sol\";\n\nlibrary NFTTokenURIScaffold {\n    using SafeMetadata for IERC20;\n    using Strings for uint256;\n\n    struct NFTParams {\n        uint256 tokenId;\n        IPair pair;\n        uint256 maturity;\n        ICreditPositionManager.PositionType positionType;\n        uint256 liquidityAmount;\n        uint256 debtRequired;\n        uint256 collateralLocked;\n        uint256 loanAmount;\n        uint256 coverageAmount;\n    }\n\n    string constant DEBT_COLOR = \"#FFBD13\";\n    string constant CREDIT_COLOR = \"#98FFFF\";\n    string constant LIQUIDITY_COLOR = \"#FFBDE7\";\n\n    string constant DEBT_TITLE =\n        string(\n            '<g id=\"title\"><path d=\"M38.8145 69.6602V68.1855H40.2988V66.7012H41.7734V50.4023H40.2988V48.9277H38.8145V47.4434H28.4434V69.6602H38.8145ZM24 74.1035V43H41.7734V44.4746H43.2578V45.959H44.7422V47.4434H46.2168V69.6602H44.7422V71.1445H43.2578V72.6289H41.7734V74.1035H24Z\" class=\"M\"/><path d=\"M55.123 74.1035V72.6289H53.6387V71.1445H52.1641V69.6602H50.6797V47.4434H52.1641V45.959H53.6387V44.4746H55.123V43H72.8965V47.4434H58.082V48.9277H56.6074V50.4023H55.123V56.3301H68.4531V60.7734H55.123V66.7012H56.6074V68.1855H58.082V69.6602H72.8965V74.1035H55.123Z\" class=\"M\"/><path d=\"M92.1738 69.6602V68.1855H93.6582V66.7012H95.1328V63.7422H93.6582V62.2578H92.1738V60.7734H81.8027V69.6602H92.1738ZM92.1738 56.3301V54.8457H93.6582V53.3711H95.1328V50.4023H93.6582V48.9277H92.1738V47.4434H81.8027V56.3301H92.1738ZM77.3594 74.1035V43H95.1328V44.4746H96.6172V45.959H98.1016V47.4434H99.5762V56.3301H98.1016V57.8145H96.6172V59.2891H98.1016V60.7734H99.5762V69.6602H98.1016V71.1445H96.6172V72.6289H95.1328V74.1035H77.3594Z\" class=\"M\"/><path d=\"M112.926 74.1035V47.4434H104.039V43H126.256V47.4434H117.369V74.1035H112.926Z\" class=\"M\"/></g>'\n        );\n    string constant CREDIT_TITLE =\n        string(\n            '<g id=\"title\"><path d=\"M28.4434 74.1035V72.6289H26.959V71.1445H25.4844V69.6602H24V47.4434H25.4844V45.959H26.959V44.4746H28.4434V43H41.7734V44.4746H43.2578V45.959H44.7422V47.4434H46.2168V51.8867H41.7734V50.4023H40.2988V48.9277H38.8145V47.4434H31.4023V48.9277H29.9277V50.4023H28.4434V66.7012H29.9277V68.1855H31.4023V69.6602H38.8145V68.1855H40.2988V66.7012H41.7734V65.2168H46.2168V69.6602H44.7422V71.1445H43.2578V72.6289H41.7734V74.1035H28.4434Z\" class=\"M\"/><path d=\"M65.4941 56.3301V54.8457H66.9785V53.3711H68.4531V50.4023H66.9785V48.9277H65.4941V47.4434H55.123V56.3301H65.4941ZM50.6797 74.1035V43H68.4531V44.4746H69.9375V45.959H71.4219V47.4434H72.8965V56.3301H71.4219V57.8145H69.9375V59.2891H68.4531V60.7734H64.0098V62.2578H65.4941V63.7422H66.9785V65.2168H68.4531V66.7012H69.9375V68.1855H71.4219V69.6602H72.8965V74.1035H68.4531V72.6289H66.9785V71.1445H65.4941V69.6602H64.0098V68.1855H62.5352V66.7012H61.0508V65.2168H59.5664V63.7422H58.082V62.2578H56.6074V60.7734H55.123V74.1035H50.6797Z\" class=\"M\"/><path d=\"M81.8027 74.1035V72.6289H80.3184V71.1445H78.8438V69.6602H77.3594V47.4434H78.8438V45.959H80.3184V44.4746H81.8027V43H99.5762V47.4434H84.7617V48.9277H83.2871V50.4023H81.8027V56.3301H95.1328V60.7734H81.8027V66.7012H83.2871V68.1855H84.7617V69.6602H99.5762V74.1035H81.8027Z\" class=\"M\"/><path d=\"M118.854 69.6602V68.1855H120.338V66.7012H121.812V50.4023H120.338V48.9277H118.854V47.4434H108.482V69.6602H118.854ZM104.039 74.1035V43H121.812V44.4746H123.297V45.959H124.781V47.4434H126.256V69.6602H124.781V71.1445H123.297V72.6289H121.812V74.1035H104.039Z\" class=\"M\"/><path d=\"M130.719 74.1035V69.6602H139.605V47.4434H130.719V43H152.936V47.4434H144.049V69.6602H152.936V74.1035H130.719Z\" class=\"M\"/><path d=\"M166.285 74.1035V47.4434H157.398V43H179.615V47.4434H170.729V74.1035H166.285Z\" class=\"M\"/></g>'\n        );\n    string constant LIQUIDITY_TITLE =\n        string(\n            '<g id=\"title\"><path d=\"M24 74.1035V43H28.4434V69.6602H46.2168V74.1035H24Z\" class=\"M\"/><path d=\"M50.6797 74.1035V69.6602H59.5664V47.4434H50.6797V43H72.8965V47.4434H64.0098V69.6602H72.8965V74.1035H50.6797Z\" class=\"M\"/>    <path d=\"M90.6895 69.6602V68.1855H89.2148V66.7012H87.7305V65.2168H86.2461V60.7734H90.6895V62.2578H92.1738V63.7422H93.6582V65.2168H95.1328V50.4023H93.6582V48.9277H92.1738V47.4434H84.7617V48.9277H83.2871V50.4023H81.8027V66.7012H83.2871V68.1855H84.7617V69.6602H90.6895ZM81.8027 74.1035V72.6289H80.3184V71.1445H78.8438V69.6602H77.3594V47.4434H78.8438V45.959H80.3184V44.4746H81.8027V43H95.1328V44.4746H96.6172V45.959H98.1016V47.4434H99.5762V65.2168H98.1016V66.7012H96.6172V68.1855H98.1016V69.6602H99.5762V74.1035H95.1328V72.6289H93.6582V71.1445H92.1738V72.6289H90.6895V74.1035H81.8027Z\" class=\"M\"/>    <path d=\"M108.482 74.1035V72.6289H106.998V71.1445H105.523V69.6602H104.039V43H108.482V66.7012H109.967V68.1855H111.441V69.6602H118.854V68.1855H120.338V66.7012H121.812V43H126.256V69.6602H124.781V71.1445H123.297V72.6289H121.812V74.1035H108.482Z\" class=\"M\"/>    <path d=\"M130.719 74.1035V69.6602H139.605V47.4434H130.719V43H152.936V47.4434H144.049V69.6602H152.936V74.1035H130.719Z\" class=\"M\"/>    <path d=\"M172.213 69.6602V68.1855H173.697V66.7012H175.172V50.4023H173.697V48.9277H172.213V47.4434H161.842V69.6602H172.213ZM157.398 74.1035V43H175.172V44.4746H176.656V45.959H178.141V47.4434H179.615V69.6602H178.141V71.1445H176.656V72.6289H175.172V74.1035H157.398Z\" class=\"M\"/>    <path d=\"M184.078 74.1035V69.6602H192.965V47.4434H184.078V43H206.295V47.4434H197.408V69.6602H206.295V74.1035H184.078Z\" class=\"M\"/>    <path d=\"M219.645 74.1035V47.4434H210.758V43H232.975V47.4434H224.088V74.1035H219.645Z\" class=\"M\"/>    <path d=\"M246.324 74.1035V59.2891H244.84V57.8145H243.365V56.3301H241.881V54.8457H240.396V53.3711H238.922V51.8867H237.438V43H241.881V48.9277H243.365V50.4023H244.84V51.8867H246.324V53.3711H247.809V54.8457H249.293V53.3711H250.768V51.8867H252.252V50.4023H253.736V48.9277H255.211V43H259.654V51.8867H258.18V53.3711H256.695V54.8457H255.211V56.3301H253.736V57.8145H252.252V59.2891H250.768V74.1035H246.324Z\" class=\"M\"/></g>'\n        );\n\n    function tokenURI(NFTParams memory params) public view returns (string memory) {\n        //slither-disable-start uninitialized-local\n        string memory uri;\n        string memory description;\n        //slither-disable-end uninitialized-local\n\n        CreditPositionSVG.Input memory pairInput = CreditPositionSVG.Input({\n            id: \"pair\",\n            input: \"Pair\",\n            info: string(\n                abi.encodePacked(\n                    parseSymbol(IERC20(params.pair.asset()).safeSymbol()),\n                    \"/\",\n                    parseSymbol(IERC20(params.pair.collateral()).safeSymbol())\n                )\n            ),\n            xTitle: \"23\",\n            yTitle: \"377\",\n            xInfo: \"23\",\n            yInfo: \"320\",\n            rotate: true,\n            bold: false,\n            fillInfo: \"#F4F4F4\"\n        });\n\n        CreditPositionSVG.Input memory tokenIdInput = CreditPositionSVG.Input({\n            id: \"tokenid\",\n            input: \"Token ID\",\n            info: params.tokenId.toString(),\n            xTitle: \"24\",\n            yTitle: \"96\",\n            xInfo: \"113\",\n            yInfo: \"96\",\n            rotate: false,\n            bold: false,\n            fillInfo: \"#F4F4F4\"\n        });\n\n        if (params.positionType == ICreditPositionManager.PositionType.LIQUIDITY) {\n            description = constructLiquidityDescription(params);\n\n            CreditPositionSVG.Input[] memory inputs = new CreditPositionSVG.Input[](4);\n\n            inputs[0] = pairInput;\n            inputs[1] = CreditPositionSVG.Input({\n                id: \"firstdata\",\n                input: \"LP Amount\",\n                info: weiToPrecisionString(params.liquidityAmount, params.pair.asset().safeDecimals()),\n                xTitle: \"24\",\n                yTitle: \"532\",\n                xInfo: \"200\",\n                yInfo: \"532\",\n                rotate: false,\n                bold: false,\n                fillInfo: \"#F2F2F2\"\n            });\n            inputs[2] = CreditPositionSVG.Input({\n                id: \"maturity\",\n                input: \"Maturity\",\n                info: getReadableDateString(params.maturity),\n                xTitle: \"362\",\n                yTitle: \"500\",\n                xInfo: \"362\",\n                yInfo: \"400\",\n                rotate: true,\n                bold: true,\n                fillInfo: LIQUIDITY_COLOR\n            });\n            inputs[3] = tokenIdInput;\n            uri = constructTokenSVG(inputs, LIQUIDITY_COLOR, LIQUIDITY_TITLE);\n        } else if (params.positionType == ICreditPositionManager.PositionType.DEBT) {\n            description = constructDebtDescription(params);\n\n            CreditPositionSVG.Input[] memory inputs = new CreditPositionSVG.Input[](5);\n\n            inputs[0] = pairInput;\n            inputs[1] = CreditPositionSVG.Input({\n                id: \"firstdata\",\n                input: \"Debt\",\n                info: string(\n                    abi.encodePacked(\n                        weiToPrecisionString(params.debtRequired, params.pair.asset().safeDecimals()),\n                        \" \",\n                        parseSymbol(IERC20(params.pair.asset()).safeSymbol())\n                    )\n                ),\n                xTitle: \"24\",\n                yTitle: \"532\",\n                xInfo: \"200\",\n                yInfo: \"532\",\n                rotate: false,\n                bold: false,\n                fillInfo: \"#F2F2F2\"\n            });\n            inputs[2] = CreditPositionSVG.Input({\n                id: \"seconddata\",\n                input: \"Collateral\",\n                info: string(\n                    abi.encodePacked(\n                        weiToPrecisionString(params.collateralLocked, params.pair.collateral().safeDecimals()),\n                        \" \",\n                        parseSymbol(IERC20(params.pair.collateral()).safeSymbol())\n                    )\n                ),\n                xTitle: \"24\",\n                yTitle: \"566\",\n                xInfo: \"200\",\n                yInfo: \"566\",\n                rotate: false,\n                bold: false,\n                fillInfo: \"#F2F2F2\"\n            });\n            inputs[3] = CreditPositionSVG.Input({\n                id: \"maturity\",\n                input: \"Maturity\",\n                info: getReadableDateString(params.maturity),\n                xTitle: \"362\",\n                yTitle: \"500\",\n                xInfo: \"362\",\n                yInfo: \"400\",\n                rotate: true,\n                bold: true,\n                fillInfo: DEBT_COLOR\n            });\n            inputs[4] = tokenIdInput;\n            uri = constructTokenSVG(inputs, DEBT_COLOR, DEBT_TITLE);\n        } else if (params.positionType == ICreditPositionManager.PositionType.CREDIT) {\n            description = constructCreditDescription(params);\n            CreditPositionSVG.Input[] memory inputs = new CreditPositionSVG.Input[](5);\n\n            inputs[0] = pairInput;\n            inputs[1] = CreditPositionSVG.Input({\n                id: \"firstdata\",\n                input: \"Loan\",\n                info: string(\n                    abi.encodePacked(\n                        weiToPrecisionString(params.loanAmount, params.pair.asset().safeDecimals()),\n                        \" \",\n                        parseSymbol(IERC20(params.pair.asset()).safeSymbol())\n                    )\n                ),\n                xTitle: \"24\",\n                yTitle: \"532\",\n                xInfo: \"200\",\n                yInfo: \"532\",\n                rotate: false,\n                bold: false,\n                fillInfo: \"#F2F2F2\"\n            });\n            inputs[2] = CreditPositionSVG.Input({\n                id: \"seconddata\",\n                input: \"Coverage\",\n                info: string(\n                    abi.encodePacked(\n                        weiToPrecisionString(params.coverageAmount, params.pair.collateral().safeDecimals()),\n                        \" \",\n                        parseSymbol(IERC20(params.pair.collateral()).safeSymbol())\n                    )\n                ),\n                xTitle: \"24\",\n                yTitle: \"566\",\n                xInfo: \"200\",\n                yInfo: \"566\",\n                rotate: false,\n                bold: false,\n                fillInfo: \"#F2F2F2\"\n            });\n            inputs[3] = CreditPositionSVG.Input({\n                id: \"maturity\",\n                input: \"Maturity\",\n                info: getReadableDateString(params.maturity),\n                xTitle: \"362\",\n                yTitle: \"500\",\n                xInfo: \"362\",\n                yInfo: \"400\",\n                rotate: true,\n                bold: true,\n                fillInfo: CREDIT_COLOR\n            });\n            inputs[4] = tokenIdInput;\n\n            uri = constructTokenSVG(inputs, CREDIT_COLOR, CREDIT_TITLE);\n        }\n\n        string memory name = \"Credit Position\";\n\n        return (constructTokenURI(name, description, uri));\n    }\n\n    function constructDebtDescription(NFTParams memory params) internal view returns (string memory) {\n        string memory description = string(\n            abi.encodePacked(\n                \"This credit position represents a debt of \",\n                weiToPrecisionString(params.debtRequired, params.pair.asset().safeDecimals()),\n                \" \",\n                params.pair.asset().safeSymbol(),\n                \" borrowed against a collateral of \",\n                weiToPrecisionString(params.collateralLocked, params.pair.collateral().safeDecimals()),\n                \" \",\n                params.pair.collateral().safeSymbol(),\n                \". This position will expire on \",\n                params.maturity.toString(),\n                \" unix epoch time.\\\\nThe owner of this NFT has the option to pay the debt before maturity time to claim the locked collateral. In case the owner choose to default on the debt payment, the collateral will be forfeited.\"\n            )\n        );\n\n        description = string(\n            abi.encodePacked(\n                description,\n                \"\\\\n\\\\nAsset Address: \",\n                addressToString(address(params.pair.asset())),\n                \"\\\\n\\\\nCollateral Address: \",\n                addressToString(address(params.pair.collateral())),\n                \"\\\\n\\\\nTotal Debt: \",\n                weiToPrecisionLongString(params.debtRequired, params.pair.asset().safeDecimals()),\n                \" \",\n                IERC20(params.pair.asset()).safeSymbol(),\n                \"\\\\n\\\\nCollateral Locked: \",\n                weiToPrecisionLongString(params.collateralLocked, params.pair.collateral().safeDecimals()),\n                \" \",\n                IERC20(params.pair.collateral()).safeSymbol()\n            )\n        );\n\n        return description;\n    }\n\n    function constructLiquidityDescription(NFTParams memory params) internal view returns (string memory) {\n        string memory description = string(\n            abi.encodePacked(\n                \"This credit position represents a liquidity of \",\n                weiToPrecisionString(params.liquidityAmount, 18),\n                \" in the \",\n                params.pair.asset().safeSymbol(),\n                \"/\",\n                params.pair.collateral().safeSymbol(),\n                \" pool. \",\n                \"This position will expire on \",\n                params.maturity.toString(),\n                \" unix epoch time.\\\\nThe owner of this NFT has the option to burn the liquidity after maturity time to claim liquidity in the pool + fees.\"\n            )\n        );\n        description = string(\n            abi.encodePacked(\n                description,\n                \"\\\\n\\\\nAsset Address: \",\n                addressToString(address(params.pair.asset())),\n                \"\\\\n\\\\nCollateral Address: \",\n                addressToString(address(params.pair.collateral())),\n                \"\\\\n\\\\nTotal liquidity amount: \",\n                weiToPrecisionLongString(params.liquidityAmount, 18)\n            )\n        );\n        return description;\n    }\n\n    function constructCreditDescription(NFTParams memory params) internal view returns (string memory) {\n        string memory description = string(\n            abi.encodePacked(\n                \"This credit position represents a credit of \",\n                weiToPrecisionString(params.loanAmount, params.pair.asset().safeDecimals()),\n                \" \",\n                params.pair.asset().safeSymbol(),\n                \" with an coverage of \",\n                weiToPrecisionString(params.coverageAmount, params.pair.collateral().safeDecimals()),\n                \" \",\n                params.pair.collateral().safeSymbol(),\n                \" in the \",\n                params.pair.asset().safeSymbol(),\n                \"/\",\n                params.pair.collateral().safeSymbol(),\n                \" pool. \",\n                \"This position will expire on \",\n                params.maturity.toString(),\n                \" unix epoch time.\\\\nThe owner of this NFT has the option to get the loans after maturity time.\"\n            )\n        );\n\n        description = string(\n            abi.encodePacked(\n                description,\n                \"\\\\n\\\\nAsset Address: \",\n                addressToString(address(params.pair.asset())),\n                \"\\\\n\\\\nCollateral Address: \",\n                addressToString(address(params.pair.collateral())),\n                \"\\\\n\\\\nTotal loans: \",\n                weiToPrecisionLongString(params.loanAmount, params.pair.asset().safeDecimals()),\n                \"\\\\n\\\\nTotal coverage: \",\n                weiToPrecisionLongString(params.coverageAmount, params.pair.collateral().safeDecimals())\n            )\n        );\n\n        return description;\n    }\n\n    function constructTokenURI(\n        string memory name,\n        string memory description,\n        string memory imageSVG\n    ) internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                name,\n                                '\", \"description\":\"',\n                                description,\n                                '\", \"image\": \"',\n                                \"data:image/svg+xml;base64,\",\n                                Base64.encode(bytes(imageSVG)),\n                                '\"}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function constructTokenSVG(\n        CreditPositionSVG.Input[] memory inputs,\n        string memory color,\n        string memory title\n    ) internal pure returns (string memory) {\n        CreditPositionSVG.SVGParams memory params = CreditPositionSVG.SVGParams({\n            inputs: inputs,\n            color: color,\n            title: title\n        });\n        return CreditPositionSVG.constructSVG(params);\n    }\n\n    function weiToPrecisionLongString(uint256 weiAmt, uint256 decimal) public pure returns (string memory) {\n        if (decimal == 0) {\n            return string(abi.encodePacked(weiAmt.toString(), \".00\"));\n        }\n        require(decimal >= 4, \"Should have either greater than or equal to 4 decimal places or 0 decimal places\");\n\n        uint256 significantDigits = weiAmt / (10 ** decimal);\n        uint256 precisionDigits = weiAmt % (10 ** (decimal));\n\n        if (precisionDigits == 0) {\n            return string(abi.encodePacked(significantDigits.toString(), \".00\"));\n        }\n\n        string memory precisionDigitsString = toStringTrimmed(precisionDigits);\n        uint256 lengthDiff = decimal - bytes(precisionDigits.toString()).length;\n        for (uint256 i; i < lengthDiff; ) {\n            precisionDigitsString = string(abi.encodePacked(\"0\", precisionDigitsString));\n            unchecked {\n                ++i;\n            }\n        }\n\n        return string(abi.encodePacked(significantDigits.toString(), \".\", precisionDigitsString));\n    }\n\n    function weiToPrecisionString(uint256 weiAmt, uint256 decimal) public pure returns (string memory) {\n        if (decimal == 0) {\n            return string(abi.encodePacked(weiAmt.toString(), \".00\"));\n        }\n        require(decimal >= 4, \"Should have either greater than or equal to 4 decimal places or 0 decimal places\");\n\n        uint256 significantDigits = weiAmt / (10 ** decimal);\n        if (significantDigits > 1e9) {\n            string memory weiAmtString = weiAmt.toString();\n            uint256 len = bytes(weiAmtString).length - 9;\n            weiAmt = weiAmt / (10 ** len);\n            return string(abi.encodePacked(weiAmt.toString(), \"...\"));\n        }\n        uint256 precisionDigits = weiAmt % (10 ** (decimal));\n        precisionDigits = precisionDigits / (10 ** (decimal - 4));\n\n        if (precisionDigits == 0) {\n            return string(abi.encodePacked(significantDigits.toString(), \".00\"));\n        }\n\n        string memory precisionDigitsString = toStringTrimmed(precisionDigits);\n        uint256 lengthDiff = 4 - bytes(precisionDigits.toString()).length;\n        for (uint256 i; i < lengthDiff; ) {\n            precisionDigitsString = string(abi.encodePacked(\"0\", precisionDigitsString));\n            unchecked {\n                ++i;\n            }\n        }\n\n        return string(abi.encodePacked(significantDigits.toString(), \".\", precisionDigitsString));\n    }\n\n    function toStringTrimmed(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        //slither-disable-start uninitialized-local\n        uint256 digits;\n        uint256 flag;\n        //slither-disable-end uninitialized-local\n        while (temp != 0) {\n            if (flag == 0 && temp % 10 == 0) {\n                temp /= 10;\n                continue;\n            } else if (flag == 0 && temp % 10 != 0) {\n                flag++;\n                digits++;\n            } else {\n                digits++;\n            }\n\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        flag = 0;\n        while (value != 0) {\n            if (flag == 0 && value % 10 == 0) {\n                value /= 10;\n                continue;\n            } else if (flag == 0 && value % 10 != 0) {\n                flag++;\n                digits -= 1;\n                buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            } else {\n                digits -= 1;\n                buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            }\n\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    function addressToString(address _addr) public pure returns (string memory) {\n        bytes memory data = abi.encodePacked(_addr);\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(2 + data.length * 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i; i < data.length; ) {\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\n            unchecked {\n                ++i;\n            }\n        }\n        return string(str);\n    }\n\n    function getSlice(uint256 begin, uint256 end, string memory text) public pure returns (string memory) {\n        bytes memory a = new bytes(end - begin + 1);\n        for (uint256 i; i <= end - begin; ) {\n            a[i] = bytes(text)[i + begin - 1];\n            unchecked {\n                ++i;\n            }\n        }\n        return string(a);\n    }\n\n    function parseSymbol(string memory symbol) public pure returns (string memory) {\n        if (bytes(symbol).length > 5) {\n            return getSlice(1, 5, symbol);\n        }\n        return symbol;\n    }\n\n    function getMonthString(uint256 _month) public pure returns (string memory) {\n        string[12] memory months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        return months[_month];\n    }\n\n    function getReadableDateString(uint256 timestamp) public pure returns (string memory) {\n        (uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second) = DateTime\n            .timestampToDateTime(timestamp);\n\n        string memory result = string(\n            abi.encodePacked(\n                day.toString(),\n                \" \",\n                getMonthString(month - 1),\n                \" \",\n                year.toString(),\n                \", \",\n                padWithZero(hour),\n                \":\",\n                padWithZero(minute),\n                \":\",\n                padWithZero(second),\n                \" UTC\"\n            )\n        );\n        return result;\n    }\n\n    function padWithZero(uint256 value) public pure returns (string memory) {\n        if (value < 10) {\n            return string(abi.encodePacked(\"0\", value.toString()));\n        }\n        return value.toString();\n    }\n}\n"
    },
    "contracts/tokens/libraries/SafeMetadata.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nlibrary SafeMetadata {\n    function isSafeString(string memory str) public pure returns (bool) {\n        bytes memory b = bytes(str);\n\n        for (uint256 i; i < b.length; i++) {\n            bytes1 char = b[i];\n            if (\n                !(char >= 0x30 && char <= 0x39) && //9-0\n                !(char >= 0x41 && char <= 0x5A) && //A-Z\n                !(char >= 0x61 && char <= 0x7A) && //a-z\n                !(char == 0x2E) &&\n                !(char == 0x20) // .\" \"\n            ) return false;\n        }\n        return true;\n    }\n\n    function safeName(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(IERC20Metadata.name.selector)\n        );\n        return success ? returnDataToString(data) : \"Token\";\n    }\n\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\n        (bool _success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(IERC20Metadata.symbol.selector)\n        );\n        string memory tokenSymbol = _success ? returnDataToString(data) : \"TKN\";\n\n        bool success = isSafeString(tokenSymbol);\n        return success ? tokenSymbol : \"TKN\";\n    }\n\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\n        );\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    function returnDataToString(bytes memory data) private pure returns (string memory) {\n        if (data.length >= 64) {\n            return abi.decode(data, (string));\n        } else if (data.length == 32) {\n            uint8 i;\n            while (i < 32 && data[i] != 0) {\n                unchecked {\n                    ++i;\n                }\n            }\n            bytes memory bytesArray = new bytes(i);\n            uint256 length = bytesArray.length;\n            for (i = 0; i < length; ) {\n                bytesArray[i] = data[i];\n                unchecked {\n                    ++i;\n                }\n            }\n            return string(bytesArray);\n        } else {\n            return \"???\";\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}